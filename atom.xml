<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>benjamin.pizza</title>
    <link href="http://www.benjamin.pizza/atom.xml" rel="self" />
    <link href="http://www.benjamin.pizza" />
    <id>http://www.benjamin.pizza/atom.xml</id>
    <author>
        <name>Benjamin Hodgson</name>
        <email>bhodgson@stackoverflow.com</email>
    </author>
    <updated>2019-10-05T00:00:00Z</updated>
    <entry>
    <title>Rewriting IRewritable</title>
    <link href="http://www.benjamin.pizza/posts/2019-10-05-rewriting-irewritable.html" />
    <id>http://www.benjamin.pizza/posts/2019-10-05-rewriting-irewritable.html</id>
    <published>2019-10-05T00:00:00Z</published>
    <updated>2019-10-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October  5, 2019
    
</div>

<blockquote>
<p><em>I got married yesterday! This post is about my C# generic programming library <a href="https://github.com/benjamin-hodgson/Sawmill">Sawmill</a>. Have a read of <a href="/posts/2017-11-13-recursion-without-recursion.html">my earlier post</a> for an introduction.</em></p>
</blockquote>
<h2 id="how-things-were">How things were</h2>
<p>I recently made a substantial change to Sawmill’s core <code>IRewritable</code> interface. Here’s what it used to look like:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">interface</span> IRewritable&lt;T&gt; where T : IRewritable&lt;T&gt;</span>
<span id="cb1-2"><a href="#cb1-2"></a>{</span>
<span id="cb1-3"><a href="#cb1-3"></a>    Children&lt;T&gt; <span class="fu">GetChildren</span>();</span>
<span id="cb1-4"><a href="#cb1-4"></a>    T <span class="fu">SetChildren</span>(Children&lt;T&gt; newChildren);</span>
<span id="cb1-5"><a href="#cb1-5"></a>    T <span class="fu">RewriteChildren</span>(Func&lt;T, T&gt; transformer);</span>
<span id="cb1-6"><a href="#cb1-6"></a>}</span></code></pre></div>
<p>It’s a pleasingly simple interface with two core operations — <code>GetChildren</code> returns the current object’s immediate children and <code>SetChildren</code> replaces them. But there are also some warts.</p>
<h3 id="wart-1-childrent">Wart 1: <code>Children&lt;T&gt;</code></h3>
<p><code>Children&lt;T&gt;</code> is a custom struct, not a standard collection type:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">struct</span> Children&lt;T&gt;</span>
<span id="cb2-2"><a href="#cb2-2"></a>{</span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="kw">public</span> NumberOfChildren NumberOfChildren { <span class="kw">get</span>; }</span>
<span id="cb2-4"><a href="#cb2-4"></a>    <span class="kw">public</span> T First { <span class="kw">get</span>; }</span>
<span id="cb2-5"><a href="#cb2-5"></a>    <span class="kw">public</span> T Second { <span class="kw">get</span>; }</span>
<span id="cb2-6"><a href="#cb2-6"></a>    <span class="kw">public</span> ImmutableList&lt;T&gt; Many { <span class="kw">get</span>; }</span>
<span id="cb2-7"><a href="#cb2-7"></a>}</span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="kw">enum</span> NumberOfChildren</span>
<span id="cb2-9"><a href="#cb2-9"></a>{</span>
<span id="cb2-10"><a href="#cb2-10"></a>    None, One, Two, Many</span>
<span id="cb2-11"><a href="#cb2-11"></a>}</span></code></pre></div>
<p>I wanted to avoid boxing when the object has a small number of children (which is fairly common in practice). So <code>GetChildren</code> returns a <code>Children&lt;T&gt;</code>, passing up to two children on the stack and the rest in an <code>ImmutableList</code>. The <code>NumberOfChildren</code> property tells the library how many of the struct’s fields are filled in.</p>
<p>This custom collection type is an extra hurdle to understanding <code>IRewritable</code>’s API. It also makes certain parts of Sawmill’s implementation more complex — many internal methods have to <code>switch</code> on the <code>NumberOfChildren</code> they’re working with and do the same work in four different ways. It’s also relatively large for a <code>struct</code> (at least 16 bytes and probably more, depending on your processor architecture) so there is a marginal performance cost associated with copying it around.</p>
<h3 id="wart-2-collections">Wart 2: Collections</h3>
<p>In fact, having <code>GetChildren</code> return a collection at all is problematic, because it forces implementations to allocate memory. If your object has three or more children (and they’re not already stored in an <code>ImmutableList</code>) then you have to create a new <code>ImmutableList</code> whenever <code>GetChildren</code> is called:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">class</span> ThreeChildren : IRewritable&lt;ThreeChildren&gt;</span>
<span id="cb3-2"><a href="#cb3-2"></a>{</span>
<span id="cb3-3"><a href="#cb3-3"></a>    <span class="kw">private</span> <span class="kw">readonly</span> ThreeChildren _child1;</span>
<span id="cb3-4"><a href="#cb3-4"></a>    <span class="kw">private</span> <span class="kw">readonly</span> ThreeChildren _child2;</span>
<span id="cb3-5"><a href="#cb3-5"></a>    <span class="kw">private</span> <span class="kw">readonly</span> ThreeChildren _child3;</span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a>    <span class="kw">public</span> Children&lt;ThreeChildren&gt; <span class="fu">GetChildren</span>()</span>
<span id="cb3-8"><a href="#cb3-8"></a>        =&gt; <span class="kw">new</span> Children&lt;ThreeChildren&gt;(</span>
<span id="cb3-9"><a href="#cb3-9"></a>            Children.<span class="fu">Many</span>,</span>
<span id="cb3-10"><a href="#cb3-10"></a>            ImmutableList.<span class="fu">Create</span>(_child1, _child2, _child3)</span>
<span id="cb3-11"><a href="#cb3-11"></a>        );</span>
<span id="cb3-12"><a href="#cb3-12"></a>    <span class="kw">public</span> ThreeChildren <span class="fu">SetChildren</span>(Children&lt;ThreeChildren&gt; newChildren)</span>
<span id="cb3-13"><a href="#cb3-13"></a>        =&gt; <span class="kw">new</span> <span class="fu">ThreeChildren</span>(</span>
<span id="cb3-14"><a href="#cb3-14"></a>            newChildren.<span class="fu">Many</span>[<span class="dv">0</span>],</span>
<span id="cb3-15"><a href="#cb3-15"></a>            newChildren.<span class="fu">Many</span>[<span class="dv">1</span>],</span>
<span id="cb3-16"><a href="#cb3-16"></a>            newChildren.<span class="fu">Many</span>[<span class="dv">2</span>]</span>
<span id="cb3-17"><a href="#cb3-17"></a>        );</span>
<span id="cb3-18"><a href="#cb3-18"></a>}</span></code></pre></div>
<p>When Sawmill traverses a tree it typically calls <code>GetChildren()</code> for every node in the tree. That’s a lot of throwaway <code>ImmutableList</code>s!</p>
<p>One way to avoid creating all this garbage might be to redesign <code>IRewritable</code> to be buffer-oriented.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">interface</span> IRewritable&lt;T&gt; where T : IRewritable&lt;T&gt;</span>
<span id="cb4-2"><a href="#cb4-2"></a>{</span>
<span id="cb4-3"><a href="#cb4-3"></a>    <span class="dt">int</span> <span class="fu">CountChildren</span>();</span>
<span id="cb4-4"><a href="#cb4-4"></a>    <span class="dt">void</span> <span class="fu">GetChildren</span>(T[] buffer);</span>
<span id="cb4-5"><a href="#cb4-5"></a>    T <span class="fu">SetChildren</span>(T[] newChildren);</span>
<span id="cb4-6"><a href="#cb4-6"></a>}</span></code></pre></div>
<p>With this design, Sawmill passes an array into <code>GetChildren</code> (after calling <code>CountChildren</code> to find out how big the array needs to be) and asks the object to copy its children into the array. Implementations of <code>IRewritable</code> no longer have to allocate memory for their return value. The memory is allocated (and hopefully reused) by the library. But this API is less safe — if an <code>IRewritable</code> implementation stores a reference to the buffer then it could get unexpectedly mutated.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">class</span> Bad : IRewritable&lt;Bad&gt;</span>
<span id="cb5-2"><a href="#cb5-2"></a>{</span>
<span id="cb5-3"><a href="#cb5-3"></a>    <span class="kw">private</span> <span class="kw">readonly</span> Bad[] _children;</span>
<span id="cb5-4"><a href="#cb5-4"></a></span>
<span id="cb5-5"><a href="#cb5-5"></a>    <span class="kw">public</span> <span class="dt">int</span> <span class="fu">CountChildren</span>() =&gt; _children.<span class="fu">Length</span>;</span>
<span id="cb5-6"><a href="#cb5-6"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">GetChildren</span>(Bad[] buffer) =&gt; _children.<span class="fu">CopyTo</span>(buffer);</span>
<span id="cb5-7"><a href="#cb5-7"></a>    <span class="kw">public</span> Bad <span class="fu">SetChildren</span>(Bad[] newChildren) =&gt; <span class="kw">new</span> <span class="fu">Bad</span>(newChildren);  <span class="co">// BUG</span></span>
<span id="cb5-8"><a href="#cb5-8"></a>}</span></code></pre></div>
<p>This is not a “pit of success” API — <code>SetChildren</code> looks sensible but could go wrong if anyone else has a reference to the array. Sawmill would have to allocate a new array for each <code>GetChildren</code>/<code>SetChildren</code> call in order to be safe. So this design would end up allocating just as much as the <code>ImmutableList</code> version.</p>
<p>(Keep the buffer idea in your head, though, because we’ll be coming back to it in a minute.)</p>
<h3 id="wart-3-rewritechildren">Wart 3: <code>RewriteChildren</code></h3>
<p><code>RewriteChildren</code>, which applies a transformation function to the object’s immediate children (in other words, a one-level <code>Rewrite</code>), has a sensible implementation in terms of the other two methods: get the children, transform them, and put them back.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">public</span> <span class="kw">static</span> T DefaultRewriteChildren&lt;T&gt;(<span class="kw">this</span> T value, Func&lt;T, T&gt; transformer)</span>
<span id="cb6-2"><a href="#cb6-2"></a>    where T : IRewritable&lt;T&gt;</span>
<span id="cb6-3"><a href="#cb6-3"></a>{</span>
<span id="cb6-4"><a href="#cb6-4"></a>    <span class="dt">var</span> children = value.<span class="fu">GetChildren</span>();</span>
<span id="cb6-5"><a href="#cb6-5"></a>    <span class="dt">var</span> newChildren = children.<span class="fu">Select</span>(transformer);</span>
<span id="cb6-6"><a href="#cb6-6"></a>    <span class="kw">return</span> value.<span class="fu">SetChildren</span>(newChildren);</span>
<span id="cb6-7"><a href="#cb6-7"></a>}</span></code></pre></div>
<p>(<a href="https://github.com/benjamin-hodgson/Sawmill/blob/87aea1e5757360b99457c8e2e6a7993fc2176f23/Sawmill/Rewriter.DefaultRewriteChildren.cs">The real <code>DefaultRewriteChildren</code></a> was a bit more complex than this, because it tried to avoid calling <code>SetChildren</code> if <code>transformer</code> didn’t actually change anything.)</p>
<p>In fact, I expect that most <code>IRewritable</code>s would just delegate <code>RewriteChildren</code> to <code>DefaultRewriteChildren</code>. So why did I put <code>RewriteChildren</code> on the interface? It’s because of Wart 2 — <code>GetChildren</code> can be expensive because it might have to create an <code>ImmutableList</code>. (And applying <code>transformer</code> to that <code>ImmutableList</code> using eg <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.convertall?view=netcore-3.0"><code>ConvertAll</code></a> would have to create another one.) So <code>DefaultRewriteChildren</code> is slow; the idea of <code>RewriteChildren</code> was for objects to transform their children directly, without going via an <code>ImmutableList</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">class</span> ThreeChildren : IRewritable&lt;ThreeChildren&gt;</span>
<span id="cb7-2"><a href="#cb7-2"></a>{</span>
<span id="cb7-3"><a href="#cb7-3"></a>    <span class="co">// ...</span></span>
<span id="cb7-4"><a href="#cb7-4"></a>    <span class="kw">public</span> ThreeChildren <span class="fu">RewriteChildren</span>(Func&lt;ThreeChildren, ThreeChildren&gt; f)</span>
<span id="cb7-5"><a href="#cb7-5"></a>        =&gt; <span class="kw">new</span> <span class="fu">ThreeChildren</span>(<span class="fu">f</span>(_child1), <span class="fu">f</span>(_child2), <span class="fu">f</span>(_child3));  <span class="co">// no ImmutableList</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>}</span></code></pre></div>
<p>The extra method makes <code>IRewritable</code> harder to understand and harder to implement. Implementing <code>RewriteChildren</code> (without using <code>DefaultRewriteChildren</code>) can be tricky; if the transformer function doesn’t change anything you should avoid recreating the object.</p>
<h2 id="the-new-way">The new way</h2>
<p>I’m pleased to say that <code>IRewritable</code>’s new design addresses all three of these warts. Remember the “buffer” idea from earlier?</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">interface</span> IRewritable&lt;T&gt; where T : IRewritable&lt;T&gt;</span>
<span id="cb8-2"><a href="#cb8-2"></a>{</span>
<span id="cb8-3"><a href="#cb8-3"></a>    <span class="dt">int</span> <span class="fu">CountChildren</span>();</span>
<span id="cb8-4"><a href="#cb8-4"></a>    <span class="dt">void</span> <span class="fu">GetChildren</span>(Span&lt;T&gt; buffer);</span>
<span id="cb8-5"><a href="#cb8-5"></a>    T <span class="fu">SetChildren</span>(ReadOnlySpan&lt;T&gt; newChildren);</span>
<span id="cb8-6"><a href="#cb8-6"></a>}</span></code></pre></div>
<p>This design is almost identical to the one I outlined earlier — it uses <a href="https://docs.microsoft.com/en-us/dotnet/api/system.span-1?view=netcore-3.0"><code>Span</code></a>s instead of arrays. (For the uninitiated, a <code>Span</code> is basically a “slice” of an array. It can also be backed by <em>unmanaged</em> memory, though, making it more flexible than <code>ArraySegment</code>.)</p>
<ul>
<li><code>CountChildren</code> tells Sawmill how much space is needed to copy the children.</li>
<li><code>GetChildren</code> copies the current object’s immediate children into <code>buffer</code>.</li>
<li><code>SetChildren</code> creates a copy of the current object with its immediate children replaced.</li>
</ul>
<p>Here’s the important difference. Unlike an array, a <code>Span</code> <em>can’t be stored on the heap</em>. <code>Span</code> is defined using <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref?view=netcore-3.0#ref-struct-types">the <code>ref</code> keyword</a>, which tells the compiler to check that <code>Span</code>s are confined to the stack. If you pass a <code>Span</code> into a method as an argument, you can be confident that the <code>Span</code> won’t leave the scope of that method’s stack frame (just like <code>ref</code>).</p>
<p>So <code>Span</code> thoroughly solves the safety issue with the array-oriented API. I don’t have to worry about mutating a <code>Span</code> which got stored inside a client object, because the <code>Span</code> can’t be stored! This allows Sawmill to safely reuse <code>Span</code>s, rather than allocating a new array for each <code>GetChildren</code>/<code>SetChildren</code> call.</p>
<p>So Sawmill’s methods like <code>RewriteChildren</code> can be implemented without allocating memory. In this example I’m using <a href="https://docs.microsoft.com/en-us/dotnet/api/system.buffers.arraypool-1?view=netcore-3.0"><code>ArrayPool</code></a> to avoid creating a new array for every <code>RewriteChildren</code> call.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">public</span> <span class="kw">static</span> T RewriteChildren&lt;T&gt;(<span class="kw">this</span> T value, Func&lt;T, T&gt; transformer)</span>
<span id="cb9-2"><a href="#cb9-2"></a>    where T : IRewritable&lt;T&gt;</span>
<span id="cb9-3"><a href="#cb9-3"></a>{</span>
<span id="cb9-4"><a href="#cb9-4"></a>    <span class="dt">var</span> count = value.<span class="fu">CountChildren</span>();</span>
<span id="cb9-5"><a href="#cb9-5"></a>    <span class="dt">var</span> array = ArrayPool&lt;T&gt;.<span class="fu">Shared</span>.<span class="fu">Rent</span>(count);</span>
<span id="cb9-6"><a href="#cb9-6"></a>    <span class="co">// ArrayPool can return arrays bigger than you asked for</span></span>
<span id="cb9-7"><a href="#cb9-7"></a>    <span class="dt">var</span> span = array.<span class="fu">AsSpan</span>().<span class="fu">Slice</span>(count);</span>
<span id="cb9-8"><a href="#cb9-8"></a></span>
<span id="cb9-9"><a href="#cb9-9"></a>    value.<span class="fu">GetChildren</span>(span);</span>
<span id="cb9-10"><a href="#cb9-10"></a>    </span>
<span id="cb9-11"><a href="#cb9-11"></a>    <span class="kw">for</span> (<span class="dt">var</span> i = <span class="dv">0</span>; i &lt; span.<span class="fu">Length</span>; i++)</span>
<span id="cb9-12"><a href="#cb9-12"></a>    {</span>
<span id="cb9-13"><a href="#cb9-13"></a>        span[i] = <span class="fu">transformer</span>(span[i]);</span>
<span id="cb9-14"><a href="#cb9-14"></a>    }</span>
<span id="cb9-15"><a href="#cb9-15"></a></span>
<span id="cb9-16"><a href="#cb9-16"></a>    <span class="dt">var</span> result = value.<span class="fu">SetChildren</span>(newChildren);</span>
<span id="cb9-17"><a href="#cb9-17"></a>    ArrayPool&lt;T&gt;.<span class="fu">Shared</span>.<span class="fu">Return</span>(array);</span>
<span id="cb9-18"><a href="#cb9-18"></a>    <span class="kw">return</span> result;</span>
<span id="cb9-19"><a href="#cb9-19"></a>}</span></code></pre></div>
<p>The main reason for having <code>RewriteChildren</code> be a method on the interface was to avoid allocating memory (for the <code>GetChildren</code> calls). So we don’t need it on the interface any more — this extension method serves as a single universal implementation. Likewise, <code>Children&lt;T&gt;</code>’s purpose was also to avoid allocating memory, so we can do away with it too.</p>
<h2 id="relieving-arraypool-pressure">Relieving <code>ArrayPool</code> pressure</h2>
<p>There’s one operational problem with this implementation: it can end up renting a large number of arrays from the pool. <code>Rewrite</code>, which applies a transformation function to every node in a tree (not just one layer), is implemented something like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">public</span> <span class="kw">static</span> T <span class="fu">Rewrite</span>(<span class="kw">this</span> T value, Func&lt;T, T&gt; transformer) where T : IRewritable&lt;T&gt;</span>
<span id="cb10-2"><a href="#cb10-2"></a>    =&gt; <span class="fu">transformer</span>(t.<span class="fu">RewriteChildren</span>(child =&gt; child.<span class="fu">Rewrite</span>(transformer)));</span></code></pre></div>
<p>The lambda which is passed to <code>RewriteChildren</code> contains a recursive call to <code>Rewrite</code>. Let’s think through the operational behaviour of <code>Rewrite</code>:</p>
<ol type="1">
<li><code>Rewrite</code> calls <code>RewriteChildren</code></li>
<li><code>RewriteChildren</code> rents an array from the array pool</li>
<li><code>RewriteChildren</code> calls the <code>child =&gt; child.Rewrite(transformer)</code> lambda function for each child</li>
<li>The lambda function recursively calls <code>Rewrite</code>; steps 1-3 are repeated until you encounter a node with no children</li>
<li><code>RewriteChildren</code> calls <code>SetChildren</code> and returns its array to the array pool</li>
<li><code>RewriteChildren</code> returns and step 5 is repeated as you return up the call stack</li>
</ol>
<p>Since steps 1-3 are repeated before step 5 happens, you can end up renting many arrays (a number equal to the height of the tree) before returning any of them to the pool. So the array pool could run out of arrays!</p>
<p>To fix this problem, we want to rent a small number of large arrays from the array pool, rather than a large number of small ones. We can lean on the fact that each array only lives as long as a single method — the array is <code>Rent</code>ed at the start of <code>RewriteChildren</code> and then <code>Return</code>ed at the end. The memory usage is stack-shaped.</p>
<p>So here’s the plan. We’re going to rent a large array from the pool at <code>Rewrite</code>’s beginning, and <code>RewriteChildren</code> will take a chunk from that array each time it’s called. Each chunk will be freed up before any previously-allocated chunks are freed.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">public</span> <span class="kw">static</span> T Rewrite&lt;T&gt;(<span class="kw">this</span> T value, Func&lt;T, T&gt; transformer)</span>
<span id="cb11-2"><a href="#cb11-2"></a>    where T : IRewritable&lt;T&gt;</span>
<span id="cb11-3"><a href="#cb11-3"></a>{</span>
<span id="cb11-4"><a href="#cb11-4"></a>    <span class="kw">using</span> (<span class="dt">var</span> chunks = <span class="kw">new</span> ChunkStack&lt;T&gt;())</span>
<span id="cb11-5"><a href="#cb11-5"></a>    {</span>
<span id="cb11-6"><a href="#cb11-6"></a>        T <span class="fu">Go</span>(T x)</span>
<span id="cb11-7"><a href="#cb11-7"></a>            =&gt; <span class="fu">transformer</span>(t.<span class="fu">RewriteChildrenInternal</span>(Go, chunks));</span>
<span id="cb11-8"><a href="#cb11-8"></a>        <span class="kw">return</span> <span class="fu">Go</span>(value);</span>
<span id="cb11-9"><a href="#cb11-9"></a>    }</span>
<span id="cb11-10"><a href="#cb11-10"></a>}</span>
<span id="cb11-11"><a href="#cb11-11"></a></span>
<span id="cb11-12"><a href="#cb11-12"></a><span class="kw">public</span> <span class="kw">static</span> T RewriteChildren&lt;T&gt;(<span class="kw">this</span> T value, Func&lt;T, T&gt; transformer)</span>
<span id="cb11-13"><a href="#cb11-13"></a>    where T : IRewritable&lt;T&gt;</span>
<span id="cb11-14"><a href="#cb11-14"></a>{</span>
<span id="cb11-15"><a href="#cb11-15"></a>    <span class="kw">using</span> (<span class="dt">var</span> chunks = <span class="kw">new</span> ChunkStack&lt;T&gt;())</span>
<span id="cb11-16"><a href="#cb11-16"></a>    {</span>
<span id="cb11-17"><a href="#cb11-17"></a>        <span class="kw">return</span> <span class="fu">RewriteChildrenInternal</span>(t, transformer, chunks);</span>
<span id="cb11-18"><a href="#cb11-18"></a>    }</span>
<span id="cb11-19"><a href="#cb11-19"></a>}</span>
<span id="cb11-20"><a href="#cb11-20"></a></span>
<span id="cb11-21"><a href="#cb11-21"></a><span class="kw">private</span> <span class="kw">static</span> T RewriteChildrenInternal&lt;T&gt;(</span>
<span id="cb11-22"><a href="#cb11-22"></a>    <span class="kw">this</span> T value,</span>
<span id="cb11-23"><a href="#cb11-23"></a>    Func&lt;T, T&gt; transformer,</span>
<span id="cb11-24"><a href="#cb11-24"></a>    ChunkStack&lt;T&gt; chunks</span>
<span id="cb11-25"><a href="#cb11-25"></a>) where T : IRewritable&lt;T&gt;</span>
<span id="cb11-26"><a href="#cb11-26"></a>{</span>
<span id="cb11-27"><a href="#cb11-27"></a>    <span class="dt">var</span> count = value.<span class="fu">CountChildren</span>();</span>
<span id="cb11-28"><a href="#cb11-28"></a>    <span class="dt">var</span> span = chunks.<span class="fu">Allocate</span>(count);</span>
<span id="cb11-29"><a href="#cb11-29"></a></span>
<span id="cb11-30"><a href="#cb11-30"></a>    value.<span class="fu">GetChildren</span>(span);</span>
<span id="cb11-31"><a href="#cb11-31"></a>    </span>
<span id="cb11-32"><a href="#cb11-32"></a>    <span class="kw">for</span> (<span class="dt">var</span> i = <span class="dv">0</span>; i &lt; span.<span class="fu">Length</span>; i++)</span>
<span id="cb11-33"><a href="#cb11-33"></a>    {</span>
<span id="cb11-34"><a href="#cb11-34"></a>        span[i] = <span class="fu">transformer</span>(span[i]);</span>
<span id="cb11-35"><a href="#cb11-35"></a>    }</span>
<span id="cb11-36"><a href="#cb11-36"></a></span>
<span id="cb11-37"><a href="#cb11-37"></a>    <span class="dt">var</span> result = value.<span class="fu">SetChildren</span>(newChildren);</span>
<span id="cb11-38"><a href="#cb11-38"></a>    chunks.<span class="fu">Free</span>(span);</span>
<span id="cb11-39"><a href="#cb11-39"></a>    <span class="kw">return</span> result;</span>
<span id="cb11-40"><a href="#cb11-40"></a>}</span></code></pre></div>
<p><code>ChunkStack</code> contains an array and a count of how much of that array is in use. <code>Allocate</code> and <code>Free</code> increase and decrease that count.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">class</span> ChunkStack&lt;T&gt; : IDisposable</span>
<span id="cb12-2"><a href="#cb12-2"></a>{</span>
<span id="cb12-3"><a href="#cb12-3"></a>    <span class="kw">private</span> T[] _array = ArrayPool&lt;T&gt;.<span class="fu">Shared</span>.<span class="fu">Rent</span>(<span class="dv">512</span>);</span>
<span id="cb12-4"><a href="#cb12-4"></a>    <span class="kw">private</span> <span class="dt">int</span> _used = <span class="dv">0</span>;</span>
<span id="cb12-5"><a href="#cb12-5"></a></span>
<span id="cb12-6"><a href="#cb12-6"></a>    <span class="kw">public</span> Span&lt;T&gt; <span class="fu">Allocate</span>(<span class="dt">int</span> count)</span>
<span id="cb12-7"><a href="#cb12-7"></a>    {</span>
<span id="cb12-8"><a href="#cb12-8"></a>        <span class="dt">var</span> span = _array.<span class="fu">Slice</span>(_used, count);</span>
<span id="cb12-9"><a href="#cb12-9"></a>        _used += count;</span>
<span id="cb12-10"><a href="#cb12-10"></a>        <span class="kw">return</span> span;</span>
<span id="cb12-11"><a href="#cb12-11"></a>    }</span>
<span id="cb12-12"><a href="#cb12-12"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">Free</span>(Span&lt;T&gt; span)</span>
<span id="cb12-13"><a href="#cb12-13"></a>    {</span>
<span id="cb12-14"><a href="#cb12-14"></a>        _used -= span.<span class="fu">Length</span>;</span>
<span id="cb12-15"><a href="#cb12-15"></a>    }</span>
<span id="cb12-16"><a href="#cb12-16"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">Dispose</span>()</span>
<span id="cb12-17"><a href="#cb12-17"></a>    {</span>
<span id="cb12-18"><a href="#cb12-18"></a>        <span class="kw">if</span> (_array != <span class="kw">null</span>)</span>
<span id="cb12-19"><a href="#cb12-19"></a>        {</span>
<span id="cb12-20"><a href="#cb12-20"></a>            ArrayPool&lt;T&gt;.<span class="fu">Shared</span>.<span class="fu">Return</span>(_array);</span>
<span id="cb12-21"><a href="#cb12-21"></a>            _array = <span class="kw">null</span>;</span>
<span id="cb12-22"><a href="#cb12-22"></a>        }</span>
<span id="cb12-23"><a href="#cb12-23"></a>    }</span>
<span id="cb12-24"><a href="#cb12-24"></a>}</span></code></pre></div>
<p>I’ve glossed over an important part of <code>ChunkStack</code>’s implementation: what happens when the array fills up? The <a href="https://github.com/benjamin-hodgson/Sawmill/blob/bf652359023a76d3ea395d7d743db1a8d6559ec2/Sawmill/ChunkStack.cs">real implementation</a> manages a collection of “regions”, taking a new region from the array pool when existing regions fill up.</p>
<p>In the pathological case of a <em>very</em> large tree, this version of <code>Rewrite</code> can still exhaust the array pool, but it’ll happen much less quickly.</p>
<h2 id="hackalloc">Hackalloc</h2>
<p>I mentioned earlier that a <code>Span</code> is not necessarily backed by an array. <code>Span</code> represents <em>a contiguous block of memory</em>, with no assumptions about where that memory is or how it’s managed. A <code>Span</code> could be a slice of an array, or it could be a chunk of unmanaged memory, or it could be an area of the stack. Under the hood it’s <em>just a pointer</em>; <code>Span</code> doesn’t care exactly where the pointer points.</p>
<p>In fact, C# has built in support for that last case. The <code>stackalloc</code> keyword works like C’s <code>alloca</code>: it carves out a chunk of memory directly in the current stack frame, which becomes invalid when the current method returns. Until recently, <code>stackalloc</code> was only available in an <code>unsafe</code> context, but today it’s available in safe code thanks to <code>Span</code>.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb13-1"><a href="#cb13-1"></a><span class="kw">public</span> <span class="dt">void</span> <span class="fu">Foo</span>()</span>
<span id="cb13-2"><a href="#cb13-2"></a>{</span>
<span id="cb13-3"><a href="#cb13-3"></a>    <span class="co">// allocate space for three ints in the current stack frame</span></span>
<span id="cb13-4"><a href="#cb13-4"></a>    Span&lt;<span class="dt">int</span>&gt; myInts = <span class="kw">stackalloc</span> <span class="dt">int</span>[<span class="dv">3</span>];</span>
<span id="cb13-5"><a href="#cb13-5"></a>    myInts[<span class="dv">0</span>] = <span class="dv">123</span>;</span>
<span id="cb13-6"><a href="#cb13-6"></a>    myInts[<span class="dv">1</span>] = <span class="dv">456</span>;</span>
<span id="cb13-7"><a href="#cb13-7"></a>    myInts[<span class="dv">2</span>] = myInts[<span class="dv">0</span>] + myInts[<span class="dv">1</span>];</span>
<span id="cb13-8"><a href="#cb13-8"></a>    Console.<span class="fu">WriteLine</span>(myInts[<span class="dv">2</span>]);</span>
<span id="cb13-9"><a href="#cb13-9"></a>}</span></code></pre></div>
<p>I want to use <code>stackalloc</code> to avoid taking memory from the <code>ChunkStack</code> when an object has a small number (say, 4) of children. This is fairly common in practice. Stack memory tends to be marginally faster than heap memory because it’s more likely to be in the processor cache, so this may have a modest performance benefit as well as relieving pressure on the array pool. If there are more than 4 children we can just fall back on the <code>ChunkStack</code>.</p>
<p>Here’s the new <code>RewriteChildrenInternal</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">private</span> <span class="kw">static</span> T RewriteChildrenInternal&lt;T&gt;(</span>
<span id="cb14-2"><a href="#cb14-2"></a>    <span class="kw">this</span> T value,</span>
<span id="cb14-3"><a href="#cb14-3"></a>    Func&lt;T, T&gt; transformer,</span>
<span id="cb14-4"><a href="#cb14-4"></a>    ChunkStack&lt;T&gt; chunks</span>
<span id="cb14-5"><a href="#cb14-5"></a>) where T : IRewritable&lt;T&gt;</span>
<span id="cb14-6"><a href="#cb14-6"></a>{</span>
<span id="cb14-7"><a href="#cb14-7"></a>    <span class="dt">var</span> count = value.<span class="fu">CountChildren</span>();</span>
<span id="cb14-8"><a href="#cb14-8"></a></span>
<span id="cb14-9"><a href="#cb14-9"></a>    Span&lt;T&gt; span = <span class="kw">stackalloc</span> T[<span class="dv">4</span>];</span>
<span id="cb14-10"><a href="#cb14-10"></a>    <span class="kw">if</span> (count &gt; <span class="dv">4</span>)</span>
<span id="cb14-11"><a href="#cb14-11"></a>    {</span>
<span id="cb14-12"><a href="#cb14-12"></a>        span = chunks.<span class="fu">Allocate</span>(count);</span>
<span id="cb14-13"><a href="#cb14-13"></a>    }</span>
<span id="cb14-14"><a href="#cb14-14"></a></span>
<span id="cb14-15"><a href="#cb14-15"></a>    value.<span class="fu">GetChildren</span>(span);</span>
<span id="cb14-16"><a href="#cb14-16"></a>    </span>
<span id="cb14-17"><a href="#cb14-17"></a>    <span class="kw">for</span> (<span class="dt">var</span> i = <span class="dv">0</span>; i &lt; span.<span class="fu">Length</span>; i++)</span>
<span id="cb14-18"><a href="#cb14-18"></a>    {</span>
<span id="cb14-19"><a href="#cb14-19"></a>        span[i] = <span class="fu">transformer</span>(span[i]);</span>
<span id="cb14-20"><a href="#cb14-20"></a>    }</span>
<span id="cb14-21"><a href="#cb14-21"></a></span>
<span id="cb14-22"><a href="#cb14-22"></a>    <span class="dt">var</span> result = value.<span class="fu">SetChildren</span>(newChildren);</span>
<span id="cb14-23"><a href="#cb14-23"></a></span>
<span id="cb14-24"><a href="#cb14-24"></a>    <span class="kw">if</span> (count &gt; <span class="dv">4</span>)</span>
<span id="cb14-25"><a href="#cb14-25"></a>    {</span>
<span id="cb14-26"><a href="#cb14-26"></a>        chunks.<span class="fu">Free</span>(span);</span>
<span id="cb14-27"><a href="#cb14-27"></a>    }</span>
<span id="cb14-28"><a href="#cb14-28"></a>    <span class="kw">return</span> result;</span>
<span id="cb14-29"><a href="#cb14-29"></a>}</span></code></pre></div>
<p>Sadly this doesn’t work. The compiler complains about the <code>stackalloc T</code> line: “Cannot take the address of, get the size of, or declare a pointer to a managed type (‘T’)”. Basically, the CLR doesn’t support <code>stackalloc</code> with reference types — you can only use <code>stackalloc</code> with primitives or structs containing primitives. (A type parameter <code>T</code> <em>might</em> be a reference type, so you still can’t use it with <code>stackalloc</code>.) Under the hood, <code>stackalloc</code> is untyped; the garbage collector doesn’t know how to follow pointers that are stored in <code>stackalloc</code>ed memory because it doesn’t even know there are pointers there.</p>
<p>I still think the idea’s a good one, though. Can we unsafely hack it up?</p>
<p>I’m going to use the following <code>struct</code> as a “poor man’s <code>stackalloc[4]</code>”:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb15-1"><a href="#cb15-1"></a><span class="kw">struct</span> Four&lt;T&gt;</span>
<span id="cb15-2"><a href="#cb15-2"></a>{</span>
<span id="cb15-3"><a href="#cb15-3"></a>    <span class="kw">public</span> T First;</span>
<span id="cb15-4"><a href="#cb15-4"></a>    <span class="kw">public</span> T Second;</span>
<span id="cb15-5"><a href="#cb15-5"></a>    <span class="kw">public</span> T Third;</span>
<span id="cb15-6"><a href="#cb15-6"></a>    <span class="kw">public</span> T Fourth;</span>
<span id="cb15-7"><a href="#cb15-7"></a>}</span></code></pre></div>
<p>A variable of type <code>Four&lt;T&gt;</code> has enough room for four <code>T</code>s — so when the variable is a local variable (in an ordinary method) it’s functionally equivalent to a <code>stackalloc T[4]</code>. We won’t be using the <code>First</code>, <code>Second</code>, <code>Third</code> and <code>Fourth</code> properties directly — we’ll be (unsafely) addressing them relative to the start of the struct. In this example I’m using <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe?view=netcore-3.0"><code>System.Runtime.CompilerServices.Unsafe</code></a> to address <code>Third</code> by looking 2 elements beyond <code>First</code>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb16-1"><a href="#cb16-1"></a><span class="dt">var</span> four = <span class="kw">new</span> Four&lt;T&gt;();</span>
<span id="cb16-2"><a href="#cb16-2"></a><span class="kw">ref</span> T third = <span class="kw">ref</span> Unsafe.<span class="fu">Add</span>(<span class="kw">ref</span> four.<span class="fu">First</span>, <span class="dv">2</span>);</span>
<span id="cb16-3"><a href="#cb16-3"></a>Assert.<span class="fu">True</span>(Unsafe.<span class="fu">AreSame</span>(<span class="kw">ref</span> four.<span class="fu">Third</span>, <span class="kw">ref</span> third));</span></code></pre></div>
<p>The plan is to create a <code>Span</code> whose pointer refers to the start of a <code>Four&lt;T&gt;</code> on the stack. <code>span[0]</code> will address <code>four.First</code>, <code>span[1]</code> will address <code>Second</code>, and so on. My first idea to implement this was to use <code>System.Runtime.CompilerServices.Unsafe</code> to coerce a <code>ref Four&lt;T&gt;</code> to an unmanaged pointer, and then put that in a <code>Span</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb17-1"><a href="#cb17-1"></a><span class="kw">unsafe</span></span>
<span id="cb17-2"><a href="#cb17-2"></a>{</span>
<span id="cb17-3"><a href="#cb17-3"></a>    <span class="dt">var</span> four = <span class="kw">new</span> Four&lt;T&gt;();</span>
<span id="cb17-4"><a href="#cb17-4"></a>    <span class="dt">void</span>* ptr = Unsafe.<span class="fu">AsPointer</span>(<span class="kw">ref</span> four);</span>
<span id="cb17-5"><a href="#cb17-5"></a>    <span class="dt">var</span> span = <span class="kw">new</span> Span&lt;T&gt;(ptr, <span class="dv">4</span>);</span>
<span id="cb17-6"><a href="#cb17-6"></a>}</span></code></pre></div>
<p>Sadly the <code>Span</code> constructor throws an exception when <code>T</code> is a reference type. At this point I went for a poke around in the .NET source code. I wanted to know how <code>array.AsSpan()</code> works. I found <a href="https://github.com/dotnet/corefx/blob/7e9a177824cbefaee8985a9b517ebb0ea2e17a81/src/Common/src/CoreLib/System/Span.Fast.cs#L123">an internal constructor</a> which takes a <code>ref T</code>. We can illictly call that constructor using reflection, although of course we want to avoid the performance costs of reflection. So the actual plan is to use runtime code generation to call the internal <code>Span</code> constructor. Ordinarily I’d use <code>Expression</code> to do this runtime code generation, but <code>Expression</code> doesn’t support <code>ref</code> parameters, so we have to write the IL by hand.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb18-1"><a href="#cb18-1"></a><span class="kw">private</span> <span class="kw">static</span> <span class="kw">class</span> SpanFactory&lt;T&gt;</span>
<span id="cb18-2"><a href="#cb18-2"></a>{</span>
<span id="cb18-3"><a href="#cb18-3"></a>    <span class="kw">private</span> <span class="kw">delegate</span> Span&lt;T&gt; <span class="fu">SpanCtor</span>(<span class="kw">ref</span> T value, <span class="dt">int</span> length);</span>
<span id="cb18-4"><a href="#cb18-4"></a>    <span class="kw">private</span> <span class="kw">static</span> <span class="kw">readonly</span> SpanCtor _spanCtor;</span>
<span id="cb18-5"><a href="#cb18-5"></a></span>
<span id="cb18-6"><a href="#cb18-6"></a>    <span class="kw">static</span> <span class="fu">SpanFactory</span>()</span>
<span id="cb18-7"><a href="#cb18-7"></a>    {</span>
<span id="cb18-8"><a href="#cb18-8"></a>        <span class="dt">var</span> ctor = <span class="kw">typeof</span>(Span&lt;T&gt;)</span>
<span id="cb18-9"><a href="#cb18-9"></a>            .<span class="fu">GetConstructors</span>(BindingFlags.<span class="fu">NonPublic</span> | BindingFlags.<span class="fu">Instance</span>)</span>
<span id="cb18-10"><a href="#cb18-10"></a>            .<span class="fu">Single</span>(c =&gt;</span>
<span id="cb18-11"><a href="#cb18-11"></a>                c.<span class="fu">GetParameters</span>().<span class="fu">Length</span> == <span class="dv">2</span></span>
<span id="cb18-12"><a href="#cb18-12"></a>                &amp;&amp; c.<span class="fu">GetParameters</span>()[<span class="dv">0</span>].<span class="fu">ParameterType</span>.<span class="fu">IsByRef</span></span>
<span id="cb18-13"><a href="#cb18-13"></a>            );</span>
<span id="cb18-14"><a href="#cb18-14"></a></span>
<span id="cb18-15"><a href="#cb18-15"></a>        <span class="dt">var</span> method = <span class="kw">new</span> <span class="fu">DynamicMethod</span>(</span>
<span id="cb18-16"><a href="#cb18-16"></a>            <span class="st">&quot;&quot;</span>,</span>
<span id="cb18-17"><a href="#cb18-17"></a>            <span class="kw">typeof</span>(Span&lt;T&gt;),</span>
<span id="cb18-18"><a href="#cb18-18"></a>            <span class="kw">new</span>[] { <span class="kw">typeof</span>(T).<span class="fu">MakeByRefType</span>(), <span class="kw">typeof</span>(<span class="dt">int</span>) }</span>
<span id="cb18-19"><a href="#cb18-19"></a>        );</span>
<span id="cb18-20"><a href="#cb18-20"></a></span>
<span id="cb18-21"><a href="#cb18-21"></a>        <span class="dt">var</span> il = method.<span class="fu">GetILGenerator</span>();</span>
<span id="cb18-22"><a href="#cb18-22"></a>        il.<span class="fu">Emit</span>(OpCodes.<span class="fu">Ldarg_0</span>);</span>
<span id="cb18-23"><a href="#cb18-23"></a>        il.<span class="fu">Emit</span>(OpCodes.<span class="fu">Ldarg_1</span>);</span>
<span id="cb18-24"><a href="#cb18-24"></a>        il.<span class="fu">Emit</span>(OpCodes.<span class="fu">Newobj</span>, ctor);</span>
<span id="cb18-25"><a href="#cb18-25"></a>        il.<span class="fu">Emit</span>(OpCodes.<span class="fu">Ret</span>);</span>
<span id="cb18-26"><a href="#cb18-26"></a></span>
<span id="cb18-27"><a href="#cb18-27"></a>        _spanCtor = (SpanCtor)method.<span class="fu">CreateDelegate</span>(<span class="kw">typeof</span>(SpanCtor));</span>
<span id="cb18-28"><a href="#cb18-28"></a>    }</span>
<span id="cb18-29"><a href="#cb18-29"></a></span>
<span id="cb18-30"><a href="#cb18-30"></a>    [<span class="fu">MethodImpl</span>(MethodImplOptions.<span class="fu">AggressiveInlining</span>)]</span>
<span id="cb18-31"><a href="#cb18-31"></a>    <span class="kw">public</span> <span class="kw">static</span> Span&lt;T&gt; <span class="fu">Create</span>(<span class="kw">ref</span> T value, <span class="dt">int</span> length)</span>
<span id="cb18-32"><a href="#cb18-32"></a>        =&gt; <span class="fu">_spanCtor</span>(<span class="kw">ref</span> value, length);</span>
<span id="cb18-33"><a href="#cb18-33"></a>}</span></code></pre></div>
<p>Obviously relying on BCL internals like this is risky. The internal constructor could be removed, or changed to work differently, in which case my code could stop working or even segfault. That said, I think the likelihood of the internal constructor changing is quite low in this case.</p>
<blockquote>
<p><strong>Update</strong>: On .NET Core, there is an officially-supported API to do this: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.createspan?view=netcore-3.0"><code>MemoryMarshal.CreateSpan</code></a>. I didn’t know it existed at the time that I wrote this.</p>
</blockquote>
<p>There are also risks associated with mixing pointers and references like this. You have to be very careful that the <code>Span</code> doesn’t live longer than the <code>Four</code> it points to. That means the <code>Four</code> has to be discarded at the end of the method along with the <code>Span</code>, and it has to be stored in a “real” local variable, not in temporary storage on the evaluation stack. I’ll address that by mentioning the variable (as a parameter to a non-inlined “keep-alive” method) at the end of the method.</p>
<p>You also need to be certain that the <code>Four</code> is stored on the stack and not the heap. Data stored on the heap is liable to get moved by the garbage collector, which would invalidate the pointer inside the <code>Span</code>. Beware that local variables are not always safe from being moved! Methods containing <code>await</code>s, <code>yield</code>s, and lambdas are liable to store their local variables on the heap, so if <code>RewriteChildrenInternal</code> were not an ordinary method this hack would not be safe.</p>
<p>Here’s the final implementation of <code>RewriteChildrenInternal</code>. <code>var four = new Four&lt;T&gt;();</code> allocates space for four <code>T</code>s in <code>RewriteChildrenInternal</code>’s stack frame. Then, when I call <code>GetSpan</code>, I’m passing in the address of the start of that <code>Four</code> using the <code>ref</code> keyword. <code>GetSpan</code> returns a <code>Span</code> which either points at the start of <code>four</code> or at a chunk taken from the <code>ChunkStack</code>, depending on how many children we need to store. <code>ReleaseSpan</code> returns the <code>Span</code> to the <code>ChunkStack</code> if it came from there, and the <code>KeepAlive</code> call ensures the <code>four</code> isn’t deallocated too early.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb19-1"><a href="#cb19-1"></a><span class="kw">private</span> <span class="kw">static</span> T RewriteChildrenInternal&lt;T&gt;(</span>
<span id="cb19-2"><a href="#cb19-2"></a>    <span class="kw">this</span> T value,</span>
<span id="cb19-3"><a href="#cb19-3"></a>    Func&lt;T, T&gt; transformer,</span>
<span id="cb19-4"><a href="#cb19-4"></a>    ChunkStack&lt;T&gt; chunks</span>
<span id="cb19-5"><a href="#cb19-5"></a>) where T : IRewritable&lt;T&gt;</span>
<span id="cb19-6"><a href="#cb19-6"></a>{</span>
<span id="cb19-7"><a href="#cb19-7"></a>    <span class="dt">var</span> count = value.<span class="fu">CountChildren</span>();</span>
<span id="cb19-8"><a href="#cb19-8"></a></span>
<span id="cb19-9"><a href="#cb19-9"></a>    <span class="dt">var</span> four = <span class="kw">new</span> Four&lt;T&gt;();</span>
<span id="cb19-10"><a href="#cb19-10"></a>    <span class="dt">var</span> span = <span class="fu">GetSpan</span>(count, chunks, <span class="kw">ref</span> four);</span>
<span id="cb19-11"><a href="#cb19-11"></a></span>
<span id="cb19-12"><a href="#cb19-12"></a>    value.<span class="fu">GetChildren</span>(span);</span>
<span id="cb19-13"><a href="#cb19-13"></a>    </span>
<span id="cb19-14"><a href="#cb19-14"></a>    <span class="kw">for</span> (<span class="dt">var</span> i = <span class="dv">0</span>; i &lt; span.<span class="fu">Length</span>; i++)</span>
<span id="cb19-15"><a href="#cb19-15"></a>    {</span>
<span id="cb19-16"><a href="#cb19-16"></a>        span[i] = <span class="fu">transformer</span>(span[i]);</span>
<span id="cb19-17"><a href="#cb19-17"></a>    }</span>
<span id="cb19-18"><a href="#cb19-18"></a></span>
<span id="cb19-19"><a href="#cb19-19"></a>    <span class="dt">var</span> result = value.<span class="fu">SetChildren</span>(newChildren);</span>
<span id="cb19-20"><a href="#cb19-20"></a></span>
<span id="cb19-21"><a href="#cb19-21"></a>    <span class="fu">ReleaseSpan</span>(span, chunks);</span>
<span id="cb19-22"><a href="#cb19-22"></a>    <span class="fu">KeepAlive</span>(<span class="kw">ref</span> four);</span>
<span id="cb19-23"><a href="#cb19-23"></a>    <span class="kw">return</span> result;</span>
<span id="cb19-24"><a href="#cb19-24"></a>}</span>
<span id="cb19-25"><a href="#cb19-25"></a><span class="kw">private</span> <span class="kw">static</span> Span&lt;T&gt; GetSpan&lt;T&gt;(<span class="dt">int</span> count, ChunkStack&lt;T&gt; chunks, <span class="kw">ref</span> Four&lt;T&gt; four)</span>
<span id="cb19-26"><a href="#cb19-26"></a>{</span>
<span id="cb19-27"><a href="#cb19-27"></a>    <span class="kw">if</span> (count == <span class="dv">0</span>)</span>
<span id="cb19-28"><a href="#cb19-28"></a>    {</span>
<span id="cb19-29"><a href="#cb19-29"></a>        <span class="kw">return</span> <span class="kw">new</span> Span&lt;T&gt;();</span>
<span id="cb19-30"><a href="#cb19-30"></a>    }</span>
<span id="cb19-31"><a href="#cb19-31"></a>    <span class="kw">else</span> <span class="kw">if</span> (count &lt;= <span class="dv">4</span>)</span>
<span id="cb19-32"><a href="#cb19-32"></a>    {</span>
<span id="cb19-33"><a href="#cb19-33"></a>        <span class="kw">return</span> SpanFactory&lt;T&gt;.<span class="fu">Create</span>(<span class="kw">ref</span> four.<span class="fu">First</span>, count);</span>
<span id="cb19-34"><a href="#cb19-34"></a>    }</span>
<span id="cb19-35"><a href="#cb19-35"></a>    <span class="kw">else</span></span>
<span id="cb19-36"><a href="#cb19-36"></a>    {</span>
<span id="cb19-37"><a href="#cb19-37"></a>        <span class="kw">return</span> chunks.<span class="fu">Allocate</span>(count);</span>
<span id="cb19-38"><a href="#cb19-38"></a>    }</span>
<span id="cb19-39"><a href="#cb19-39"></a>}</span>
<span id="cb19-40"><a href="#cb19-40"></a><span class="kw">private</span> <span class="kw">static</span> <span class="dt">void</span> ReleaseSpan&lt;T&gt;(Span&lt;T&gt; span, ChunkStack&lt;T&gt; chunks)</span>
<span id="cb19-41"><a href="#cb19-41"></a>{</span>
<span id="cb19-42"><a href="#cb19-42"></a>    <span class="kw">if</span> (span.<span class="fu">Length</span> &gt; <span class="dv">4</span>)</span>
<span id="cb19-43"><a href="#cb19-43"></a>    {</span>
<span id="cb19-44"><a href="#cb19-44"></a>        chunks.<span class="fu">Free</span>(span);</span>
<span id="cb19-45"><a href="#cb19-45"></a>    }</span>
<span id="cb19-46"><a href="#cb19-46"></a>}</span>
<span id="cb19-47"><a href="#cb19-47"></a>[<span class="fu">MethodImpl</span>(MethodImplOptions.<span class="fu">NoInlining</span>)]</span>
<span id="cb19-48"><a href="#cb19-48"></a><span class="kw">private</span> <span class="kw">static</span> <span class="dt">void</span> KeepAlive&lt;T&gt;(<span class="kw">ref</span> Four&lt;T&gt; four)</span>
<span id="cb19-49"><a href="#cb19-49"></a>{</span>
<span id="cb19-50"><a href="#cb19-50"></a>}</span></code></pre></div>
<p>As far as I know, the designers of <code>Span</code> were thinking primarily about applications such as serialisation and parsing — the sort of low-level code you’d find in a <a href="https://github.com/aspnet/AspNetCore">high performance web server</a>. But <code>Span</code> also really shines in this high-level library of recursion patterns. Its guarantees about storage proved crucial to the safety of my <code>IRewritable</code> abstraction, but I’m also leaning on its flexibility to implement that abstraction as efficiently as possible.</p>
<p>Sawmill version 3.0 is now available <a href="https://www.nuget.org/packages/Sawmill">on Nuget</a>, and you can read all of this code in <a href="https://github.com/benjamin-hodgson/Sawmill">the GitHub repo</a>.</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on October  4, 2019</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/live/comments/2019-10-05-rewriting-irewritable/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Announcing Pidgin v2.0</title>
    <link href="http://www.benjamin.pizza/posts/2019-01-26-announcing-pidgin-v2.0.html" />
    <id>http://www.benjamin.pizza/posts/2019-01-26-announcing-pidgin-v2.0.html</id>
    <published>2019-01-26T00:00:00Z</published>
    <updated>2019-01-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 26, 2019
    
</div>

<p>Happy birthday to me! I’m pleased to announce that version 2.0 of my functional parsing library, <a href="https://github.com/benjamin-hodgson/Pidgin">Pidgin</a>, is now available <a href="https://www.nuget.org/packages/Pidgin">on Nuget</a>. In this release I’ve focused on error messages, performance, and <code>Span</code> support.</p>
<h2 id="parser-combinators">Parser Combinators</h2>
<p>I haven’t written about Pidgin before, so allow me to briefly introduce it. Pidgin is a <a href="https://en.wikipedia.org/wiki/Parser_combinator"><em>parser combinator</em></a> library, meaning that it consists of three main concepts:</p>
<ul>
<li>A type <code>Parser</code> which models a <em>parsing process</em></li>
<li>A collection of <em>primitive</em> <code>Parser</code> objects which perform some simple individual parsing task</li>
<li>A collection of <em>combinator</em> functions which can build complex <code>Parser</code>s out of simpler ones</li>
</ul>
<p>Taken together, we have an object model allowing you to write code resembling a high-level description of a parsing process. As a brief taste, here is a simple example parser which parses an identifier in a typical programming language.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1"></a>Parser&lt;<span class="dt">char</span>, <span class="dt">string</span>&gt; Identifier =</span>
<span id="cb1-2"><a href="#cb1-2"></a>    Letter.<span class="fu">Then</span>(</span>
<span id="cb1-3"><a href="#cb1-3"></a>        LetterOrDigit.<span class="fu">ManyString</span>(),</span>
<span id="cb1-4"><a href="#cb1-4"></a>        (first, rest) =&gt; first + rest</span>
<span id="cb1-5"><a href="#cb1-5"></a>    );</span>
<span id="cb1-6"><a href="#cb1-6"></a></span>
<span id="cb1-7"><a href="#cb1-7"></a>Assert.<span class="fu">Equal</span>(<span class="st">&quot;abc1&quot;</span>, Identifier.<span class="fu">ParseOrThrow</span>(<span class="st">&quot;abc1&quot;</span>));</span></code></pre></div>
<ul>
<li><code>Identifier</code> is a <code>Parser&lt;char, string&gt;</code>, meaning it’s a process which consumes a sequence of <code>char</code>s and produces a <code>string</code>.</li>
<li><code>Letter</code> is a primitive parser which consumes and returns a single character from the input stream, moving it on to the next character. (If the character is not a letter, the parser fails and doesn’t change the state of the input stream.)</li>
<li><code>LetterOrDigit</code> is like <code>Letter</code> but for alphanumeric characters.</li>
<li><code>ManyString</code> is a combinator method which runs a parser in a loop until it fails. It takes all of the smaller parser’s results from the loop and packs them into a <code>string</code>. So <code>LetterOrDigit.ManyString()</code> is a parser which consumes and returns a sequence of alphanumeric characters.</li>
<li><code>Then</code> is another combinator which runs two parsers in sequence and applies a function to the result. So, reading the parser as a whole, we can see that an <code>Identifier</code> consists of a single letter followed by a sequence of letters or digits.</li>
</ul>
<p>Parser combinators’ power comes from their composability. The library comprises a small number of building blocks, which you can put together in rich and varied ways to build a parser which does what you need. The library’s level of abstraction is a good fit for small-to-medium sized parsing tasks: it’s not as high-level as a full-blown parser generator like Antlr, but it’s much simpler to integrate. Rewriting our hand-written <a href="https://www.benjamin.pizza/posts/2017-11-13-recursion-without-recursion.html">JQL</a> parser in Pidgin took around four times less code.</p>
<p>That’s the overview — I won’t dive into a full tutorial on parser combinators because there are already <a href="http://www.lihaoyi.com/post/EasyParsingwithParserCombinators.html">plenty</a> <a href="http://webdoc.sub.gwdg.de/ebook/serien/ah/UU-CS/2008-044.pdf">of</a> <a href="https://news.ycombinator.com/item?id=14600079">those</a> a mere Google away.</p>
<h3 id="how-it-works">How it works</h3>
<p>Pidgin’s <code>Parser&lt;TToken, T&gt;</code> type represents a process which pulls <code>TToken</code>s one at a time from a (stateful) input stream, and either successfully returns a <code>T</code> or fails with an error message.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">public</span> <span class="kw">abstract</span> <span class="kw">class</span> Parser&lt;TToken, T&gt;</span>
<span id="cb2-2"><a href="#cb2-2"></a>{</span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="kw">internal</span> <span class="kw">abstract</span> Result&lt;T&gt; <span class="fu">Parse</span>(IParseState&lt;TToken&gt; input);</span>
<span id="cb2-4"><a href="#cb2-4"></a>}</span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="kw">internal</span> <span class="kw">interface</span> IParseState&lt;TToken&gt;</span>
<span id="cb2-6"><a href="#cb2-6"></a>{</span>
<span id="cb2-7"><a href="#cb2-7"></a>    TToken? <span class="fu">Peek</span>();  <span class="co">// null if at end of file</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>    <span class="dt">void</span> <span class="fu">Advance</span>();</span>
<span id="cb2-9"><a href="#cb2-9"></a></span>
<span id="cb2-10"><a href="#cb2-10"></a>    <span class="co">// ... plus a few methods to facilitate backtracking etc</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>}</span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="kw">internal</span> <span class="kw">struct</span> Result&lt;T&gt;</span>
<span id="cb2-13"><a href="#cb2-13"></a>{</span>
<span id="cb2-14"><a href="#cb2-14"></a>    <span class="co">// if Success is true, Value contains the parsed value and Error is null</span></span>
<span id="cb2-15"><a href="#cb2-15"></a>    <span class="co">// if Success is false, Value is null and Error contains error info</span></span>
<span id="cb2-16"><a href="#cb2-16"></a>    <span class="kw">public</span> <span class="dt">bool</span> Success { <span class="kw">get</span>; }</span>
<span id="cb2-17"><a href="#cb2-17"></a>    <span class="kw">public</span> T Value { <span class="kw">get</span>; }</span>
<span id="cb2-18"><a href="#cb2-18"></a>    <span class="kw">public</span> ParseError Error { <span class="kw">get</span>; }</span>
<span id="cb2-19"><a href="#cb2-19"></a>}</span></code></pre></div>
<p><code>IParseState</code> represents an iterator over the parser’s input (a sequence of <code>TToken</code>s). <code>Peek</code> returns the token at the current location in the input (or <code>null</code> if the parser has reached the end of the input) and <code>Advance</code> moves the stream on to the next token.</p>
<p>Primitive parsers typically manipulate the <code>IParseState</code> directly. This parser matches a specific string:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">class</span> StringParser : Parser&lt;<span class="dt">char</span>, <span class="dt">string</span>&gt;</span>
<span id="cb3-2"><a href="#cb3-2"></a>{</span>
<span id="cb3-3"><a href="#cb3-3"></a>    <span class="kw">private</span> <span class="kw">readonly</span> <span class="dt">string</span> _expected;</span>
<span id="cb3-4"><a href="#cb3-4"></a></span>
<span id="cb3-5"><a href="#cb3-5"></a>    <span class="kw">internal</span> <span class="kw">override</span> Result&lt;<span class="dt">string</span>&gt; <span class="fu">Parse</span>(IParseState&lt;<span class="dt">char</span>&gt; input)</span>
<span id="cb3-6"><a href="#cb3-6"></a>    {</span>
<span id="cb3-7"><a href="#cb3-7"></a>        <span class="kw">foreach</span> (<span class="dt">var</span> c <span class="kw">in</span> _expected)</span>
<span id="cb3-8"><a href="#cb3-8"></a>        {</span>
<span id="cb3-9"><a href="#cb3-9"></a>            <span class="dt">var</span> token = input.<span class="fu">Peek</span>();</span>
<span id="cb3-10"><a href="#cb3-10"></a>            <span class="kw">if</span> (!token.<span class="fu">HasValue</span>)</span>
<span id="cb3-11"><a href="#cb3-11"></a>            {</span>
<span id="cb3-12"><a href="#cb3-12"></a>                <span class="kw">return</span> Result.<span class="fu">Error</span>(ParseError.<span class="fu">EndOfFile</span>);</span>
<span id="cb3-13"><a href="#cb3-13"></a>            }</span>
<span id="cb3-14"><a href="#cb3-14"></a>            <span class="kw">if</span> (token.<span class="fu">Value</span> != c)</span>
<span id="cb3-15"><a href="#cb3-15"></a>            {</span>
<span id="cb3-16"><a href="#cb3-16"></a>                <span class="kw">return</span> Result.<span class="fu">Error</span>(ParseError.<span class="fu">UnexpectedToken</span>);</span>
<span id="cb3-17"><a href="#cb3-17"></a>            }</span>
<span id="cb3-18"><a href="#cb3-18"></a>            input.<span class="fu">Advance</span>();</span>
<span id="cb3-19"><a href="#cb3-19"></a>        }</span>
<span id="cb3-20"><a href="#cb3-20"></a>        <span class="kw">return</span> Result.<span class="fu">Success</span>(_expected);</span>
<span id="cb3-21"><a href="#cb3-21"></a>    }</span>
<span id="cb3-22"><a href="#cb3-22"></a>}</span></code></pre></div>
<p>Higher-order parsers typically compose one or more smaller parsers, delegating to their <code>Parse</code> methods in some useful way. <code>Then</code> returns a parser which sequences two parsers and applies a mapping function to their results:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">class</span> ThenParser&lt;TToken, T, U, R&gt; : Parser&lt;TToken, R&gt;</span>
<span id="cb4-2"><a href="#cb4-2"></a>{</span>
<span id="cb4-3"><a href="#cb4-3"></a>    <span class="kw">private</span> <span class="kw">readonly</span> Parser&lt;TToken, T&gt; _first;</span>
<span id="cb4-4"><a href="#cb4-4"></a>    <span class="kw">private</span> <span class="kw">readonly</span> Parser&lt;TToken, U&gt; _second;</span>
<span id="cb4-5"><a href="#cb4-5"></a>    <span class="kw">private</span> <span class="kw">readonly</span> Func&lt;T, U, R&gt; _resultSelector;</span>
<span id="cb4-6"><a href="#cb4-6"></a></span>
<span id="cb4-7"><a href="#cb4-7"></a>    <span class="kw">internal</span> <span class="kw">override</span> Result&lt;R&gt; <span class="fu">Parse</span>(IParseState&lt;TToken&gt; input)</span>
<span id="cb4-8"><a href="#cb4-8"></a>    {</span>
<span id="cb4-9"><a href="#cb4-9"></a>        <span class="dt">var</span> result1 = _first.<span class="fu">Parse</span>(input);</span>
<span id="cb4-10"><a href="#cb4-10"></a>        <span class="kw">if</span> (!result1.<span class="fu">Success</span>)</span>
<span id="cb4-11"><a href="#cb4-11"></a>        {</span>
<span id="cb4-12"><a href="#cb4-12"></a>            <span class="kw">return</span> Result.<span class="fu">Error</span>(result1.<span class="fu">Error</span>);</span>
<span id="cb4-13"><a href="#cb4-13"></a>        }</span>
<span id="cb4-14"><a href="#cb4-14"></a>        <span class="dt">var</span> result2 = _second.<span class="fu">Parse</span>(input);</span>
<span id="cb4-15"><a href="#cb4-15"></a>        <span class="kw">if</span> (!result2.<span class="fu">Success</span>)</span>
<span id="cb4-16"><a href="#cb4-16"></a>        {</span>
<span id="cb4-17"><a href="#cb4-17"></a>            <span class="kw">return</span> Result.<span class="fu">Error</span>(result2.<span class="fu">Error</span>);</span>
<span id="cb4-18"><a href="#cb4-18"></a>        }</span>
<span id="cb4-19"><a href="#cb4-19"></a>        <span class="kw">return</span> Result.<span class="fu">Success</span>(_<span class="fu">resultSelector</span>(result1.<span class="fu">Value</span>, result2.<span class="fu">Value</span>));</span>
<span id="cb4-20"><a href="#cb4-20"></a>    }</span>
<span id="cb4-21"><a href="#cb4-21"></a>}</span></code></pre></div>
<h2 id="error-messages">Error messages</h2>
<p>Part of Pidgin’s job is to report when you gave a parser bad input. For example, the top level of a C# file must contain <code>class</code>es and <code>namespace</code>s, so feeding a C# parser the text <code>Console.WriteLine("foo");</code> (without an enclosing <code>class</code>) should fail with some information about the problem:</p>
<pre><code>Parse error.
    unexpected &#39;C&#39;
    expected &quot;class&quot; or &quot;namespace&quot;
    at line 1, col 1</code></pre>
<p>A mistake I made early on in Pidgin’s development nearly two years ago(!) was trying to pre-compute the content of these error messages. Under the assumption that parsers are typically built once and then run repeatedly, I wrote some code to examine your parser upon construction and try to predict the ways it could fail on unexpected input, in order to avoid constructing error messages at runtime. This code calculated a set of “expected” input strings, accounting for <code>Then</code>s and <code>Or</code>s by concatenating the strings in the set and by unioning the sets respectively. (The idea was that a parser like <code>Keyword("public").Optional().Then(Keyword("class"))</code> would report that it expected <code>"class" or "public class"</code>.)</p>
<p>This went catastrophically wrong for complex parsers. Here’s a sketch of some code which parses left-associative mathematical operators with precedence, so <code>3^2 + 4 * 3^5 * 5</code> is parsed as <code>(3^2) + ((4 * (3^5)) * 5)</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1"></a><span class="dt">var</span> topPrecedence = Number.<span class="fu">Then</span>(<span class="fu">Char</span>(<span class="ch">&#39;^&#39;</span>).<span class="fu">Then</span>(Number).<span class="fu">Many</span>());</span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="dt">var</span> midPrecedence = topPrecedence.<span class="fu">Then</span>(<span class="fu">Char</span>(<span class="ch">&#39;*&#39;</span>).<span class="fu">Then</span>(topPrecedence).<span class="fu">Many</span>());</span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="dt">var</span> lowPrecedence = midPrecedence.<span class="fu">Then</span>(<span class="fu">Char</span>(<span class="ch">&#39;+&#39;</span>).<span class="fu">Then</span>(midPrecedence).<span class="fu">Many</span>());</span></code></pre></div>
<p><code>topPrecedence</code> expects a number, or a number followed by a sequence of exponents — two possibilities. <code>midPrecedence</code> therefore expects a number, or a number followed by a sequence of exponents, or a number followed by a sequence of multiplications, or a number followed by a sequence of exponents followed by a sequence of multiplications — four possibilities. <code>lowPrecedence</code> has eight possible expected inputs. The set of expected inputs blows up exponentially! Calculating the error messages in advance means you need to explore all of the (exponentially large number of) expected inputs in advance, which led to cosmologically long parser build times. And in any case, reporting a huge number of expected inputs does not make for a very good error message.</p>
<p>I made some attempts to optimise this by using more efficient data structures, but I realised this was a losing proposition and decided to throw it out altogether in v2.0. Error messages are now computed at runtime, when the error actually occurs. This means I can be more precise about what the parser was expecting at that particular point in the input: once a parsing process has committed to a branch I can report expected inputs <em>from that branch</em>, rather than reporting all possible expected inputs.</p>
<p>Implementing this efficiently was a challenge. Parse errors actually occur quite frequently in a parser combinator library, even in the happy path, because of the way the <em>prioritised choice</em> operator <code>Or</code> works — <code>String("foo").Or(String("bar"))</code> only tries <code>bar</code> if an attempt to parse <code>foo</code> failed. So I tried to implement this change without allocating heap memory every time a parser fails. When a parser fails, it saves its expected inputs in a stack implemented on top of pooled memory (using <code>ArrayPool</code>), which are then popped if the error gets discarded. (The way that certain parsers manipulate their children’s error messages adds some interesting complications here, which I’ve described in a <a href="https://github.com/benjamin-hodgson/Pidgin/blob/60c7734393719d11714158b201c99976ec48ffb9/Pidgin/ParseState.Error.cs#L36-L74">long comment</a>.)</p>
<h2 id="span"><code>Span</code></h2>
<blockquote>
<p><strong>Note</strong>: You can watch <a href="https://twitter.com/g3rv4">my esteemed colleague Gervasio</a> and me carrying out the work I describe here in <a href="https://www.youtube.com/watch?v=O23OLkQtiS4">a live-stream on YouTube</a>. It was pretty fun!</p>
</blockquote>
<p>I wanted to add support for parsing input stored in a <code>Span</code>. (<code>Span</code> is a new part of the BCL representing a reference to a contiguous block of memory such as a chunk of an array.) I already had functions which applied a <code>Parser</code> to a <code>string</code>, a <code>T[]</code>, a <code>Stream</code>, etc; I’d abstracted over these various input types using the aforementioned <code>IParseState</code> interface.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">internal</span> <span class="kw">interface</span> IParseState&lt;TToken&gt;</span>
<span id="cb7-2"><a href="#cb7-2"></a>{</span>
<span id="cb7-3"><a href="#cb7-3"></a>    TToken? <span class="fu">Peek</span>();</span>
<span id="cb7-4"><a href="#cb7-4"></a>    <span class="dt">void</span> <span class="fu">Advance</span>();</span>
<span id="cb7-5"><a href="#cb7-5"></a>}</span></code></pre></div>
<p>So adding <code>Span</code> support basically means implementing <code>IParseState</code> on top of a <code>Span</code>. In theory this should be quite straightforward — a class which has a <code>Span</code> and keeps track of its current position:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">class</span> SpanTokenStream&lt;TToken&gt; : ITokenStream&lt;TToken&gt;</span>
<span id="cb8-2"><a href="#cb8-2"></a>{</span>
<span id="cb8-3"><a href="#cb8-3"></a>    <span class="kw">private</span> <span class="kw">readonly</span> Span&lt;TToken&gt; _span;</span>
<span id="cb8-4"><a href="#cb8-4"></a>    <span class="kw">private</span> <span class="dt">int</span> _current;</span>
<span id="cb8-5"><a href="#cb8-5"></a></span>
<span id="cb8-6"><a href="#cb8-6"></a>    TToken? <span class="fu">Peek</span>() =&gt; _current &gt;= _span.<span class="fu">Length</span> ? <span class="kw">null</span> : _span[_current];</span>
<span id="cb8-7"><a href="#cb8-7"></a>    </span>
<span id="cb8-8"><a href="#cb8-8"></a>    <span class="dt">void</span> <span class="fu">Advance</span>()</span>
<span id="cb8-9"><a href="#cb8-9"></a>    {</span>
<span id="cb8-10"><a href="#cb8-10"></a>        _current++;</span>
<span id="cb8-11"><a href="#cb8-11"></a>    }</span>
<span id="cb8-12"><a href="#cb8-12"></a>}</span></code></pre></div>
<p>But if you try and write this class, you’ll find that the compiler turns you away. <code>Span</code> is a <code>ref struct</code>, which means that it can only be stored on the stack. You can’t use a <code>Span</code> as a field of a <code>class</code>, or put it in an array, or box it (by upcasting it to an <code>interface</code> or <code>object</code>), or use it as a local variable in an <code>async</code> or <code>yield</code> method (because behind the scenes such methods copy their stack frame to the heap). (There are good reasons for this restriction, pertaining to memory safety.)</p>
<p>How to implement <code>IParseState</code> without storing a <code>Span</code> on the heap? Because <code>IParseState</code> is an internal interface, I can make certain guarantees about its usage. Instances of <code>IParseState</code> have a limited life-span — each <code>IParseState</code> instance becomes garbage before the call to <code>Parse</code> returns, and <code>IParseState</code> instances are never accessed from multiple threads. So I can store the <code>Span</code> in <code>Parse</code>’s stack frame and put a pointer to that stack frame in the <code>IParseState</code>.</p>
<p>This idea is complicated by the fact that <code>Span</code> is a <a href="https://stackoverflow.com/questions/42154908">managed type</a>, so you’re not allowed to declare a <code>Span&lt;T&gt;*</code>. (This restriction ensures that a managed object can’t accidentally become garbage while it’s still being referred to by an unmanaged pointer; this needn’t trouble us here as the <code>Span</code> is guaranteed to be reachable because it’s on the stack.)</p>
<p>Fortunately, <a href="https://www.nuget.org/packages/System.Runtime.CompilerServices.Unsafe/">the <code>System.Runtime.CompilerServices.Unsafe</code> package</a> contains some dangerous tools to get around this memory safety restriction: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.aspointer"><code>Unsafe.AsPointer</code></a> coerces a <code>ref</code> to an untyped <code>void*</code> and <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.asref"><code>Unsafe.AsRef</code></a> coerces it back. So my plan was to store a <code>ref Span&lt;T&gt;</code> as a <code>void*</code> on the heap, and coerce it back to a <code>ref Span&lt;T&gt;</code> using when I need to address it as a <code>Span</code>. (This is a similar hack to one that I used in <a href="/posts/2018-03-16-eighty.html">my HTML generation library</a>.)</p>
<p>Unfortunately this doesn’t work either, because <code>Unsafe.AsPointer</code> is generic and you can’t use a <code>ref struct</code> as a type parameter! The compiler can’t be sure that <code>Unsafe.AsPointer</code> doesn’t box its argument, which of course is forbidden when the argument is a <code>Span</code>.</p>
<p>I wound up implementing a type-specialised copy of those two <code>Unsafe</code> methods:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">static</span> <span class="kw">class</span> Unsafe</span>
<span id="cb9-2"><a href="#cb9-2"></a>{</span>
<span id="cb9-3"><a href="#cb9-3"></a>    <span class="kw">public</span> <span class="kw">static</span> <span class="dt">void</span>* AsPointer&lt;T&gt;(<span class="kw">ref</span> Span&lt;T&gt; span);</span>
<span id="cb9-4"><a href="#cb9-4"></a>    <span class="kw">public</span> <span class="kw">static</span> <span class="kw">ref</span> Span&lt;T&gt; <span class="fu">AsRef</span>(<span class="dt">void</span>* ptr);</span>
<span id="cb9-5"><a href="#cb9-5"></a>}</span></code></pre></div>
<p><code>AsPointer</code> and <code>AsRef</code> are not expressible in C# (even <code>unsafe</code> C#); <code>System.Runtime.CompilerServices.Unsafe</code> is implemented in raw IL. My copies of those methods have stubs in C# which are filled in by rewriting the DLL’s IL in a post-compile step.</p>
<h2 id="assorted-performance-improvements">Assorted Performance Improvements</h2>
<p>Performance has always been one of Pidgin’s priorities — I’m proud that Pidgin is C#’s fastest parser combinator library (that I know of!) — but there’s always room for improvement. In my tests Pidgin still runs somewhat slower than F#’s FParsec library, for example. In this release I made some architectural changes to <code>IParseState</code> to help close that gap.</p>
<h3 id="buffering-uniformly">Buffering Uniformly</h3>
<p>As I mentioned earlier, Pidgin has several internal implementations of <code>IParseState</code>, each of which implements a streaming abstraction on top of a different type of input. Parsers may need to <em>backtrack</em> on failure (using the <code>Try</code> combinator), so you can’t always discard a token as soon as you’ve seen it. Some <code>IParseState</code> implementations — specifically the ones that are built on top of streaming storage (like <code>Stream</code>) — therefore <em>buffer</em> their input into an array. The ones that are backed by in-memory storage like <code>string</code> don’t need to buffer because their data is already in memory.</p>
<p>I decided to move the buffering logic to a shared part of the code. Now <em>all</em> <code>IParseState</code> implementations buffer their input, even the in-memory ones. On its own this should make the code slower (it’s more expensive to copy a <code>string</code> into an array than not to!), but it enables all of the optimisations I’m about to describe.</p>
<h3 id="de-virtualisation-inlining">De-Virtualisation &amp; Inlining</h3>
<p>Virtual method calls are comparatively expensive in .NET, and they happen frequently in Pidgin’s implementation because of <code>IParseState</code>’s design: a parser which consumes <em>n</em> tokens makes a minimum of <em>n</em> virtual calls to <code>Advance</code>.</p>
<p>With the buffering code extracted into a single place, there was no longer any need to keep it behind an interface. I moved all the buffering and error handling code into a mutable struct which is stored on the stack and passed to the <code>Parser</code>s by reference. Now <code>Advance</code> and <code>Peek</code> are non-virtual.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">struct</span> ParseState&lt;TToken&gt;</span>
<span id="cb10-2"><a href="#cb10-2"></a>{</span>
<span id="cb10-3"><a href="#cb10-3"></a>    <span class="kw">private</span> TToken[] _buffer;</span>
<span id="cb10-4"><a href="#cb10-4"></a>    <span class="kw">private</span> <span class="dt">int</span> _currentPosition;</span>
<span id="cb10-5"><a href="#cb10-5"></a>    <span class="kw">private</span> ITokenStream&lt;TToken&gt; _stream;</span>
<span id="cb10-6"><a href="#cb10-6"></a></span>
<span id="cb10-7"><a href="#cb10-7"></a>    <span class="kw">public</span> TToken? <span class="fu">Peek</span>() =&gt;</span>
<span id="cb10-8"><a href="#cb10-8"></a>        _currentPosition &lt; <span class="dv">0</span> || _currentPosition &gt;= _buffer.<span class="fu">Length</span></span>
<span id="cb10-9"><a href="#cb10-9"></a>            ? <span class="kw">null</span></span>
<span id="cb10-10"><a href="#cb10-10"></a>            : _buffer[_currentPosition];</span>
<span id="cb10-11"><a href="#cb10-11"></a>    </span>
<span id="cb10-12"><a href="#cb10-12"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">Advance</span>()</span>
<span id="cb10-13"><a href="#cb10-13"></a>    {</span>
<span id="cb10-14"><a href="#cb10-14"></a>        _currentPosition++;</span>
<span id="cb10-15"><a href="#cb10-15"></a></span>
<span id="cb10-16"><a href="#cb10-16"></a>        <span class="kw">if</span> (_currentPosition &gt;= _buffer.<span class="fu">Length</span>)</span>
<span id="cb10-17"><a href="#cb10-17"></a>        {</span>
<span id="cb10-18"><a href="#cb10-18"></a>            <span class="fu">ReadStreamIntoBuffer</span>();</span>
<span id="cb10-19"><a href="#cb10-19"></a>        }</span>
<span id="cb10-20"><a href="#cb10-20"></a>    }</span>
<span id="cb10-21"><a href="#cb10-21"></a>}</span>
<span id="cb10-22"><a href="#cb10-22"></a></span>
<span id="cb10-23"><a href="#cb10-23"></a><span class="kw">public</span> <span class="kw">abstract</span> <span class="kw">class</span> Parser&lt;TToken, T&gt;</span>
<span id="cb10-24"><a href="#cb10-24"></a>{</span>
<span id="cb10-25"><a href="#cb10-25"></a>    <span class="kw">internal</span> <span class="kw">abstract</span> Result&lt;T&gt; <span class="fu">Parse</span>(<span class="kw">ref</span> ParseState&lt;TToken&gt; state);</span>
<span id="cb10-26"><a href="#cb10-26"></a>}</span></code></pre></div>
<p>That’s a fairly general C# performance trick: put shared state in a mutable struct, store it on the stack, and pass it around as a <code>ref</code> parameter. This both reduces GC pressure and improves the CPU cache’s hit rate, because the execution stack is likely to be in cache.</p>
<p>I also noticed that <code>Peek</code> was not <em>inlining</em> well. Inlining is an important optimisation carried out by the JIT compiler: if you call a method that’s short and simple enough, the compiler will just copy the method’s body into the current method instead of emitting code to call it. This can often enable further optimisations such as erasing array bounds checks.</p>
<p>I split <code>Peek</code> up into a pair of properties:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">struct</span> ParseState&lt;TToken&gt;</span>
<span id="cb11-2"><a href="#cb11-2"></a>{</span>
<span id="cb11-3"><a href="#cb11-3"></a>    <span class="kw">private</span> TToken[] _buffer;</span>
<span id="cb11-4"><a href="#cb11-4"></a>    <span class="kw">private</span> <span class="dt">int</span> _currentPosition;</span>
<span id="cb11-5"><a href="#cb11-5"></a></span>
<span id="cb11-6"><a href="#cb11-6"></a>    <span class="kw">public</span> <span class="dt">bool</span> HasCurrent =&gt; _currentPos &gt;= <span class="dv">0</span> &amp;&amp; _currentPos &lt; _buffer.<span class="fu">Length</span>;</span>
<span id="cb11-7"><a href="#cb11-7"></a>    <span class="kw">public</span> TToken Current =&gt; _buffer[_currentPosition];</span>
<span id="cb11-8"><a href="#cb11-8"></a>}</span></code></pre></div>
<p>These properties are short and non-virtual, so they are good inlining candidates. After inlining them, the JIT sees simple array-manipulating code, which it can easily optimise in the context of the containing method. This simple change resulted in a 15-20% performance improvement across the board.</p>
<h3 id="chunking">Chunking</h3>
<p>The <code>Stream</code> version of <code>Advance</code> called <code>stream.Read()</code>, which reads and returns a single byte from the stream. This is not as efficient as <code>stream.Read(byte[])</code>, which reads a chunk of bytes from the stream and copies them into an array. (The former requires <em>n</em> virtual method calls to read <em>n</em> bytes, whereas the latter requires only <em>n / <code>array.Length</code></em>.)</p>
<p>I replaced <code>ITokenStream</code>’s <code>Advance</code> and <code>Peek</code> methods with a method which reads a chunk of tokens into the <code>ParseState</code>’s buffer.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">interface</span> ITokenStream&lt;TToken&gt;</span>
<span id="cb12-2"><a href="#cb12-2"></a>{</span>
<span id="cb12-3"><a href="#cb12-3"></a>    <span class="dt">void</span> <span class="fu">ReadInto</span>(TToken[] buffer, <span class="dt">int</span> start, <span class="dt">int</span> count);</span>
<span id="cb12-4"><a href="#cb12-4"></a>}</span></code></pre></div>
<p>Why not design this signature as <code>void ReadInto(Span&lt;TToken&gt; span)</code>? I’d love to! Sadly that would preclude some implementations of <code>ITokenStream</code>. Methods like <code>stream.Read(Span&lt;byte&gt; span)</code> are available only on .NET Core, and as far as I’m aware Microsoft has no plans to backport them, so for compatibility with the desktop framework I’m stuck using arrays. This is irksome, as <a href="/posts/2018-12-06-zooming-in-on-field-accessors.html">I’ve said before</a> — what’s the point of designing a feature for library authors if you’re not going to support it properly?</p>
<p><code>ReadInto</code> allows the <code>ParseState</code> to fill its buffer in chunks. But <code>ParseState</code>’s interface can also be chunk-ified — some <code>Parser</code>s (like <code>String</code>) can predict how many characters they’ll pull from the input. I added a <code>Peek</code> method to <code>ParseState</code> which returns a view into the <code>ParseState</code>’s buffer. (This makes <code>Peek</code> a little tricky to use correctly — you have to be careful not to continue using the <code>Span</code> after a call to <code>Advance</code>, which may mutate the buffer.)</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb13-1"><a href="#cb13-1"></a><span class="kw">public</span> ReadOnlySpan&lt;TToken&gt; <span class="fu">Peek</span>(<span class="dt">int</span> count);</span></code></pre></div>
<p>Using <code>Peek</code>, a parser like <code>String("foo")</code> can now look at three characters from the input to see if they match <code>foo</code>, rather than one at a time.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">class</span> StringParser : Parser&lt;<span class="dt">char</span>, <span class="dt">string</span>&gt;</span>
<span id="cb14-2"><a href="#cb14-2"></a>{</span>
<span id="cb14-3"><a href="#cb14-3"></a>    <span class="kw">private</span> <span class="kw">readonly</span> <span class="dt">string</span> _expected;</span>
<span id="cb14-4"><a href="#cb14-4"></a>    <span class="kw">internal</span> <span class="kw">override</span> Result&lt;<span class="dt">string</span>&gt; <span class="fu">Parse</span>(<span class="kw">ref</span> ParseState&lt;<span class="dt">char</span>&gt; state)</span>
<span id="cb14-5"><a href="#cb14-5"></a>    {</span>
<span id="cb14-6"><a href="#cb14-6"></a>        <span class="dt">var</span> span = state.<span class="fu">Peek</span>(_expected.<span class="fu">Length</span>);</span>
<span id="cb14-7"><a href="#cb14-7"></a>        <span class="kw">if</span> (!_expected.<span class="fu">AsSpan</span>().<span class="fu">SequenceEqual</span>(span))</span>
<span id="cb14-8"><a href="#cb14-8"></a>        {</span>
<span id="cb14-9"><a href="#cb14-9"></a>            <span class="kw">return</span> Result.<span class="fu">Failure</span>();</span>
<span id="cb14-10"><a href="#cb14-10"></a>        }</span>
<span id="cb14-11"><a href="#cb14-11"></a>        <span class="kw">return</span> Result.<span class="fu">Success</span>(_expected);</span>
<span id="cb14-12"><a href="#cb14-12"></a>    }</span>
<span id="cb14-13"><a href="#cb14-13"></a>}</span></code></pre></div>
<p>This runs about 20% faster for long strings.</p>
<h2 id="make-your-own-opportunities">Make Your Own Opportunities</h2>
<p>Indulge me for a moment while I dispense some unsolicited career advice. For a long time, performance engineering was something that <a href="https://twitter.com/marcgravell/">other</a>, <a href="https://twitter.com/davidfowl">cleverer</a> <a href="https://mattwarren.org/">people</a> did while I observed from a distance with awe. Why is ASP.NET fast? Because the guys that wrote it are Actual Wizards.</p>
<p>I’ve been lucky enough to work with some of those clever people for a few years now, and actually they’re not Actual Wizards. They just have more experience than me — they know how to use and interpret profiles and benchmarks, they’ve seen enough to know what does and doesn’t work, and they’ve had practice coming up with ideas to improve performance.</p>
<p>The good news is that performance optimisation usually doesn’t involve fiddly low-level programming like this — simply being aware of when your code performs IO makes a big difference — and it’s never too early or late to start building your experience level, no matter where you are in your career. For me, that meant setting myself the goal of making my open source libraries as fast as I could. For you, it could mean picking a slow part of your codebase at work and trying to make it faster, or pair-programming with a colleague, or thoroughly reading through some unfamiliar code. Making your own opportunities to learn new things is the best way to get better.</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on January 26, 2019</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/live/comments/2019-01-26-announcing-pidgin-v2.0/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>The Fourth Type of Variance</title>
    <link href="http://www.benjamin.pizza/posts/2019-01-11-the-fourth-type-of-variance.html" />
    <id>http://www.benjamin.pizza/posts/2019-01-11-the-fourth-type-of-variance.html</id>
    <published>2019-01-11T00:00:00Z</published>
    <updated>2019-01-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 11, 2019
    
</div>

<p>Given a polymorphic type, like <code>List</code>, what can we say about the relationship between different usages of that type? If <code>A</code> and <code>B</code> are related, is <code>List[A]</code> related to <code>List[B]</code>? <em>Variance</em> is the word for this type of relationship, and it turns out there are a few different answers to that question, depending on the type you’re asking about.</p>
<h2 id="covariance">Covariance</h2>
<p>Probably the most familiar situation is when the parameterised types are related in the same way as the parameter. This is the type of variance exhibited by most “container” types, like <code>List</code>.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">sealed</span> <span class="kw">abstract</span> <span class="kw">class</span> List[+A]</span>
<span id="cb1-2"><a href="#cb1-2"></a></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">val</span> cats : List[Cat] = List(<span class="fu">Cat</span>(<span class="st">&quot;Tilly&quot;</span>), <span class="fu">Cat</span>(<span class="st">&quot;Charlie&quot;</span>), <span class="fu">Cat</span>(<span class="st">&quot;Izzy&quot;</span>))</span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="kw">val</span> animals : List[Animal] = cats</span></code></pre></div>
<p><code>List</code>’s parameter <code>A</code> is annotated with <code>+</code>, so it’ll be treated as covariant. This allows you to use a <code>List[Cat]</code> any time you need a <code>List[Animal]</code>. A list of <code>Cat</code>s is a list of <code>Animal</code>s, because every <code>Cat</code> is an <code>Animal</code>. The subtype relationship of the container goes in the same direction as the subtype relationship of the elements. (In C# <code>+</code> is pronounced <code>out</code>, as in <code>IEnumerable&lt;out T&gt;</code>.)</p>
<p>Variance is visible even in non-subtyping-based languages. Haskellers’ll be familiar with <em>covariant functors</em>. It’s the type of functor exhibited the the standard <code>Functor</code> class.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">class</span> <span class="dt">Functor</span> f <span class="kw">where</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="ot">    fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="kw">instance</span> <span class="dt">Functor</span> [] <span class="kw">where</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    <span class="fu">fmap</span> f xs <span class="ot">=</span> [f x <span class="op">|</span> x <span class="ot">&lt;-</span> xs]</span></code></pre></div>
<p>This chimes with the intuition that a functor <code>f</code> is a container of sorts. If you can write a function to convert each <code>a</code> in the container into a <code>b</code>, then <code>fmap</code> can convert a container of <code>a</code>s into a container of <code>b</code>s by converting each item in the container.</p>
<p>In general, a type is covariant if its parameter is used as an output. An object which produces <code>Cat</code>s can be used to produce <code>Animal</code>s. All you have to do is ignore the cattiness of the animals you get out of the producer.</p>
<h2 id="contravariance">Contravariance</h2>
<p><em>Contravariance</em>, covariance’s evil twin, is the word for when the parameterised types are related in the opposite way as the parameters. Scala’s <code>Ordering</code>, which determines which way round to put two objects (like C#’s <code>IComparer</code>), is an example of a contravariant type.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">trait</span> Ordering[-A] {</span>
<span id="cb3-2"><a href="#cb3-2"></a>    <span class="kw">def</span> <span class="fu">apply</span>(x : A, y : A) : Int</span>
<span id="cb3-3"><a href="#cb3-3"></a>}</span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="kw">val</span> animalOrdering : Ordering[Animal] = Ordering.<span class="fu">by</span>[Animal, Int](x =&gt; x.<span class="fu">cuteness</span>)</span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="kw">val</span> catOrdering : Ordering[Cat] = animalOrdering</span></code></pre></div>
<p>The <code>-</code> symbol denotes a contravariant parameter, allowing us to use an <code>Ordering[Animal]</code> as an <code>Ordering[Cat]</code>. (C#ers say <code>in</code>, as in <code>IComparer&lt;in T&gt;</code>.) If you know how to compare two <code>Animal</code>s (perhaps by comparing their cuteness), you can certainly compare two <code>Cat</code>s. The subtype relationship of the comparers goes in the opposite direction to that of the parameters.</p>
<p>The class of contravariant functors in Haskell is just like <code>Functor</code> but with the direction of one of the arrows flipped.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">class</span> <span class="dt">Contravariant</span> f <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="ot">    contramap ::</span> (b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb4-3"><a href="#cb4-3"></a></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">newtype</span> <span class="dt">Comparer</span> a <span class="ot">=</span> <span class="dt">Comparer</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Ord</span>)</span>
<span id="cb4-5"><a href="#cb4-5"></a></span>
<span id="cb4-6"><a href="#cb4-6"></a><span class="kw">instance</span> <span class="dt">Contravariant</span> <span class="dt">Comparer</span> <span class="kw">where</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>    contramap f (<span class="dt">Comparer</span> p) <span class="ot">=</span> <span class="dt">Comparer</span> (\x y <span class="ot">-&gt;</span> p (f x) (f y))</span></code></pre></div>
<p>If you can turn <code>b</code>s into <code>a</code>s, then you can turn a comparer of <code>a</code>s into a comparer of <code>b</code>s by converting the <code>b</code>s into <code>a</code>s before they go into the comparer. Note how <code>f</code> is applied to <code>p</code>’s inputs in the implementation of <code>contramap</code>.</p>
<p>In general, a type is contravariant if its parameter appears as an input. An object which consumes <code>Animals</code> can be used to consume <code>Cat</code>s. All you have to do is forget about the cattiness of the animals before you put them into the consumer.</p>
<p>Julie Moronuki has <a href="https://typeclasses.com/contravariance">the best explanation of contravariance</a> that I know of.</p>
<h2 id="invariance">Invariance</h2>
<p><em>Invariance</em> is the word for when there’s no relationship at all between different usages of a parameterised type.</p>
<p>In Scala a type parameter unadorned with a sign is invariant. The following mutable set type is invariant:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">trait</span> Set[A] {</span>
<span id="cb5-2"><a href="#cb5-2"></a>    <span class="co">// A appears as both an input and an output</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>    <span class="kw">def</span> <span class="fu">add</span>(item: A): Unit</span>
<span id="cb5-4"><a href="#cb5-4"></a>    <span class="kw">def</span> <span class="fu">remove</span>(item: A): Unit</span>
<span id="cb5-5"><a href="#cb5-5"></a>    <span class="kw">def</span> <span class="fu">contains</span>(item: A): Boolean</span>
<span id="cb5-6"><a href="#cb5-6"></a>    <span class="kw">def</span> <span class="fu">items</span>(): Iterable[A]</span>
<span id="cb5-7"><a href="#cb5-7"></a>}</span></code></pre></div>
<p>In general, a type is invariant if its parameter appears as both an input and an output. You can’t use <code>Set</code> covariantly, because <code>A</code> appears as an input to <code>contains</code>, and you can’t use it contravariantly because <code>A</code> appears in <code>items</code>’s output. There’s no subtyping relationship between the parameter and the type. A <code>Set[Cat]</code> is not a <code>Set[Animal]</code>. If it was, you’d be allowed to upcast it and then call <code>add</code> with a <code>Dog</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">val</span> catSet = <span class="kw">new</span> Set[Cat](<span class="fu">Cat</span>(<span class="st">&quot;Tilly&quot;</span>))</span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="kw">val</span> animalSet: Set[Animal] = catSet</span>
<span id="cb6-3"><a href="#cb6-3"></a></span>
<span id="cb6-4"><a href="#cb6-4"></a>animalSet.<span class="fu">add</span>(<span class="fu">Dog</span>(<span class="st">&quot;Richard&quot;</span>))</span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="kw">for</span> (cat: Cat &lt;- catSet.<span class="fu">items</span>()) {}  <span class="co">// uh oh, one of the cats will actually be a dog!</span></span></code></pre></div>
<p>The same logic applies to the opposite situation. A <code>Set[Animal]</code> is not a <code>Set[Cat]</code>.</p>
<p>Here’s a Haskell class defining <code>Invariant</code> functors.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">class</span> <span class="dt">Invariant</span> f <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="ot">    invmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
<p>You have to be able to map <code>a</code>s and <code>b</code>s in both directions to convert an invariant functor. This implies that the functor both consumes and produces <code>a</code>s: you map items on the way out and on the way in.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">newtype</span> <span class="dt">Operation</span> a <span class="ot">=</span> <span class="dt">Operation</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a)</span>
<span id="cb8-2"><a href="#cb8-2"></a></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">instance</span> <span class="dt">Invariant</span> <span class="dt">Operation</span> <span class="kw">where</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>    invmap f g (<span class="dt">Operation</span> op) <span class="ot">=</span> <span class="dt">Operation</span> (\x y <span class="ot">-&gt;</span> f (g x <span class="ot">`op`</span> g y))</span></code></pre></div>
<p>Note how we use <code>f</code> on the output of <code>op</code> and <code>g</code> on the inputs.</p>
<p>The only time I’ve actually seen this class used is in <a href="http://comonad.com/reader/2008/rotten-bananas/">Ed Kmett’s old article about attempting to represent higher-order abstract syntax generically</a>.</p>
<p>Let me spell out the similarity between <code>Invariant</code> functors and Scala’s subtype invariance. For <code>Operation a</code> to be convertible to <code>Operation b</code>, <code>a</code> must be convertible to <code>b</code> <em>and</em> <code>b</code> must be convertible to <code>a</code>. For <code>Set[A]</code> to be a subtype of <code>Set[B]</code>, <code>A</code> must be a subtype of <code>B</code> <em>and</em> <code>B</code> must be a subtype of <code>A</code> (that is, they must be the same type).</p>
<p>Note that variance is a property of the type parameter (<code>A</code>), not the type constructor (<code>List</code>/<code>Ordering</code>). A given type constructor may have multiple parameters with different variances. <code>Function1[-A, +B]</code>, for example.</p>
<p><img src="/images/2019-01-11-the-fourth-type-of-variance/hierarchy.png" width="900" /></p>
<h2 id="combining-variances">Combining Variances</h2>
<p>An object which produces a producer of <code>A</code>s effectively produces <code>A</code>s. A type with a covariant type as an output is itself covariant.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb9-1"><a href="#cb9-1"></a><span class="co">// Container returns a covariant type, so Container is covariant</span></span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="kw">trait</span> Container[+A] {</span>
<span id="cb9-3"><a href="#cb9-3"></a>    <span class="kw">def</span> <span class="fu">toList</span>(): List[A]</span>
<span id="cb9-4"><a href="#cb9-4"></a>}</span></code></pre></div>
<p>Consuming a producer of <code>A</code>s is basically the same as consuming <code>A</code>s. A type which has a covariant type as an input is contravariant.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb10-1"><a href="#cb10-1"></a><span class="co">// Printer consumes a covariant type, so it&#39;s contravariant</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="kw">trait</span> Printer[-A] {</span>
<span id="cb10-3"><a href="#cb10-3"></a>    <span class="kw">def</span> <span class="fu">printAll</span>(items: List[A]): Unit</span>
<span id="cb10-4"><a href="#cb10-4"></a>}</span></code></pre></div>
<p>Producing a consumer of <code>A</code>s is like consuming <code>A</code>s. A type with a contravariant type as an output is contravariant.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1"></a><span class="co">// Produces a contravariant type, so contravariant</span></span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="kw">trait</span> OrderingFactory[-A] {</span>
<span id="cb11-3"><a href="#cb11-3"></a>    <span class="kw">def</span> <span class="fu">getOrdering</span>(): Ordering[A]</span>
<span id="cb11-4"><a href="#cb11-4"></a>}</span></code></pre></div>
<p>A consumer of consumers is itself a producer. (You have to be able to produce <code>A</code>s in order to feed them to the consumer.) A type with a contravariant type as an input is covariant.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1"></a><span class="co">// Consumes a contravariant type, so covariant</span></span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="kw">trait</span> Sortable[+A] {  </span>
<span id="cb12-3"><a href="#cb12-3"></a>    <span class="kw">def</span> <span class="fu">sortBy</span>(ordering: Ordering[A]): Unit</span>
<span id="cb12-4"><a href="#cb12-4"></a>}</span></code></pre></div>
<p>Mnemonically, you can think of input parameters as meaning “times -1”. <code>Ordering</code> takes <code>A</code>s as its inputs, so <code>Ordering</code> is negative. <code>Sortable</code> takes a (negative) <code>Ordering</code> as an input, so it’s positive (-1 * -1 = 1). Printer takes a (positive) <code>List</code> as input, so it’s negative. This explains Scala’s choice of <code>+</code> and <code>-</code> as the syntax for its variance annotations.</p>
<h2 id="the-semilattice-of-variances">The Semilattice of Variances</h2>
<p>Now, it turns out that these three types of variance have a relationship to each other. Invariance generalises both covariance and contravariance. Covariant things are also invariant, and contravariant things are also also invariant.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1"></a><span class="ot">defaultInvmapCo ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb13-2"><a href="#cb13-2"></a>defaultInvmapCo f _ x <span class="ot">=</span> <span class="fu">fmap</span> f x</span>
<span id="cb13-3"><a href="#cb13-3"></a></span>
<span id="cb13-4"><a href="#cb13-4"></a><span class="ot">defaultInvmapContra ::</span> <span class="dt">Contravariant</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb13-5"><a href="#cb13-5"></a>defaultInvmapContra _ g x <span class="ot">=</span> contramap g x</span></code></pre></div>
<p>If I was in the business of redesigning Haskell’s libraries, I’d even consider making <code>Invariant</code> a superclass of <code>Functor</code> and <code>Contravariant</code>.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">class</span> <span class="dt">Invariant</span> f <span class="kw">where</span> <span class="co">{- ... -}</span></span>
<span id="cb14-2"><a href="#cb14-2"></a></span>
<span id="cb14-3"><a href="#cb14-3"></a><span class="kw">class</span> <span class="dt">Invariant</span> f <span class="ot">=&gt;</span> <span class="dt">Functor</span> f <span class="kw">where</span> <span class="co">{- ... -}</span></span>
<span id="cb14-4"><a href="#cb14-4"></a></span>
<span id="cb14-5"><a href="#cb14-5"></a><span class="kw">class</span> <span class="dt">Invariant</span> f <span class="ot">=&gt;</span> <span class="dt">Contravariant</span> f <span class="kw">where</span> <span class="co">{- ... -}</span></span></code></pre></div>
<p><img src="/images/2019-01-11-the-fourth-type-of-variance/semilattice.jpg" width="900" /></p>
<p>So there’s this interesting relationship between the three types of variance. They form a little semilattice, of which <code>Invariant</code> is the supremum.</p>
<p>But, hmm, the picture seems asymmetric. Is variance really only a semilattice? Or is there something lurking at the bottom of that picture?</p>
<h2 id="phantom-variance">Phantom Variance</h2>
<p>Looking at the code above, it appears that <code>Functor</code> and <code>Contravariant</code> both specialise <code>Invariant</code> by ignoring one of <code>Invariant</code>’s function parameters. What if we ignored both of them?</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1"></a><span class="kw">class</span> (<span class="dt">Functor</span> f, <span class="dt">Contravariant</span> f) <span class="ot">=&gt;</span> <span class="dt">Phantom</span> f <span class="kw">where</span></span>
<span id="cb15-2"><a href="#cb15-2"></a><span class="ot">    pmap ::</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
<p>This strange class says that you can map an <code>f a</code> to an <code>f b</code> without needing to map <code>a</code>s or <code>b</code>s at all! Intuitively, you can only convert <code>f a</code> to <code>f b</code> for free when <code>f</code> doesn’t mention <code>a</code> anywhere in its body.</p>
<p>A functor is <code>Invariant</code> when it has <code>a</code>s both as inputs and outputs. <code>Functor</code> specialises <code>Invariant</code> by promising that <code>f</code> doesn’t have any input <code>a</code>s, so all you need to do is map the outputs. <code>Contravariant</code> specialises <code>Invariant</code> by promising that there are no output <code>a</code>s and all you need to do is map the inputs. <code>Phantom</code>, being a special case of both covariance and contravariance, guarantees that there are no <code>a</code>s at all in the <code>f</code>.</p>
<p>So the four types of variance form a nice lattice.</p>
<p><img src="/images/2019-01-11-the-fourth-type-of-variance/lattice.jpg" width="900" /></p>
<p>For completeness, here’s the proof that the superclass constraints make sense:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1"></a><span class="ot">defaultFmap ::</span> <span class="dt">Phantom</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb16-2"><a href="#cb16-2"></a>defaultFmap _ <span class="ot">=</span> pmap</span>
<span id="cb16-3"><a href="#cb16-3"></a></span>
<span id="cb16-4"><a href="#cb16-4"></a><span class="ot">defaultContramap ::</span> <span class="dt">Phantom</span> f <span class="ot">=&gt;</span> (b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb16-5"><a href="#cb16-5"></a>defaultContramap _ <span class="ot">=</span> pmap</span></code></pre></div>
<p>Phantom types show up every now and then in Haskell. They’re used to decorate ordinary values with additional type-level information, either to layer on additional type safety or to give GHC a hint for type inference.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1"></a><span class="kw">data</span> <span class="dt">Proxy</span> a <span class="ot">=</span> <span class="dt">Proxy</span>  <span class="co">-- from Data.Proxy</span></span>
<span id="cb17-2"><a href="#cb17-2"></a><span class="kw">instance</span> <span class="dt">Phantom</span> <span class="dt">Proxy</span> <span class="kw">where</span></span>
<span id="cb17-3"><a href="#cb17-3"></a>    pmap _ <span class="ot">=</span> <span class="dt">Proxy</span></span></code></pre></div>
<p>Haskell is the only language I know of with proper support for phantom types, in its <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#roles">role system</a>. (<code>Phantom</code> roughly means <code>forall a b. Coercible (f a) (f b)</code>.) Scala doesn’t support it, but it’d mean that a type is always a subtype of any other instantiation of that type, even if the type arguments have no relationship.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb18-1"><a href="#cb18-1"></a><span class="kw">case</span> <span class="kw">class</span> Proxy[±A]  <span class="co">// fantasy syntax</span></span>
<span id="cb18-2"><a href="#cb18-2"></a></span>
<span id="cb18-3"><a href="#cb18-3"></a><span class="kw">val</span> catProxy = Proxy[Cat]()</span>
<span id="cb18-4"><a href="#cb18-4"></a><span class="kw">val</span> dogProxy : Proxy[Dog] = catProxy</span></code></pre></div>
<p><code>Proxy[A]</code> is always a subtype of <code>Proxy[B]</code> (and vice versa!), even when <code>A</code> and <code>B</code> are nothing to do with each other. To a certain extent this defeats the purpose of phantom types. It also breaks antisymmetry — two different types can both be a subtype of each other — so subtyping is no longer a partial order. As a language feature, phantom variance probably isn’t actually all that desirable.</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on January 11, 2019</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/develop/comments/2019-01-11-the-fourth-type-of-variance/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Zooming In on Field Accessors</title>
    <link href="http://www.benjamin.pizza/posts/2018-12-06-zooming-in-on-field-accessors.html" />
    <id>http://www.benjamin.pizza/posts/2018-12-06-zooming-in-on-field-accessors.html</id>
    <published>2018-12-06T00:00:00Z</published>
    <updated>2018-12-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December  6, 2018
    
</div>

<p>It’s common in functional languages — and increasingly in hybrid languages like C# — to work with complex systems of immutable datatypes. For a contrived example, suppose you’re working on a billing application:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">class</span> Order</span>
<span id="cb1-2"><a href="#cb1-2"></a>{</span>
<span id="cb1-3"><a href="#cb1-3"></a>    <span class="kw">public</span> Customer Customer { <span class="kw">get</span>; }</span>
<span id="cb1-4"><a href="#cb1-4"></a>    <span class="kw">public</span> ImmutableList&lt;Product&gt; Products { <span class="kw">get</span>; }</span>
<span id="cb1-5"><a href="#cb1-5"></a>}</span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="kw">class</span> Customer</span>
<span id="cb1-7"><a href="#cb1-7"></a>{</span>
<span id="cb1-8"><a href="#cb1-8"></a>    <span class="kw">public</span> <span class="dt">string</span> Name { <span class="kw">get</span>; }</span>
<span id="cb1-9"><a href="#cb1-9"></a>    <span class="kw">public</span> Address Address { <span class="kw">get</span>; }</span>
<span id="cb1-10"><a href="#cb1-10"></a>}</span>
<span id="cb1-11"><a href="#cb1-11"></a><span class="kw">class</span> Address</span>
<span id="cb1-12"><a href="#cb1-12"></a>{</span>
<span id="cb1-13"><a href="#cb1-13"></a>    <span class="kw">public</span> <span class="dt">string</span> Line1 { <span class="kw">get</span>; }</span>
<span id="cb1-14"><a href="#cb1-14"></a>    <span class="kw">public</span> <span class="dt">string</span> Line2 { <span class="kw">get</span>; }</span>
<span id="cb1-15"><a href="#cb1-15"></a>    <span class="kw">public</span> <span class="dt">string</span> Postcode { <span class="kw">get</span>; }</span>
<span id="cb1-16"><a href="#cb1-16"></a>}</span>
<span id="cb1-17"><a href="#cb1-17"></a><span class="kw">class</span> Product</span>
<span id="cb1-18"><a href="#cb1-18"></a>{</span>
<span id="cb1-19"><a href="#cb1-19"></a>    <span class="kw">public</span> <span class="dt">string</span> Title { <span class="kw">get</span>; }</span>
<span id="cb1-20"><a href="#cb1-20"></a>    <span class="kw">public</span> <span class="dt">decimal</span> Price { <span class="kw">get</span>; }</span>
<span id="cb1-21"><a href="#cb1-21"></a>}</span></code></pre></div>
<p><img src="/images/2018-12-06-zooming-in-on-field-accessors/model.jpg" width="900" /></p>
<p>(I’ve omitted the constructors; you can imagine your own.) These objects are immutable, meaning you can’t modify them directly. The way to update an immutable object is to make a copy of that object with the relevant properties changed. This turns out to be surprisingly tedious when you’re working inside a deeply nested structure:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1"></a>Order <span class="fu">UpdatePostcode</span>(Order order<span class="co">/*👨🏻‍⚖️*/</span>, <span class="dt">string</span> newPostcode)</span>
<span id="cb2-2"><a href="#cb2-2"></a>    =&gt; <span class="kw">new</span> <span class="fu">Order</span>(</span>
<span id="cb2-3"><a href="#cb2-3"></a>        <span class="kw">new</span> <span class="fu">Customer</span>(</span>
<span id="cb2-4"><a href="#cb2-4"></a>            order.<span class="fu">Customer</span>.<span class="fu">Name</span>,</span>
<span id="cb2-5"><a href="#cb2-5"></a>            <span class="kw">new</span> <span class="fu">Address</span>(</span>
<span id="cb2-6"><a href="#cb2-6"></a>                order.<span class="fu">Customer</span>.<span class="fu">Address</span>.<span class="fu">Line1</span>,</span>
<span id="cb2-7"><a href="#cb2-7"></a>                order.<span class="fu">Customer</span>.<span class="fu">Address</span>.<span class="fu">Line2</span>,</span>
<span id="cb2-8"><a href="#cb2-8"></a>                newPostcode</span>
<span id="cb2-9"><a href="#cb2-9"></a>            )</span>
<span id="cb2-10"><a href="#cb2-10"></a>        ),</span>
<span id="cb2-11"><a href="#cb2-11"></a>        order.<span class="fu">Products</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>    );</span></code></pre></div>
<p>F#’s <code>with</code>-syntax helps a little, but not a lot. You still have to write each name multiple times.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">let</span> updatePostcode(order : Order, newPostcode : <span class="dt">string</span>) : Order = {</span>
<span id="cb3-2"><a href="#cb3-2"></a>  order <span class="kw">with</span> customer = {</span>
<span id="cb3-3"><a href="#cb3-3"></a>    order.customer <span class="kw">with</span> address = {</span>
<span id="cb3-4"><a href="#cb3-4"></a>      order.customer.address <span class="kw">with</span> postcode = newPostcode</span>
<span id="cb3-5"><a href="#cb3-5"></a>    }</span>
<span id="cb3-6"><a href="#cb3-6"></a>  }</span>
<span id="cb3-7"><a href="#cb3-7"></a>}</span></code></pre></div>
<p>This pain is caused by immutability. In an imperative setting you can say <code>order.Customer.Address.Postcode = newPostcode;</code>, although of course mutable data is less reliable and harder to work with overall. Rather than give up on immutability, functional programmers have invented a remarkable family of composable tools called <em>optics</em> for poking around inside complex datatypes. Optics are a way of describing “paths” through structures: you can compose paths together, and read and write the values at the end of those paths. I’m here today to demonstrate that C#8’s upcoming <a href="https://github.com/dotnet/csharplang/issues/52"><em>default interface methods</em></a> are great at modelling optics.</p>
<p>Let’s start with <em>lenses</em>, the family member that gave the family its name.</p>
<h2 id="lenses">Lenses</h2>
<p>A <em>lens</em> is a first-class property for an immutable object. It’s an object with a pair of methods, a <em>getter</em> which retrives the value of a property and a <em>setter</em> which updates it. Remember, we’re working with immutable data, so the setter returns a new copy of the object.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">interface</span> ILens&lt;T, TProp&gt;</span>
<span id="cb4-2"><a href="#cb4-2"></a>{</span>
<span id="cb4-3"><a href="#cb4-3"></a>    TProp <span class="fu">Get</span>(T obj);</span>
<span id="cb4-4"><a href="#cb4-4"></a>    T <span class="fu">Set</span>(T oldObj, TProp newVal);</span>
<span id="cb4-5"><a href="#cb4-5"></a>}</span></code></pre></div>
<p>For example, here’s a lens which focuses on an <code>Order</code>’s <code>Customer</code>.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">class</span> CustomerL : ILens&lt;Order, Customer&gt;</span>
<span id="cb5-2"><a href="#cb5-2"></a>{</span>
<span id="cb5-3"><a href="#cb5-3"></a>    <span class="kw">public</span> Customer <span class="fu">Get</span>(Order o) =&gt; o.<span class="fu">Customer</span>;</span>
<span id="cb5-4"><a href="#cb5-4"></a></span>
<span id="cb5-5"><a href="#cb5-5"></a>    <span class="kw">public</span> Order <span class="fu">Set</span>(Order o, Customer c) =&gt; <span class="kw">new</span> <span class="fu">Order</span>(c, o.<span class="fu">Products</span>);</span>
<span id="cb5-6"><a href="#cb5-6"></a>}</span></code></pre></div>
<p><img src="/images/2018-12-06-zooming-in-on-field-accessors/customer.jpg" width="900" /></p>
<p>So a lens picks out a single property inside a given object.</p>
<p>The power of lenses comes from their composability. Given a lens identifying a <code>T2</code> inside a <code>T1</code> (<code>ILens&lt;T1, T2&gt;</code>) and a lens identifying a <code>T3</code> inside a <code>T2</code> (<code>ILens&lt;T2, T3&gt;</code>), you can compose those lenses together to focus all the way from the <code>T1</code> to the <code>T3</code>.</p>
<p>You can traverse any relationship in your data model by composing together a small number of individual lenses. Composing lenses is so important that I’ve given it the shortest name I can think of: <code>_</code>. (Readers of <a href="2018-03-16-eighty.html">an eariler post of mine</a> will know of my fondness for <code>_</code>.)</p>
<p><img src="/images/2018-12-06-zooming-in-on-field-accessors/postcode.jpg" width="900" /></p>
<p>Compare this terse, declarative code with the tedious version of <code>UpdatePostcode</code> from the beginning:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1"></a>Order <span class="fu">UpdatePostcode</span>(Order order<span class="co">/*👨🏻‍⚖️*/</span>, <span class="dt">string</span> newPostcode)</span>
<span id="cb6-2"><a href="#cb6-2"></a>{</span>
<span id="cb6-3"><a href="#cb6-3"></a>    ILens&lt;Order, <span class="dt">string</span>&gt; l = <span class="kw">new</span> <span class="fu">CustomerL</span>()</span>
<span id="cb6-4"><a href="#cb6-4"></a>        ._(<span class="kw">new</span> <span class="fu">AddressL</span>())</span>
<span id="cb6-5"><a href="#cb6-5"></a>        ._(<span class="kw">new</span> <span class="fu">PostcodeL</span>());</span>
<span id="cb6-6"><a href="#cb6-6"></a>    </span>
<span id="cb6-7"><a href="#cb6-7"></a>    <span class="kw">return</span> l.<span class="fu">Set</span>(order, newPostcode);</span>
<span id="cb6-8"><a href="#cb6-8"></a>}</span></code></pre></div>
<p>Lenses work without reference to any particular instance. (This is called <del><em>pointless</em></del> <a href="https://stackoverflow.com/questions/944446/what-is-point-free-style-in-functional-programming"><em>point-free</em></a> programming.) <code>order.Customer.Address.Postcode</code> becomes <code>new CustomerL()._(new AddressL())._(new PostcodeL())</code> — the path of properties is sort of detached from the object itself. Treating a path through a datatype as a first class value is the big idea behind lenses.</p>
<p>Here’s how <code>_</code> is implemented. It returns a new <code>ILens</code> (an instance of a private class) which delegates to the two smaller lenses.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">static</span> <span class="kw">class</span> LensExtensions</span>
<span id="cb7-2"><a href="#cb7-2"></a>{</span>
<span id="cb7-3"><a href="#cb7-3"></a>    <span class="kw">public</span> <span class="kw">static</span> ILens&lt;T1, T3&gt; _&lt;T1, T2, T3&gt;(<span class="kw">this</span> ILens&lt;T1, T2&gt; l1, ILens&lt;T2, T3&gt; l2)</span>
<span id="cb7-4"><a href="#cb7-4"></a>        =&gt; <span class="kw">new</span> ComposedLens&lt;T1, T2, T3&gt;(l1, l2);</span>
<span id="cb7-5"><a href="#cb7-5"></a></span>
<span id="cb7-6"><a href="#cb7-6"></a>    <span class="kw">private</span> <span class="kw">class</span> ComposedLens&lt;T1, T2, T3&gt; : ILens&lt;T1, T3&gt;</span>
<span id="cb7-7"><a href="#cb7-7"></a>    {</span>
<span id="cb7-8"><a href="#cb7-8"></a>        <span class="kw">private</span> <span class="kw">readonly</span> ILens&lt;T1, T2&gt; _l1;</span>
<span id="cb7-9"><a href="#cb7-9"></a>        <span class="kw">private</span> <span class="kw">readonly</span> ILens&lt;T2, T3&gt; _l2;</span>
<span id="cb7-10"><a href="#cb7-10"></a></span>
<span id="cb7-11"><a href="#cb7-11"></a>        <span class="kw">public</span> T3 <span class="fu">Get</span>(T1 obj) =&gt; _l2.<span class="fu">Get</span>(_l1.<span class="fu">Get</span>(obj));</span>
<span id="cb7-12"><a href="#cb7-12"></a></span>
<span id="cb7-13"><a href="#cb7-13"></a>        <span class="kw">public</span> T1 <span class="fu">Set</span>(T1 oldObj, T3 newVal)</span>
<span id="cb7-14"><a href="#cb7-14"></a>            =&gt; _l1.<span class="fu">Set</span>(oldObj, _l2.<span class="fu">Set</span>(_l1.<span class="fu">Get</span>(oldObj), newVal));</span>
<span id="cb7-15"><a href="#cb7-15"></a>    }</span>
<span id="cb7-16"><a href="#cb7-16"></a>}</span></code></pre></div>
<p>To summarise, a lens is a way to focus on a small part of a big immutable structure. They’re like a first-class version of the <code>.</code> and <code>=</code> operators: you can compose lenses together to focus deeper, and upon focusing on a location you can get and set the value at that location.</p>
<h3 id="mapping-under-a-lens">Mapping under a lens</h3>
<p>A common pattern is to get a value from a lens, apply some sort of transformation to it, and then put it back where it was. The <code>Map</code> helper function wraps up this pattern:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">interface</span> ILens&lt;T, TProp&gt;</span>
<span id="cb8-2"><a href="#cb8-2"></a>{</span>
<span id="cb8-3"><a href="#cb8-3"></a>    TProp <span class="fu">Get</span>(T obj);</span>
<span id="cb8-4"><a href="#cb8-4"></a>    T <span class="fu">Set</span>(T oldObj, TProp newVal);</span>
<span id="cb8-5"><a href="#cb8-5"></a></span>
<span id="cb8-6"><a href="#cb8-6"></a>    T <span class="fu">Map</span>(T oldObj, Func&lt;TProp, TProp&gt; transformer)</span>
<span id="cb8-7"><a href="#cb8-7"></a>        =&gt; <span class="fu">Set</span>(oldObj, <span class="fu">transformer</span>(<span class="fu">Get</span>(oldObj))).</span>
<span id="cb8-8"><a href="#cb8-8"></a>}</span></code></pre></div>
<p>Here’s an early taste of a default interface implementation. The default, <em><code>Get</code>-then-<code>Set</code></em>, works correctly, but when you’re working with deeply stacked lenses it can be inefficient to walk the whole data structure twice. (This is especially true of <em>multi-lenses</em> — of which more later — which build and discard a large number of intermediate enumerables.) If <code>Map</code> were an extension method, it would be impossible for users to override it and provide a more efficient implementation.</p>
<hr />
<p>Powerful as they are, these lenses don’t quite scale up to cover all of the important ways to access data. Specifically, they don’t support computed properties or lists.</p>
<h2 id="getters">Getters</h2>
<p>How would you write a lens which focuses on a list’s <code>Count</code>? You can’t set <code>Count</code> directly - it measures the number of times you’ve added or removed something from the list. The only way to change the <code>Count</code> is to add or remove an item!</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">class</span> CountL&lt;T&gt; : ILens&lt;ImmutableList&lt;T&gt;, <span class="dt">int</span>&gt;</span>
<span id="cb9-2"><a href="#cb9-2"></a>{</span>
<span id="cb9-3"><a href="#cb9-3"></a>    <span class="kw">public</span> <span class="dt">int</span> <span class="fu">Get</span>(ImmutableList&lt;T&gt; l) =&gt; l.<span class="fu">Count</span>;</span>
<span id="cb9-4"><a href="#cb9-4"></a>    <span class="kw">public</span> ImmutableList&lt;T&gt; <span class="fu">Set</span>(ImmutableList&lt;T&gt; l, <span class="dt">int</span> count) =&gt; <span class="co">/* ??? */</span>;</span>
<span id="cb9-5"><a href="#cb9-5"></a>}</span></code></pre></div>
<p>Clearly we need to separate the “getting” and “setting” reponsibilities of <code>ILens</code>.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">interface</span> IGetter&lt;T, TProp&gt;</span>
<span id="cb10-2"><a href="#cb10-2"></a>{</span>
<span id="cb10-3"><a href="#cb10-3"></a>    TProp <span class="fu">Get</span>(T obj);</span>
<span id="cb10-4"><a href="#cb10-4"></a>}</span>
<span id="cb10-5"><a href="#cb10-5"></a><span class="kw">interface</span> ILens&lt;T, TProp&gt; : IGetter&lt;T, TProp&gt;</span>
<span id="cb10-6"><a href="#cb10-6"></a>{</span>
<span id="cb10-7"><a href="#cb10-7"></a>    T <span class="fu">Set</span>(T oldObj, TProp newVal);</span>
<span id="cb10-8"><a href="#cb10-8"></a>}</span></code></pre></div>
<p>We don’t lose composability by doing this. You can still compose two getters to get a getter.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">static</span> <span class="kw">class</span> LensExtensions</span>
<span id="cb11-2"><a href="#cb11-2"></a>{</span>
<span id="cb11-3"><a href="#cb11-3"></a>    <span class="kw">public</span> <span class="kw">static</span> IGetter&lt;T1, T3&gt; <span class="fu">_</span>(</span>
<span id="cb11-4"><a href="#cb11-4"></a>        <span class="kw">this</span> IGetter&lt;T1, T2&gt; g1,</span>
<span id="cb11-5"><a href="#cb11-5"></a>        IGetter&lt;T2, T3&gt; g2</span>
<span id="cb11-6"><a href="#cb11-6"></a>    ) =&gt; <span class="kw">new</span> ComposedGetter&lt;T1, T2, T3&gt;(g1, g2);</span>
<span id="cb11-7"><a href="#cb11-7"></a></span>
<span id="cb11-8"><a href="#cb11-8"></a>    <span class="kw">private</span> <span class="kw">class</span> ComposedGetter&lt;T1, T2, T3&gt; : IGetter&lt;T1, T3&gt;</span>
<span id="cb11-9"><a href="#cb11-9"></a>    {</span>
<span id="cb11-10"><a href="#cb11-10"></a>        <span class="kw">private</span> <span class="kw">readonly</span> IGetter&lt;T1, T2&gt; _g1;</span>
<span id="cb11-11"><a href="#cb11-11"></a>        <span class="kw">private</span> <span class="kw">readonly</span> IGetter&lt;T2, T3&gt; _g2;</span>
<span id="cb11-12"><a href="#cb11-12"></a></span>
<span id="cb11-13"><a href="#cb11-13"></a>        <span class="kw">public</span> T3 <span class="fu">Get</span>(T1 obj) =&gt; _g2.<span class="fu">Get</span>(_g1.<span class="fu">Get</span>(obj));</span>
<span id="cb11-14"><a href="#cb11-14"></a>    }</span>
<span id="cb11-15"><a href="#cb11-15"></a>}</span></code></pre></div>
<p>If you compose a lens with a getter, you get a getter. This makes sense: if any part of a given path through a data structure is read-only, then the whole path must be read-only. It Just Works™ because <code>ILens</code> is a subtype of <code>IGetter</code>. Overload resolution takes care of it: you type <code>_</code> and the compiler picks the right return type based on the types of <code>_</code>’s arguments.</p>
<h2 id="multi-lenses">Multi-lenses</h2>
<p><code>ILens</code> focuses on a single part of a structure. Its <code>Get</code> method returns a single <code>TProp</code> and its <code>Set</code> method takes a single <code>TProp</code>. This means you can’t use lenses to, for example, update the price of all the products in an order.</p>
<p>Enter <em>multi-lenses</em>, also known as <em>traversals</em>.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">interface</span> IMultiLens&lt;T, TProp&gt;</span>
<span id="cb12-2"><a href="#cb12-2"></a>{</span>
<span id="cb12-3"><a href="#cb12-3"></a>    IEnumerable&lt;TProp&gt; <span class="fu">MultiGet</span>(T obj);</span>
<span id="cb12-4"><a href="#cb12-4"></a>    <span class="co">// newVals should be the same length as the list returned by MultiGet</span></span>
<span id="cb12-5"><a href="#cb12-5"></a>    T <span class="fu">MultiSet</span>(T oldObj, IEnumerable&lt;TProp&gt; newVals);</span>
<span id="cb12-6"><a href="#cb12-6"></a></span>
<span id="cb12-7"><a href="#cb12-7"></a>    T <span class="fu">Map</span>(T oldObj, Func&lt;TProp, TProp&gt; transformer)</span>
<span id="cb12-8"><a href="#cb12-8"></a>        =&gt; <span class="fu">MultiSet</span>(oldObj, <span class="fu">MultiGet</span>(oldObj).<span class="fu">Select</span>(transformer)).</span>
<span id="cb12-9"><a href="#cb12-9"></a>}</span></code></pre></div>
<p>(Readers of <a href="2017-11-13-recursion-without-recursion.html">an earlier post</a> might recognise <code>IMultiLens</code> as a generalisation of <code>IRewriter</code>.) A multi-lens is like a lens which can hit more than one target. While a lens focuses on <em>exactly one</em> <code>TProp</code> inside a <code>T</code>, a multi-lens relaxes that restriction, focusing on <em>zero-or-many</em> <code>TProps</code> at once.</p>
<p>Here’s an example multi-lens which focuses on all of the <code>Product</code>s in an <code>Order</code>.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb13-1"><a href="#cb13-1"></a><span class="kw">class</span> ProductsL : IMultiLens&lt;Order, Product&gt;</span>
<span id="cb13-2"><a href="#cb13-2"></a>{</span>
<span id="cb13-3"><a href="#cb13-3"></a>    IEnumerable&lt;Product&gt; <span class="fu">MultiGet</span>(Order order) =&gt; order.<span class="fu">Products</span>;</span>
<span id="cb13-4"><a href="#cb13-4"></a></span>
<span id="cb13-5"><a href="#cb13-5"></a>    Order <span class="fu">MultiSet</span>(Order order, IEnumerable&lt;Product&gt; newProducts)</span>
<span id="cb13-6"><a href="#cb13-6"></a>        =&gt; <span class="kw">new</span> <span class="fu">Order</span>(order.<span class="fu">Customer</span>, newProducts);</span>
<span id="cb13-7"><a href="#cb13-7"></a>}</span></code></pre></div>
<p><img src="/images/2018-12-06-zooming-in-on-field-accessors/products.jpg" width="900" /></p>
<p>You can compose multi-lenses, too. If you have a multi-lens which finds <span class="math inline"><em>n</em></span> <code>T2</code>s inside a <code>T1</code>, and a second multi-lens which finds <span class="math inline"><em>m</em></span> <code>T3</code>s inside a <code>T2</code>, you can build a multi-lens which finds <span class="math inline"><em>n</em><em>m</em></span> <code>T3</code>s inside a <code>T1</code>. This works by looking through the second multi-lens at all <span class="math inline"><em>n</em></span> of the first multi-lens’s targets.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">static</span> <span class="kw">class</span> LensExtensions</span>
<span id="cb14-2"><a href="#cb14-2"></a>{</span>
<span id="cb14-3"><a href="#cb14-3"></a>    <span class="kw">public</span> <span class="kw">static</span> IMultiLens&lt;T1, T3&gt; <span class="fu">_</span>(</span>
<span id="cb14-4"><a href="#cb14-4"></a>        <span class="kw">this</span> IMultiLens&lt;T1, T2&gt; m1,</span>
<span id="cb14-5"><a href="#cb14-5"></a>        IMultiLens&lt;T2, T3&gt; m2</span>
<span id="cb14-6"><a href="#cb14-6"></a>    ) =&gt; <span class="kw">new</span> ComposedMultiLens&lt;T1, T2, T3&gt;(m1, m2);</span>
<span id="cb14-7"><a href="#cb14-7"></a></span>
<span id="cb14-8"><a href="#cb14-8"></a>    <span class="kw">private</span> <span class="kw">class</span> ComposedMultiLens&lt;T1, T2, T3&gt; : IMultiLens&lt;T1, T3&gt;</span>
<span id="cb14-9"><a href="#cb14-9"></a>    {</span>
<span id="cb14-10"><a href="#cb14-10"></a>        <span class="kw">private</span> <span class="kw">readonly</span> IMultiLens&lt;T1, T2&gt; _m1;</span>
<span id="cb14-11"><a href="#cb14-11"></a>        <span class="kw">private</span> <span class="kw">readonly</span> IMultiLens&lt;T2, T3&gt; _m2;</span>
<span id="cb14-12"><a href="#cb14-12"></a></span>
<span id="cb14-13"><a href="#cb14-13"></a>        <span class="kw">public</span> IEnumerable&lt;T3&gt; <span class="fu">MultiGet</span>(T1 obj)</span>
<span id="cb14-14"><a href="#cb14-14"></a>            =&gt; _m1.<span class="fu">MultiGet</span>(obj).<span class="fu">SelectMany</span>(_m2.<span class="fu">MultiGet</span>);</span>
<span id="cb14-15"><a href="#cb14-15"></a></span>
<span id="cb14-16"><a href="#cb14-16"></a>        <span class="kw">public</span> T1 <span class="fu">MultiSet</span>(T1 oldObj, IEnumerable&lt;T3&gt; newVals)</span>
<span id="cb14-17"><a href="#cb14-17"></a>        {</span>
<span id="cb14-18"><a href="#cb14-18"></a>            IEnumerable&lt;T2&gt; <span class="fu">NewT2s</span>()</span>
<span id="cb14-19"><a href="#cb14-19"></a>            {</span>
<span id="cb14-20"><a href="#cb14-20"></a>                <span class="kw">foreach</span> (<span class="dt">var</span> x <span class="kw">in</span> _m1.<span class="fu">MultiGet</span>(oldObj))</span>
<span id="cb14-21"><a href="#cb14-21"></a>                {</span>
<span id="cb14-22"><a href="#cb14-22"></a>                    <span class="dt">var</span> chunkLength = _m2.<span class="fu">MultiGet</span>(x).<span class="fu">Count</span>();</span>
<span id="cb14-23"><a href="#cb14-23"></a>                    <span class="kw">yield</span> <span class="kw">return</span> _m2.<span class="fu">MultiSet</span>(x, newVals.<span class="fu">Take</span>(chunkLength));</span>
<span id="cb14-24"><a href="#cb14-24"></a>                    newVals = newVals.<span class="fu">Skip</span>(chunkLength);</span>
<span id="cb14-25"><a href="#cb14-25"></a>                }</span>
<span id="cb14-26"><a href="#cb14-26"></a>            }</span>
<span id="cb14-27"><a href="#cb14-27"></a>            <span class="kw">return</span> _m1.<span class="fu">MultiSet</span>(oldObj, <span class="fu">NewT2s</span>());</span>
<span id="cb14-28"><a href="#cb14-28"></a>        }</span>
<span id="cb14-29"><a href="#cb14-29"></a>    }</span>
<span id="cb14-30"><a href="#cb14-30"></a>}</span></code></pre></div>
<p><code>MultiSet</code> chops <code>newVals</code> into chunks that are the length of each group of descendants. This is safe as long as a user never calls <code>MultiSet</code> with a different number of elements than was returned by <code>MultiGet</code>.</p>
<p>So far we can compose multi-lenses on their own, but they don’t yet interoperate well with lenses. But note multi-lenses generalise lenses by relaxing the requirement that there should be exactly one substructure. Every lens is also a multi-lens by forgetting that there’s a single <code>TProp</code>. (Once again we’re relying on the assumption that the list does not change length in between <code>MultiGet</code> and <code>MultiSet</code> calls.)</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb15-1"><a href="#cb15-1"></a><span class="kw">interface</span> ILens&lt;T, TProp&gt; : IMultiLens&lt;T, TProp&gt;</span>
<span id="cb15-2"><a href="#cb15-2"></a>{</span>
<span id="cb15-3"><a href="#cb15-3"></a>    TProp <span class="fu">Get</span>(T obj);</span>
<span id="cb15-4"><a href="#cb15-4"></a>    T <span class="fu">Set</span>(T oldObj, TProp newVal);</span>
<span id="cb15-5"><a href="#cb15-5"></a></span>
<span id="cb15-6"><a href="#cb15-6"></a>    IEnumerable&lt;TProp&gt; <span class="fu">MultiGet</span>(T obj)</span>
<span id="cb15-7"><a href="#cb15-7"></a>        =&gt; <span class="kw">new</span>[] { <span class="fu">Get</span>(obj) };</span>
<span id="cb15-8"><a href="#cb15-8"></a>    T <span class="fu">MultiSet</span>(T oldObj, IEnumerable&lt;TProp&gt; newVals)</span>
<span id="cb15-9"><a href="#cb15-9"></a>        =&gt; <span class="fu">Set</span>(oldObj, newVals.<span class="fu">Single</span>());</span>
<span id="cb15-10"><a href="#cb15-10"></a>}</span></code></pre></div>
<p>Inheriting from <code>IMultiLens</code> like this is just the same trick as inheriting from <code>IGetter</code>. It allows you to compose a lens with a multi-lens using <code>_</code>; the result will be a multi-lens.</p>
<p>If lenses are like a first-class <code>.</code>, then multi-lenses are like a first-class <code>Select</code>. Composing a lens onto the end of a multi-lens is like <code>Select</code>ing a field from each element of a list, with the added power of being able to write new values to the list. Like lenses, multi-lenses are point-free: you compose a multi-lens describing a path through a datatype, then apply that multi-lens to a specific instance of the datatype.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb16-1"><a href="#cb16-1"></a>Order <span class="fu">TwentyPercentOff</span>(Order order)</span>
<span id="cb16-2"><a href="#cb16-2"></a>{</span>
<span id="cb16-3"><a href="#cb16-3"></a>    IMultiLens&lt;Order, <span class="dt">decimal</span>&gt; l = <span class="kw">new</span> <span class="fu">ProductsL</span>()._(<span class="kw">new</span> <span class="fu">PriceL</span>());</span>
<span id="cb16-4"><a href="#cb16-4"></a>    <span class="kw">return</span> l.<span class="fu">Map</span>(order, x =&gt; x * <span class="fl">0.8</span>);</span>
<span id="cb16-5"><a href="#cb16-5"></a>}</span></code></pre></div>
<p><img src="/images/2018-12-06-zooming-in-on-field-accessors/product-and-price.jpg" width="900" /></p>
<p>Incorporating the earlier <code>IGetter</code> fix, and extending <code>IMultiLens</code> upwards in parallel, leaves us with the following hierarchy.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb17-1"><a href="#cb17-1"></a><span class="kw">interface</span> IMultiGetter&lt;T, TProp&gt;</span>
<span id="cb17-2"><a href="#cb17-2"></a>{</span>
<span id="cb17-3"><a href="#cb17-3"></a>    IEnumerable&lt;TProp&gt; <span class="fu">MultiGet</span>(T obj);</span>
<span id="cb17-4"><a href="#cb17-4"></a>}</span>
<span id="cb17-5"><a href="#cb17-5"></a><span class="kw">interface</span> IMultiLens&lt;T, TProp&gt; : IMultiGetter&lt;T, TProp&gt;</span>
<span id="cb17-6"><a href="#cb17-6"></a>{</span>
<span id="cb17-7"><a href="#cb17-7"></a>    T <span class="fu">MultiSet</span>(T oldObj, IEnumerable&lt;TProp&gt; newVals);</span>
<span id="cb17-8"><a href="#cb17-8"></a></span>
<span id="cb17-9"><a href="#cb17-9"></a>    T <span class="fu">Map</span>(T oldObj, Func&lt;TProp, TProp&gt; transformer)</span>
<span id="cb17-10"><a href="#cb17-10"></a>        =&gt; <span class="fu">MultiSet</span>(oldObj, <span class="fu">MultiGet</span>(oldObj).<span class="fu">Select</span>(transformer));</span>
<span id="cb17-11"><a href="#cb17-11"></a>}</span>
<span id="cb17-12"><a href="#cb17-12"></a><span class="kw">interface</span> IGetter&lt;T, TProp&gt; : IMultiGetter&lt;T, TProp&gt;</span>
<span id="cb17-13"><a href="#cb17-13"></a>{</span>
<span id="cb17-14"><a href="#cb17-14"></a>    TProp <span class="fu">Get</span>(T obj);</span>
<span id="cb17-15"><a href="#cb17-15"></a></span>
<span id="cb17-16"><a href="#cb17-16"></a>    IEnumerable&lt;TProp&gt; <span class="fu">MultiGet</span>(T obj)</span>
<span id="cb17-17"><a href="#cb17-17"></a>        =&gt; <span class="kw">new</span>[] { <span class="fu">Get</span>(obj) };</span>
<span id="cb17-18"><a href="#cb17-18"></a>}</span>
<span id="cb17-19"><a href="#cb17-19"></a><span class="kw">interface</span> ILens&lt;T, TProp&gt; : IGetter&lt;T, TProp&gt;, IMultiLens&lt;T, TProp&gt;</span>
<span id="cb17-20"><a href="#cb17-20"></a>{</span>
<span id="cb17-21"><a href="#cb17-21"></a>    T <span class="fu">Set</span>(T oldObj, TProp newVal);</span>
<span id="cb17-22"><a href="#cb17-22"></a></span>
<span id="cb17-23"><a href="#cb17-23"></a>    T <span class="fu">MultiSet</span>(T oldObj, IEnumerable&lt;TProp&gt; newVals)</span>
<span id="cb17-24"><a href="#cb17-24"></a>        =&gt; <span class="fu">Set</span>(oldObj, newVals.<span class="fu">Single</span>());</span>
<span id="cb17-25"><a href="#cb17-25"></a>}</span></code></pre></div>
<p><img src="/images/2018-12-06-zooming-in-on-field-accessors/hierarchy.jpg" width="900" /></p>
<h2 id="default-interface-implementations">Default Interface Implementations</h2>
<p>The code above makes central use of default interface implementations, so it’s probably time to talk about what they are.</p>
<p>In C#8, interfaces won’t just be type declarations any more. You’ll be allowed to write code in an interface method, to function as the default implementation of that method. Typically it’ll be written in terms of the other methods on the interface, like an extension method. They differ from extension methods, however, in that they are virtual. If an implementing class has a better (faster, typically) way of implementing the operation, it’s free to override it.</p>
<p>Here’s an example. How would LINQ’s design look different if default interface methods had been around at the time? Today’s <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.count"><code>Count</code></a> method, an extension method, works in linear time by counting up all of the elements of the input <code>IEnumerable</code>.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb18-1"><a href="#cb18-1"></a><span class="kw">public</span> <span class="kw">static</span> <span class="dt">int</span> Count&lt;T&gt;(<span class="kw">this</span> IEnumerable&lt;T&gt; source)</span>
<span id="cb18-2"><a href="#cb18-2"></a>{</span>
<span id="cb18-3"><a href="#cb18-3"></a>    <span class="dt">var</span> count = <span class="dv">0</span>;</span>
<span id="cb18-4"><a href="#cb18-4"></a>    <span class="kw">foreach</span> (<span class="dt">var</span> _ <span class="kw">in</span> source)</span>
<span id="cb18-5"><a href="#cb18-5"></a>    {</span>
<span id="cb18-6"><a href="#cb18-6"></a>        count++;</span>
<span id="cb18-7"><a href="#cb18-7"></a>    }</span>
<span id="cb18-8"><a href="#cb18-8"></a>    <span class="kw">return</span> count;</span>
<span id="cb18-9"><a href="#cb18-9"></a>}</span></code></pre></div>
<p>However, there are certain implementations of <code>IEnumerable</code> which can count themselves much faster than that:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb19-1"><a href="#cb19-1"></a><span class="kw">class</span> List&lt;T&gt; : IEnumerable&lt;T&gt;</span>
<span id="cb19-2"><a href="#cb19-2"></a>{</span>
<span id="cb19-3"><a href="#cb19-3"></a>    <span class="kw">private</span> T[] _array;</span>
<span id="cb19-4"><a href="#cb19-4"></a>    <span class="kw">private</span> <span class="dt">int</span> _count;</span>
<span id="cb19-5"><a href="#cb19-5"></a></span>
<span id="cb19-6"><a href="#cb19-6"></a>    <span class="co">// ...</span></span>
<span id="cb19-7"><a href="#cb19-7"></a></span>
<span id="cb19-8"><a href="#cb19-8"></a>    <span class="kw">public</span> <span class="dt">int</span> Count =&gt; _count;</span>
<span id="cb19-9"><a href="#cb19-9"></a>}</span></code></pre></div>
<p><a href="https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Count.cs">The real <code>Count</code> extension method</a> takes a fast path when its argument happens to be an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1?view=netframework-4.7.2"><code>ICollection</code></a>, but that doesn’t scale well. Not every <code>IEnumerable</code> which admits a fast <code>Count</code> can also implement <code>ICollection</code> — for example, an immutable collection can’t implement the <code>void Add(T item)</code> method.</p>
<p>If LINQ had been designed not as a collection of extension methods but as a collection of default interface methods, it’d be possible to override <code>Count</code> in an extensible way:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb20-1"><a href="#cb20-1"></a><span class="kw">interface</span> IEnumerable&lt;T&gt;</span>
<span id="cb20-2"><a href="#cb20-2"></a>{</span>
<span id="cb20-3"><a href="#cb20-3"></a>    IEnumerator&lt;T&gt; <span class="fu">GetEnumerator</span>();</span>
<span id="cb20-4"><a href="#cb20-4"></a></span>
<span id="cb20-5"><a href="#cb20-5"></a>    <span class="dt">int</span> <span class="fu">Count</span>()</span>
<span id="cb20-6"><a href="#cb20-6"></a>    {</span>
<span id="cb20-7"><a href="#cb20-7"></a>        <span class="dt">var</span> count = <span class="dv">0</span>;</span>
<span id="cb20-8"><a href="#cb20-8"></a>        <span class="kw">foreach</span> (<span class="dt">var</span> _ <span class="kw">in</span> source)</span>
<span id="cb20-9"><a href="#cb20-9"></a>        {</span>
<span id="cb20-10"><a href="#cb20-10"></a>            count++;</span>
<span id="cb20-11"><a href="#cb20-11"></a>        }</span>
<span id="cb20-12"><a href="#cb20-12"></a>        <span class="kw">return</span> count;</span>
<span id="cb20-13"><a href="#cb20-13"></a>    }</span>
<span id="cb20-14"><a href="#cb20-14"></a>    <span class="co">// other methods like Select etc</span></span>
<span id="cb20-15"><a href="#cb20-15"></a>}</span>
<span id="cb20-16"><a href="#cb20-16"></a></span>
<span id="cb20-17"><a href="#cb20-17"></a><span class="kw">class</span> List&lt;T&gt; : IEnumerable&lt;T&gt;</span>
<span id="cb20-18"><a href="#cb20-18"></a>{</span>
<span id="cb20-19"><a href="#cb20-19"></a>    <span class="kw">private</span> T[] _array;</span>
<span id="cb20-20"><a href="#cb20-20"></a>    <span class="kw">private</span> <span class="dt">int</span> _count;</span>
<span id="cb20-21"><a href="#cb20-21"></a>    </span>
<span id="cb20-22"><a href="#cb20-22"></a>    <span class="co">// ...</span></span>
<span id="cb20-23"><a href="#cb20-23"></a></span>
<span id="cb20-24"><a href="#cb20-24"></a>    <span class="co">// override the default version from IEnumerable</span></span>
<span id="cb20-25"><a href="#cb20-25"></a>    <span class="kw">public</span> <span class="dt">int</span> <span class="fu">Count</span>() =&gt; _count;</span>
<span id="cb20-26"><a href="#cb20-26"></a>}</span></code></pre></div>
<p>Interfaces with default methods are somewhat like abstract classes with virtual methods. The main difference is that a class can implement multiple interfaces, while it can only derive from one class. So default interface implementations amount to a form of multiple inheritance! (This provoked much whingeing in <a href="https://github.com/dotnet/csharplang/issues/288">the discussion on GitHub</a>.)</p>
<p>The optics library I’ve outlined above makes central use of multiple inheritance. <code>ILens</code> inherits its <code>MultiGet</code> implementation from <code>IGetter</code> and its <code>Map</code> implementation from <code>IMultiLens</code>. So it wouldn’t work with abstract classes; before C#8 we wouldn’t have been able to write this program. Default interface implementations add new expressive power to the language.</p>
<h2 id="production-worthiness">Production-Worthiness</h2>
<p>Lenses are very useful in functional languages, but I would not recommend you use them in practical C#, even after the release of C#8. When you stand it next to <a href="http://hackage.haskell.org/package/lens">Haskell’s <code>lens</code> library</a>, the API I outlined above has a number of significant shortcomings.</p>
<ul>
<li><p><strong>Performance</strong>. The big one! Accessing a field is such a common operation that it’d better be fast. The <code>.</code> operator (<code>order.Customer.Address.Postcode</code>) is very fast on the CLR — just a pointer hop. Composed lenses, on the other hand, are tree-shaped objects, and calling <code>Get</code> means traversing that tree with a interface method call at each level. I ran some rudimentary benchmarks and found deeply nested lenses to be orders of magnitude slower than equivalent lensless code.</p>
<p>The <code>lens</code> library sidesteps this performance issue by leaning on Haskell’s optimising compiler. <code>lens</code> has been carefully designed to be easy for GHC to optimise, and the result is that GHC generally produces identical machine code for equivalent lensy and lensless functions.</p></li>
<li><p><strong>Code generation</strong>. Almost all of the atomic lens classes you’d write for a business system are pure boilerplate — exactly the sort of thing you’d expect a machine to write. You should be able to define an object, perhaps mark it up using an attribute, and get on with using lenses into that object in the rest of your program, with Intellisense support. You shouldn’t ever need to see a lens’s source code. Roslyn, the C# compiler, has no facilities for compile-time code injection like this. A lens library could bundle a source code generator, perhaps using Roslyn’s API, which users run ahead-of-time — many ORMs do this — but that’s a much less compelling user experience.</p>
<p>This may be a good use case for F#’s type providers. (In any case F# places more emphasis on immutability than C#, making lenses a more natural fit in the first place.) Presently you can’t use a type provider to generate code based on another type (though <a href="https://github.com/fsharp/fslang-design/issues/125">it appears to be planned</a>), and <a href="https://github.com/fsharp/fslang-suggestions/issues/679#issuecomment-399411192">there don’t seem to be plans</a> to support multiple inheritance in the F# source language. In principle one could implement the hierarchy in C# and consume it from an F# type provider.</p></li>
<li><p>Two ergonomic complaints regarding C#’s support for <strong>generics</strong>:</p>
<ul>
<li><p><strong>Type inference</strong>. C# has only minimal support for type inference. This makes generic lenses unpleasant to use. The following lens picks out a <code>KeyValuePair</code>’s <code>Value</code>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb21-1"><a href="#cb21-1"></a><span class="kw">class</span> ValueL&lt;K, V&gt; : ILens&lt;KeyValuePair&lt;K, V&gt;, V&gt;</span>
<span id="cb21-2"><a href="#cb21-2"></a>{</span>
<span id="cb21-3"><a href="#cb21-3"></a>    <span class="kw">public</span> V <span class="fu">Get</span>(KeyValuePair&lt;K, V&gt; kvp) =&gt; kvp.<span class="fu">Value</span>;</span>
<span id="cb21-4"><a href="#cb21-4"></a>    <span class="kw">public</span> KeyValuePair&lt;K, V&gt; <span class="fu">Set</span>(KeyValuePair&lt;K, V&gt; kvp, V val)</span>
<span id="cb21-5"><a href="#cb21-5"></a>        =&gt; <span class="kw">new</span> KeyValuePair&lt;K, V&gt;(kvp.<span class="fu">Key</span>, val);</span>
<span id="cb21-6"><a href="#cb21-6"></a>}</span></code></pre></div>
<p>You can’t use <code>ValueL</code> without explicitly mentioning the concrete type parameters at which you’re using it:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb22-1"><a href="#cb22-1"></a><span class="kw">new</span> ValueL&lt;<span class="dt">string</span>, <span class="dt">int</span>&gt;().<span class="fu">Set</span>(<span class="kw">new</span> KeyValuePair&lt;<span class="dt">string</span>, <span class="dt">int</span>&gt;(<span class="st">&quot;foo&quot;</span>, <span class="dv">3</span>), <span class="dv">7</span>);</span></code></pre></div>
<p>Ideally the compiler would be able to deduce the <code>&lt;string, int&gt;</code> part by noticing that we’re using it on a <code>KeyValuePair&lt;string, int&gt;</code>. This is difficult to implement in a subtyping-based language, though.</p></li>
<li><p><strong>Generic type aliases</strong>. <a href="http://comonad.com/reader/2012/mirrored-lenses/">The most general formulation of lenses</a> actually has <em>four</em> type parameters: <code>ILens&lt;in S, out T, out A, in B&gt;</code>! This is to support lenses into generic types, allowing you to change the type of the resulting structure by writing a different type into the lens. (<code>new ValueL().Set(new KeyValuePair&lt;string, string&gt;("foo", "bar"), 3)</code> should return a <code>KeyValuePair&lt;string, int&gt;</code> — that is, a new <code>KeyValuePair</code> with a different type to the original.)</p>
<p>The old <code>ILens&lt;S, A&gt;</code> is then equivalent to <code>ILens&lt;S, S, A, A&gt;</code>. Ideally we’d be able to define a <em>type alias</em>, so that you can type <code>ILens&lt;S, A&gt;</code> for <code>ILens&lt;S, S, A, A&gt;</code>, but C# doesn’t support this. (<a href="https://github.com/dotnet/roslyn/issues/3993">A modest proposed extension to <code>using</code></a> would largely service this complaint, reducing the noise to a few lines of boilerplate at the top of each file.)</p></li>
</ul></li>
<li><p><strong>Noisy syntax</strong>. Haskell allows you to define custom symbolic operators, and <code>lens</code> ships a large collection of operators to debigulate your code. <code>new CustomerL()._(new AddressL())._(new PostcodeL()).Get(order)</code> is clunky in comparison to Haskell’s cute OO-style <code>order^.customer.address.postcode</code>.</p>
<ul>
<li>Related to this concern is <strong>namespacing</strong>. Above I’ve used a convention of appending the letter <code>L</code> to lens classes (<code>CustomerL</code>), but that starts to break down when you have more than one property with the same name in your system. One option might be to nest the lenses inside the objects themselves and import them with <code>using static</code>.</li>
</ul></li>
<li><p><strong>Platform compatibility</strong>. According to <a href="https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/">a recent announcement</a>, default interface implementations are only going to be available on .NET Core, and won’t be in the desktop framework for the foreseeable future. As I understand it, the desktop CLR’s stringent backwards compatibility requirements make testing a wide-reaching CLR feature like this difficult and expensive. But to me, a library author, this is a very disappointing development: libraries <em>must</em> support the desktop CLR if they expect to have any users, so locking down features designed for library authors seems like a misfire. I’d prefer it if Microsoft just said directly that the desktop framework is being sunsetted — that way I’d at least have some ammunition for GitHub issues.</p></li>
</ul>
<p>All that said, there are a couple of things which I find preferable about this design when compared to <code>lens</code>. Haskell doesn’t feature subtyping directly, so <code>lens</code> uses a clever function-based encoding of its type hierarchy, using the type class solver to handle the various subtype relationships. Encoding lenses as functions is partly why <code>lens</code> is so fast, but it does make for a steep learning curve and notoriously confusing type errors. Using a more direct representation of subtyping means the model is clearer, and it’s easier to see how one would slot (eg) prisms or indexed lenses into the system I outlined above. What’s more, the four-parameter version of <code>ILens</code> I mentioned above is variously co- and contra-variant in its parameters, meaning it interoperates well with the rest of C#’s type hierarchy. In some sense these lenses are <em>more</em> composable than <code>lens</code>’s lenses.</p>
<p>I’d love to tell you I’ve written this up as a published library, but the shortfalls I noted above make this formulation of lenses impractical for real-world use. I’d love to hear your ideas on how to improve the situation! In the meantime, I bagsie the name <code>OptiCS</code>.</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on December  6, 2018</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/live/comments/2018-12-06-zooming-in-on-field-accessors/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Live-streaming</title>
    <link href="http://www.benjamin.pizza/posts/2018-07-16-live-streaming.html" />
    <id>http://www.benjamin.pizza/posts/2018-07-16-live-streaming.html</id>
    <published>2018-07-16T00:00:00Z</published>
    <updated>2018-07-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 16, 2018
    
</div>

<p>My esteemed colleague <a href="https://twitter.com/g3rv4?lang=en">Gervasio</a> and I have arranged to live-stream some programming <del>this Friday, the 20th of July</del> <strong>Update</strong>: we’ve decided to move it to next <strong>Tuesday, the 24th</strong>, at 2PM BST. We’re going to be working on adding some basic <code>Span</code> support to <a href="https://github.com/benjamin-hodgson/Pidgin">my parsing library</a>, and it’s going to involve <code>unsafe</code> and custom IL, which should be a bit of fun.</p>
<p>The stream will be <a href="https://www.youtube.com/watch?v=O23OLkQtiS4">on YouTube</a> and we’re planning to start at 2PM BST. Hope to see you there with your questions!</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Eighty</title>
    <link href="http://www.benjamin.pizza/posts/2018-03-16-eighty.html" />
    <id>http://www.benjamin.pizza/posts/2018-03-16-eighty.html</id>
    <published>2018-03-16T00:00:00Z</published>
    <updated>2018-03-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March 16, 2018
    
</div>

<p>HTML templating systems are great but they sure are complex. ASP.NET’s Razor, for example, is a whole new programming language! While Razor does happen to have a large chunk of C# embedded within it, and it works by generating and then compiling C# code, it’s still a separate language with a separate syntax, separate abstraction techniques, separate compiler tooling, a separate file type, and separate (and usually inferior) editor support. All this for a task as simple and common as generating HTML!</p>
<p>This overhead can be worth it if you’re building a complex web application, but for simple tools such as report generators or email batch mailers Razor is unwieldy. Many people in these situations resort to generating their own HTML, either by building strings manually or by imperatively building tags using .NET’s supplied XML manipulation APIs. But there’s a whole world of possible designs out there, and there’s a lot of space in between “complex templating language” and “build strings by hand”.</p>
<h2 id="eighty">Eighty</h2>
<p><a href="https://github.com/benjamin-hodgson/Eighty">Eighty</a> (as in <em>eigh-ty-M-L</em>) is my attempt at striking a balance between these two extremes: not so abstract as to constitute a separate programming language, but not so concrete that you have to manipulate XML tags or strings manually. It’s a simple embedded domain-specific language which piggybacks on C#’s syntax, enabling you to write code resembling the HTML you’re generating. Rather than embedding C# into an HTML generator, Eighty embeds an HTML generator into C#.</p>
<p>Here’s an example from <a href="https://github.com/benjamin-hodgson/Eighty/blob/master/README.md">the readme</a>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1"></a><span class="dt">var</span> html = <span class="fu">article</span>(@class: <span class="st">&quot;readme&quot;</span>)._(</span>
<span id="cb1-2"><a href="#cb1-2"></a>    <span class="fu">h1</span>(id: <span class="st">&quot;Eighty&quot;</span>)._(<span class="st">&quot;Eighty&quot;</span>),</span>
<span id="cb1-3"><a href="#cb1-3"></a>    <span class="fu">p_</span>(</span>
<span id="cb1-4"><a href="#cb1-4"></a>        <span class="st">&quot;Eighty (as in &quot;</span>,</span>
<span id="cb1-5"><a href="#cb1-5"></a>        <span class="fu">i_</span>(<span class="st">&quot;eigh-ty-M-L&quot;</span>),</span>
<span id="cb1-6"><a href="#cb1-6"></a>        <span class="st">&quot;) is a simple HTML generation library.&quot;</span></span>
<span id="cb1-7"><a href="#cb1-7"></a>    )</span>
<span id="cb1-8"><a href="#cb1-8"></a>);</span></code></pre></div>
<p>Eighty is organised around <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.Html.html">the <code>Html</code> class</a>, being an immutable chunk of HTML which knows how to render itself using <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.Html.html#Eighty_Html_Write_System_IO_TextWriter_">its <code>Write(TextWriter)</code> method</a>. <code>Html</code> defines a large collection of static methods (designed to be imported with <code>using static</code>), with names like <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.Html.html#Eighty_Html_h1_System_String_System_String_System_String_System_String_System_String_System_String_"><code>h1</code></a> and <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.Html.html#Eighty_Html_p_System_String_System_String_System_String_System_String_System_String_System_String_"><code>p</code></a>, which create <code>Html</code> values representing their respective tags, with a collection of children which are smaller <code>Html</code> values.</p>
<p>Eighty adopts some simple conventions for its HTML-esque domain-specific language:</p>
<ul>
<li>Tags are created using (lower-case) methods like <code>p()</code> and <code>i()</code>.</li>
<li>Attributes are passed as optional named arguments: <code>a(href: "benjamin.pizza", @class: "website-link")</code>. I can’t force you to name your arguments — you could pass them positionally — but that’s not a good idea.</li>
<li>A tag’s children are introduced using the <code>_</code> character, which can appear at the end of a method name or as a method name all by itself. <code>a(href: "benjamin.pizza")._("Visit my website")</code> creates an <code>a</code> tag with an <code>href</code> attribute and some text inside it; <code>p_("a paragraph of text")</code> represents a <code>p</code> tag with some text but no attributes. I chose <code>_</code> because it’s the least noisy character that can be used as an identifier in C#.</li>
<li>Strings can be implicitly converted to <code>Html</code> and are interpreted as HTML text. Text is HTML-encoded by default. You can opt out of this using the <code>Raw</code> method.</li>
</ul>
<h2 id="eighty-vs-razor">Eighty vs Razor</h2>
<p>Of course, C# code will only ever look <em>a bit</em> like HTML. Razor code looks much more like HTML than this! This can be a drawback when you’re working with designers who want to read and write HTML — I’m planning to write a tool to convert HTML text into an Eighty expression to partially ease this pain point. But Eighty has two big advantages which make it simpler and easier than Razor to program with:</p>
<ol type="1">
<li>It plugs into your existing system. You don’t require any extra tools to work with Eighty: if you can compile C#, you can use Eighty.</li>
<li>Programming with Eighty is <em>just programming</em>. <code>Html</code> instances are plain old immutable CLR objects, so you can use all your favourite techniques for abstraction and code reuse.</li>
</ol>
<p>To illustrate the second point, here are some examples of how you might emulate some of Razor’s programming constructs using Eighty. In many of these cases Eighty does a better job than Razor of allowing abstraction and code reuse, because Eighty is embedded within C# rather than layered on top of C#.</p>
<h3 id="models">Models</h3>
<p>In Razor, each view file you write declares a <em>model type</em> — the type of object it expects you to pass in to direct the generation of HTML. You use the <code>@model</code> directive at the top of your file, and then you can access members of the model in your Razor code.</p>
<pre class="cshtml"><code>@model ExampleModel

&lt;h1&gt;@Model.Title&lt;/h1&gt;</code></pre>
<p>One important disadvantage of Razor’s <code>@model</code> construct is that it is dynamically checked. The controller’s <code>View</code> method takes an <code>object</code> for the <code>model</code> parameter. You get a runtime error, without any feedback from the compiler, if you pass in a model whose type doesn’t match the view’s expected model type.</p>
<p>Since Eighty is embedded within C#, there’s no special syntax to declare the type of data a function depends on. You can just use a plain old parameter.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1"></a>Html <span class="fu">Example</span>(ExampleModel model)</span>
<span id="cb3-2"><a href="#cb3-2"></a>    =&gt; <span class="fu">h1_</span>(model.<span class="fu">Title</span>);</span></code></pre></div>
<p>Since a template is a regular C# method, it’s much easier to run in a unit test harness than Razor. You can just call the method and make assertions about the generated HTML, either by looking at the string directly or by parsing it and traversing the resultant DOM.</p>
<p>Eighty includes <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.IHtmlRenderer-1.html">an <code>IHtmlRenderer&lt;TModel&gt;</code> interface</a>, which captures this pattern of parameterising a chunk of HTML by a model, but its use is optional — it’s used primarily by Eighty’s ASP.NET integration packages.</p>
<h3 id="control-flow">Control flow</h3>
<p>Razor allows you to mix markup with C#’s control flow constructs such as <code>foreach</code> and <code>if</code>. Here’s a simple example of populating a <code>ul</code> based on a list of values:</p>
<pre class="cshtml"><code>&lt;ul&gt;
    @foreach (var item in Model.Items)
    {
        if (item.Visible)
        {
            &lt;li&gt;@item.Value&lt;/li&gt;
        }
    }
&lt;/ul&gt;</code></pre>
<p>With Eighty, it’s a question of building different <code>Html</code> values. You can use LINQ’s high-level functional looping constructs:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">return</span> <span class="fu">ul_</span>(</span>
<span id="cb5-2"><a href="#cb5-2"></a>    model.<span class="fu">Items</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>        .<span class="fu">Where</span>(item =&gt; item.<span class="fu">Visible</span>)</span>
<span id="cb5-4"><a href="#cb5-4"></a>        .<span class="fu">Select</span>(item =&gt; <span class="fu">li_</span>(item.<span class="fu">Value</span>))</span>
<span id="cb5-5"><a href="#cb5-5"></a>);</span></code></pre></div>
<p>Or you can write your own loop and build a list:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1"></a><span class="dt">var</span> lis = <span class="kw">new</span> List&lt;Html&gt;();</span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="kw">foreach</span> (<span class="dt">var</span> item <span class="kw">in</span> model.<span class="fu">Items</span>)</span>
<span id="cb6-3"><a href="#cb6-3"></a>{</span>
<span id="cb6-4"><a href="#cb6-4"></a>    <span class="kw">if</span> (item.<span class="fu">Visible</span>)</span>
<span id="cb6-5"><a href="#cb6-5"></a>    {</span>
<span id="cb6-6"><a href="#cb6-6"></a>        lis.<span class="fu">Add</span>(<span class="fu">li_</span>(item.<span class="fu">Value</span>));</span>
<span id="cb6-7"><a href="#cb6-7"></a>    }</span>
<span id="cb6-8"><a href="#cb6-8"></a>}</span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="kw">return</span> <span class="fu">ul_</span>(lis);</span></code></pre></div>
<p>Mixing markup with C# is not a problem, because markup <em>is</em> C#.</p>
<h3 id="partials-and-helpers">Partials and Helpers</h3>
<p>Razor’s two main tools for code reuse are <em>partial views</em> and <em>helpers</em>. For the purposes of this article, they’re roughly equivalent. Partial views can be returned directly from a controller but their model type is checked at runtime, whereas helpers’ parameters are checked by the compiler but they can only be invoked from within a Razor view.</p>
<p>Eighty handles both of these uses in the simplest of ways: <em>calling a function</em>. If I want to include an HTML snippet in more than one place, I can just extract it into a method returning an <code>Html</code> object. Transliterating an example from <a href="https://docs.microsoft.com/en-us/aspnet/web-pages/overview/ui-layouts-and-themes/creating-and-using-a-helper-in-an-aspnet-web-pages-site">the MVC documentation</a>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb7-1"><a href="#cb7-1"></a>Html <span class="fu">MakeNote</span>(<span class="dt">string</span> content)</span>
<span id="cb7-2"><a href="#cb7-2"></a>    =&gt; <span class="fu">div</span>(@class: <span class="st">&quot;note&quot;</span>)._(</span>
<span id="cb7-3"><a href="#cb7-3"></a>        <span class="fu">p_</span>(</span>
<span id="cb7-4"><a href="#cb7-4"></a>            <span class="fu">strong_</span>(<span class="st">&quot;Note&quot;</span>),</span>
<span id="cb7-5"><a href="#cb7-5"></a>            <span class="fu">Raw</span>(<span class="st">&quot;&amp;nbsp;&amp;nbsp; &quot;</span>),</span>
<span id="cb7-6"><a href="#cb7-6"></a>            content</span>
<span id="cb7-7"><a href="#cb7-7"></a>        )</span>
<span id="cb7-8"><a href="#cb7-8"></a>    );</span>
<span id="cb7-9"><a href="#cb7-9"></a></span>
<span id="cb7-10"><a href="#cb7-10"></a>Html <span class="fu">SomeHtmlContainingANote</span>()</span>
<span id="cb7-11"><a href="#cb7-11"></a>    =&gt; <span class="fu">article_</span>(</span>
<span id="cb7-12"><a href="#cb7-12"></a>        <span class="fu">p_</span>(<span class="st">&quot;This is some opening paragraph text&quot;</span>),</span>
<span id="cb7-13"><a href="#cb7-13"></a>        <span class="fu">MakeNote</span>(<span class="st">&quot;My test note content&quot;</span>),</span>
<span id="cb7-14"><a href="#cb7-14"></a>        <span class="fu">p_</span>(<span class="st">&quot;This is some following text&quot;</span>)</span>
<span id="cb7-15"><a href="#cb7-15"></a>    );</span></code></pre></div>
<p>This is the best of both worlds: types are checked by the compiler as usual, but the returned <code>Html</code> value is a perfectly good standalone chunk of HTML, and can be rendered separately if necessary.</p>
<p><code>Html</code> values being ordinary C# values, Eighty actually supports more types of reuse than Razor does. For example, you can pass a chunk of HTML as an argument, which is not easy to do with Razor:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb8-1"><a href="#cb8-1"></a>Html <span class="fu">RepeatFiveTimes</span>(Html html)</span>
<span id="cb8-2"><a href="#cb8-2"></a>    =&gt; <span class="fu">_</span>(Enumerable.<span class="fu">Repeat</span>(html, <span class="dv">5</span>));</span></code></pre></div>
<p>Since <code>Html</code> values are immutable, you can safely share them between different HTML documents, across different threads, etc. Sharing parts of your HTML document that don’t change can be an important optimisation.</p>
<h3 id="layouts">Layouts</h3>
<p>Razor lets you define a shared <em>layout</em> page, which acts as a template for the other pages in your application. For example, you might put the <code>html</code> and <code>body</code> tags in a layout page, and use the built in <code>RenderBody</code> helper to render the concrete page’s body inside the <code>body</code> tag. This is also where global navs and the like are defined.</p>
<p>One way to handle global layouts and sections in Eighty would be to define an abstract base class. Each section becomes an abstract method, allowing individual pages to fill in their own HTML for those sections.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">abstract</span> <span class="kw">class</span> Layout</span>
<span id="cb9-2"><a href="#cb9-2"></a>{</span>
<span id="cb9-3"><a href="#cb9-3"></a>    <span class="kw">public</span> Html <span class="fu">GetHtml</span>()</span>
<span id="cb9-4"><a href="#cb9-4"></a>        =&gt; <span class="fu">doctypeHtml_</span>(</span>
<span id="cb9-5"><a href="#cb9-5"></a>            <span class="fu">head</span>(</span>
<span id="cb9-6"><a href="#cb9-6"></a>                <span class="fu">link</span>(</span>
<span id="cb9-7"><a href="#cb9-7"></a>                    rel: <span class="st">&quot;stylesheet&quot;</span>,</span>
<span id="cb9-8"><a href="#cb9-8"></a>                    type: <span class="st">&quot;text/css&quot;</span>,</span>
<span id="cb9-9"><a href="#cb9-9"></a>                    href: <span class="st">&quot;default.css&quot;</span></span>
<span id="cb9-10"><a href="#cb9-10"></a>                ),</span>
<span id="cb9-11"><a href="#cb9-11"></a>                <span class="fu">Css</span>(),</span>
<span id="cb9-12"><a href="#cb9-12"></a>                <span class="fu">script</span>(</span>
<span id="cb9-13"><a href="#cb9-13"></a>                    type: <span class="st">&quot;text/javascript&quot;</span>,</span>
<span id="cb9-14"><a href="#cb9-14"></a>                    src: <span class="st">&quot;jquery-3.3.1.min.js&quot;</span></span>
<span id="cb9-15"><a href="#cb9-15"></a>                ),</span>
<span id="cb9-16"><a href="#cb9-16"></a>                <span class="fu">Js</span>()</span>
<span id="cb9-17"><a href="#cb9-17"></a>            ),</span>
<span id="cb9-18"><a href="#cb9-18"></a>            <span class="fu">body</span>(</span>
<span id="cb9-19"><a href="#cb9-19"></a>                <span class="fu">Body</span>()</span>
<span id="cb9-20"><a href="#cb9-20"></a>            )</span>
<span id="cb9-21"><a href="#cb9-21"></a>        );</span>
<span id="cb9-22"><a href="#cb9-22"></a></span>
<span id="cb9-23"><a href="#cb9-23"></a>    <span class="kw">protected</span> <span class="kw">abstract</span> Html <span class="fu">Css</span>();</span>
<span id="cb9-24"><a href="#cb9-24"></a>    <span class="kw">protected</span> <span class="kw">abstract</span> Html <span class="fu">Js</span>();</span>
<span id="cb9-25"><a href="#cb9-25"></a>    <span class="kw">protected</span> <span class="kw">abstract</span> Html <span class="fu">Body</span>();</span>
<span id="cb9-26"><a href="#cb9-26"></a>}</span></code></pre></div>
<p>Then, inheriting a layout is as easy as inheriting a class.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">class</span> DashboardPage : Layout</span>
<span id="cb10-2"><a href="#cb10-2"></a>{</span>
<span id="cb10-3"><a href="#cb10-3"></a>    <span class="kw">private</span> DashboardModel _model;</span>
<span id="cb10-4"><a href="#cb10-4"></a></span>
<span id="cb10-5"><a href="#cb10-5"></a>    <span class="kw">public</span> <span class="fu">Dashboard</span>(DashboardModel model)</span>
<span id="cb10-6"><a href="#cb10-6"></a>    {</span>
<span id="cb10-7"><a href="#cb10-7"></a>        _model = model;</span>
<span id="cb10-8"><a href="#cb10-8"></a>    }</span>
<span id="cb10-9"><a href="#cb10-9"></a></span>
<span id="cb10-10"><a href="#cb10-10"></a>    <span class="kw">protected</span> <span class="kw">override</span> Html <span class="fu">Css</span>()</span>
<span id="cb10-11"><a href="#cb10-11"></a>        =&gt; <span class="co">/* Dashboard-specific CSS */</span>;</span>
<span id="cb10-12"><a href="#cb10-12"></a></span>
<span id="cb10-13"><a href="#cb10-13"></a>    <span class="kw">protected</span> <span class="kw">override</span> Html <span class="fu">Js</span>()</span>
<span id="cb10-14"><a href="#cb10-14"></a>        =&gt; <span class="co">/* Dashboard-specific scripts */</span>;</span>
<span id="cb10-15"><a href="#cb10-15"></a></span>
<span id="cb10-16"><a href="#cb10-16"></a>    <span class="kw">protected</span> <span class="kw">override</span> Html <span class="fu">Body</span>()</span>
<span id="cb10-17"><a href="#cb10-17"></a>        =&gt; <span class="co">/* The body of the dashboard page */</span>;</span>
<span id="cb10-18"><a href="#cb10-18"></a>}</span></code></pre></div>
<h2 id="twenty">Twenty</h2>
<p>Eighty comes bundled with a second HTML generation library called Twenty. Twenty is harder to use correctly than Eighty, and its API is more verbose, but it’s faster.</p>
<p>HTML tags have to be balanced: every opening tag has to have a matching closing tag and vice versa. While an <code>Html</code> value is being written to a <code>TextWriter</code>, Eighty manages the stack of currently-open tags using the call stack. Each tag writes its opening tag, tells its children to write themselves, and then writes its closing tag. This is possible because <code>Html</code> is an ordinary reference type; the objects you build with methods like <code>p()</code> and <code>h1()</code> are tree-shaped objects representing a DOM of statically-unknown size.</p>
<p>Twenty instead takes an imperative view of HTML generation. Each tag method writes an opening tag to the <code>TextWriter</code> immediately, and returns an <code>IDisposable</code> which writes out the closing tag when it’s disposed. You, the programmer, use C#’s <code>using</code> statement to ensure that the <code>Dispose</code> method is called as soon as the children have been written. The structure of your HTML document is still visible in the code, but it’s present in the nesting of <code>using</code> statements, rather than by the structure of a tree-shaped object.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">class</span> MyHtmlBuilder : HtmlBuilder</span>
<span id="cb11-2"><a href="#cb11-2"></a>{</span>
<span id="cb11-3"><a href="#cb11-3"></a>    <span class="kw">protected</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">Build</span>()</span>
<span id="cb11-4"><a href="#cb11-4"></a>    {</span>
<span id="cb11-5"><a href="#cb11-5"></a>        <span class="kw">using</span> (<span class="fu">article</span>(@class: <span class="st">&quot;readme&quot;</span>))</span>
<span id="cb11-6"><a href="#cb11-6"></a>        {</span>
<span id="cb11-7"><a href="#cb11-7"></a>            <span class="kw">using</span> (<span class="fu">h1</span>(id: <span class="st">&quot;Eighty&quot;</span>))</span>
<span id="cb11-8"><a href="#cb11-8"></a>                <span class="fu">Text</span>(<span class="st">&quot;Eighty&quot;</span>);</span>
<span id="cb11-9"><a href="#cb11-9"></a>            <span class="kw">using</span> (<span class="fu">p</span>())</span>
<span id="cb11-10"><a href="#cb11-10"></a>            {</span>
<span id="cb11-11"><a href="#cb11-11"></a>                <span class="fu">Text</span>(<span class="st">&quot;Eighty (as in &quot;</span>);</span>
<span id="cb11-12"><a href="#cb11-12"></a>                <span class="kw">using</span> (<span class="fu">i</span>())</span>
<span id="cb11-13"><a href="#cb11-13"></a>                    <span class="fu">Text</span>(<span class="st">&quot;eigh-ty-M-L&quot;</span>);</span>
<span id="cb11-14"><a href="#cb11-14"></a>                <span class="fu">Text</span>(<span class="st">&quot;) is a simple HTML generation library.&quot;</span>);</span>
<span id="cb11-15"><a href="#cb11-15"></a>            }</span>
<span id="cb11-16"><a href="#cb11-16"></a>        }</span>
<span id="cb11-17"><a href="#cb11-17"></a>    }</span>
<span id="cb11-18"><a href="#cb11-18"></a>}</span></code></pre></div>
<p>Perhaps this is a bit of an abuse of <code>IDisposable</code>, and the <code>using</code> syntax is comparatively noisy, but this trick allows Twenty to operate quickly and without generating any garbage while still making for a reasonable DSL. Compared to Eighty, Twenty does lose out on some flexibility and safety:</p>
<ul>
<li>You mustn’t forget a <code>using</code> statement, or call <code>Dispose</code> more than once, or Twenty will output malformed HTML. Eighty, on the other hand, will never generate bad HTML (notwithstanding the use of <code>Raw</code>).</li>
<li>There’s no <code>Html</code> object — you can’t pass around chunks of HTML as first class values. This makes code reuse and abstraction somewhat more difficult.</li>
<li><code>HtmlBuilder</code> is not re-entrant. You can’t use the same <code>HtmlBuilder</code> from multiple threads.</li>
<li>There’s no <code>async</code> API, because there’s no way to call <code>Dispose</code> asynchronously.</li>
</ul>
<p>Given Twenty’s limitations, my advice is to write your markup using <code>Html</code>, and convert it to <code>HtmlBuilder</code> if you see that building <code>Html</code> values is a performance bottleneck.</p>
<h2 id="performance">Performance</h2>
<p>Eighty is pretty fast. I wrote a benchmark testing how long it takes to spit out around 30kB of HTML (with some encoding characters thrown in for good measure) while running in an in-memory hosted MVC application. Eighty’s synchronous code path does this around three times faster than Razor, and Twenty runs about 30% faster than that — so, four times faster than Razor.</p>
<p>What have I done to make Eighty fast? Honestly, not a huge amount. There are a only few interesting optimisations in Eighty’s codebase.</p>
<ul>
<li>Each call to <code>TextWriter</code>’s <code>Write</code> method is comparatively expensive, so rather than write individual snippets of HTML into the <code>TextWriter</code> directly, Eighty builds up a 4kB buffer and empties it out into the <code>TextWriter</code> when it fills up. The code to fill this buffer is a little fiddly, because you don’t know how long your input string is going to be after HTML-encoding it, so the HTML encoder has to write the encoded HTML in chunks. I toyed with a hand-written encoder, but I wanted to interoperate with ASP.NET’s pluggable <code>HtmlEncoder</code>, so I ended up calling that class’s low-level API.
<ul>
<li>The buffer is managed by <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/HtmlEncodingTextWriter.cs">a mutable struct</a> which is <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/Html.cs#L61-L63">stored on the stack and passed by reference</a> because mutable structs must never be copied. However, <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/AsyncHtmlEncodingTextWriter.cs">the async version</a> <em>cannot</em> be a struct because <code>async</code> methods copy their <code>this</code> variable into a field behind the scenes. My first version of the code used the same mutable struct for both paths, which caused me some head-scratching when the <code>async</code> version didn’t work!</li>
<li>There’s <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/Twenty/HtmlEncodingTextWriterReference.cs">a fun and dangerous hack</a> in Twenty’s codebase to allow storing a reference to one of these stack-allocated structs <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/Twenty/HtmlBuilder.cs">in a field</a>. This is safe as long as the reference in the field doesn’t live longer than the stack location to which it refers, but you don’t get any compile-time feedback about this (I just have to program carefully and hope I don’t make a mistake). This hack makes critical use of C# 7’s “<code>ref</code> return types”, so it wouldn’t have been possible a couple of years ago.</li>
</ul></li>
<li>Calling an <code>async</code> method is comparatively expensive, even if it never goes async, because of the way <code>async</code> methods are translated by the compiler into code which builds and then executes a state machine. In the case of Eighty’s frequently-called <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/AsyncHtmlEncodingTextWriter.cs#L149"><code>WriteRawImpl</code> method</a>, it’s predictable whether a call will complete synchronously (that is, without calling the underlying <code>TextWriter</code>’s <code>WriteAsync</code> method). <a href="https://github.com/benjamin-hodgson/Eighty/commit/1d6b5f45919363c978de05a5a849835cec6a773b#diff-c3aed398c4361803494b9d59237185e2">I split the <code>async</code> method into two parts</a> — a fast wrapper which synchronously returns a <code>Task</code> and an <code>async</code> method which is only called when necessary — and got a ~15% speedup in my end-to-end benchmarks.</li>
<li><code>Html</code> values make use of <code>ImmutableArray</code>s to store their children. <code>ImmutableArray</code> is a thin wrapper over a regular array, so if you have a <code>T[]</code> you should be able to turn it into an <code>ImmutableArray</code> in-place without copying the contents, as long as you’re careful never to modify the original array after freezing it. There are several places in Eighty where this is a safe optimisation, but <code>ImmutableArray</code> doesn’t have a public API to do this. However, since <code>ImmutableArray&lt;T&gt;</code> is a struct with a single private <code>T[]</code> field, its runtime representation is the same as <code>T[]</code>’s. This makes it possible to <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/ImmutableArrayFactory.cs#L45">unsafely coerce a <code>T[]</code> to an <code>ImmutableArray&lt;T&gt;</code></a> with no runtime cost.
<ul>
<li>I’ve opened <a href="https://github.com/dotnet/corefx/issues/28064">an issue in the <code>corefx</code> repo</a> proposing an officially-supported API for this use case.</li>
</ul></li>
</ul>
<p>I’m not sure exactly why Razor is slower by comparison. My guess is that Razor’s template compiler just tends to generate comparatively slow C# code — so there’s probably some room for improvement — but I would like to investigate this more.</p>
<hr />
<p>HTML generators are an example of a problem where the spectrum of possible solutions is very broad indeed. Just within the C# ecosystem there exists a menagerie of different templating languages, as well as imperative object-oriented APIs like <code>TagBuilder</code> and streaming APIs like <code>XmlWriter</code>. Even Eighty and Twenty, two implementations of the same idea, are substantially different. You can often find yourself somewhere quite interesting if you appreach a common problem from a different direction than the established solutions. What parts of the library ecosystem do you think you could do with a fresh perspective?</p>
<p>Eighty is available <a href="https://www.nuget.org/packages/Eighty">on Nuget</a>, along with some helpers to integrate Eighty with <a href="https://www.nuget.org/packages/Eighty.AspNet.Mvc">MVC</a> and <a href="https://www.nuget.org/packages/Eighty.AspNetCore">ASP.NET Core</a>. API docs are hosted <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.html">on this very domain</a>, and the code’s all <a href="https://github.com/benjamin-hodgson/Eighty">on GitHub</a> where contributions and bug reports are very welcome!</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on March 16, 2018</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/live/comments/2018-03-16-eighty/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Zip-Folding</title>
    <link href="http://www.benjamin.pizza/posts/2018-01-10-zip-folding.html" />
    <id>http://www.benjamin.pizza/posts/2018-01-10-zip-folding.html</id>
    <published>2018-01-10T00:00:00Z</published>
    <updated>2018-01-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 10, 2018
    
</div>

<p>One of my favourite little gems of functional programming is the following implementation of the dot product:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="ot">dot ::</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb1-2"><a href="#cb1-2"></a>xs <span class="ot">`dot`</span> ys <span class="ot">=</span> <span class="fu">sum</span> (<span class="fu">zipWith</span> (<span class="op">*</span>) xs ys)</span></code></pre></div>
<p><code>dot</code> zips two lists of numbers, multiplying each pair of elements using <code>(*)</code>, and then aggregates the results with <code>sum</code>. It’s like a <em>map-reduce</em> program, but it processes two collections, not one. It generalises rather beautifully to any zippily <code>Applicative</code> <code>Foldable</code> container whose elements form a <code>Semiring</code>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="ot">dot ::</span> (<span class="dt">Semiring</span> a, <span class="dt">Applicative</span> t, <span class="dt">Foldable</span> t) <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb2-2"><a href="#cb2-2"></a>xs <span class="ot">`dot`</span> ys <span class="ot">=</span> foldl&#39; (<span class="op">&lt;+&gt;</span>) zero (liftA2 (<span class="op">&lt;.&gt;</span>) xs ys)</span></code></pre></div>
<p>I think I’m particularly taken with this example because it combines three different abstractions in a totally natural way to produce a concise and generic implementation of a well-known program. It’s a beautiful demonstration of how these mathematical tools fit together. It also happens to be an example of a programming pattern that I call <em>zip-folding</em>.</p>
<hr />
<p>Until recently I felt rather embarrassed that my C# generic programming library <a href="https://github.com/benjamin-hodgson/Sawmill">Sawmill</a> didn’t have a good story for consuming more than one tree at a time. I had lots of tools for <a href="https://github.com/benjamin-hodgson/Sawmill/blob/b87687e67185ddc299ad67455bd7c79f97e066b2/Sawmill/Rewriter.SelfAndDescendants.cs">querying</a>, <a href="https://github.com/benjamin-hodgson/Sawmill/blob/b87687e67185ddc299ad67455bd7c79f97e066b2/Sawmill/Rewriter.Rewrite.cs">editing</a>, and <a href="https://github.com/benjamin-hodgson/Sawmill/blob/b87687e67185ddc299ad67455bd7c79f97e066b2/Sawmill/Rewriter.Fold.cs">tearing down</a> single trees, but nothing that could help you process two trees at once. This is a very common requirement - for example, if you’re unit testing a parser or a transformation pass, you need to compare the output tree to the one that you expected.</p>
<p>I got to thinking about what it means to zip two trees together - an operation which should make sense if you think of a tree as a container of subtrees. Pairing up nodes in a tree is straightforward, even if the two trees are unevenly shaped. You just pair up the children of each pair of nodes, ignoring those which don’t have a partner (the grey-coloured ones in the drawing):</p>
<p><img src="/images/2018-01-10-zip-folding/zip.jpg" alt="Pairing up nodes" width="900" /></p>
<p>But I got stuck on how to plug those paired nodes back into a single tree representing the zipped trees. Nodes typically have space for a fixed number of children, but pairing up children will typically change that number. That is, a binary operator has precisely two children, but when zipping two binary operators together you need to do something with four children.</p>
<p>And, more generally, what would it mean to zip trees recursively? You can imagine a scheme wherein each child of a node is replaced with a tuple of two children. But each child is really a subtree, with its own children, so the two subtrees need to be zipped - but that ought to produce a single tree, not a pair of trees. It’s contradictory! The intuitive idea that a node in a tree is a container of subtrees fails when you consider zipping.</p>
<hr />
<p>Guess where this is going: you can’t <em>zip</em> trees to produce a new tree, but you can <em>zip-fold</em> trees to produce a value. The idea is to take pairs of nodes in a tree and combine them with the results of zipping their children.</p>
<p>Let’s start by looking at (an abbreviated version of) Sawmill’s existing <code>Fold</code>. <code>Fold</code> says <em>if you give me a way to combine a node with the results of folding its children, I can recursively fold the entire tree to produce a single summary value</em>.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">public</span> <span class="kw">static</span> U Fold&lt;T, U&gt;(</span>
<span id="cb3-2"><a href="#cb3-2"></a>    <span class="kw">this</span> T value,</span>
<span id="cb3-3"><a href="#cb3-3"></a>    Func&lt;T, Children&lt;U&gt;, U&gt; func,</span>
<span id="cb3-4"><a href="#cb3-4"></a>) where T : IRewritable&lt;T&gt;</span>
<span id="cb3-5"><a href="#cb3-5"></a>    =&gt; <span class="fu">func</span>(</span>
<span id="cb3-6"><a href="#cb3-6"></a>        value,</span>
<span id="cb3-7"><a href="#cb3-7"></a>        value.<span class="fu">GetChildren</span>()</span>
<span id="cb3-8"><a href="#cb3-8"></a>            .<span class="fu">Select</span>(child =&gt; child.<span class="fu">Fold</span>(func))</span>
<span id="cb3-9"><a href="#cb3-9"></a>    );</span></code></pre></div>
<p>Revisiting <a href="https://www.benjamin.pizza/posts/2017-11-13-recursion-without-recursion.html">the JQL example</a>, <code>Fold</code> will take an input tree like <code>[c#] and (not [javascript] or salary:50000gbp)</code> and compute the expression:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1"></a><span class="fu">func</span>(</span>
<span id="cb4-2"><a href="#cb4-2"></a>    <span class="kw">new</span> <span class="fu">AndNode</span>(<span class="co">/* ... */</span>),</span>
<span id="cb4-3"><a href="#cb4-3"></a>    Children.<span class="fu">Two</span>(</span>
<span id="cb4-4"><a href="#cb4-4"></a>        <span class="fu">func</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;c#&quot;</span>), Children.<span class="fu">None</span>&lt;U&gt;()),</span>
<span id="cb4-5"><a href="#cb4-5"></a>        <span class="fu">func</span>(</span>
<span id="cb4-6"><a href="#cb4-6"></a>            <span class="kw">new</span> <span class="fu">OrNode</span>(<span class="co">/* ... */</span>),</span>
<span id="cb4-7"><a href="#cb4-7"></a>            Children.<span class="fu">Two</span>(</span>
<span id="cb4-8"><a href="#cb4-8"></a>                <span class="fu">func</span>(</span>
<span id="cb4-9"><a href="#cb4-9"></a>                    <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="co">/* ... */</span>),</span>
<span id="cb4-10"><a href="#cb4-10"></a>                    Children.<span class="fu">One</span>(</span>
<span id="cb4-11"><a href="#cb4-11"></a>                        <span class="fu">func</span>(</span>
<span id="cb4-12"><a href="#cb4-12"></a>                            <span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>),</span>
<span id="cb4-13"><a href="#cb4-13"></a>                            Children.<span class="fu">None</span>&lt;U&gt;()</span>
<span id="cb4-14"><a href="#cb4-14"></a>                        )</span>
<span id="cb4-15"><a href="#cb4-15"></a>                    )</span>
<span id="cb4-16"><a href="#cb4-16"></a>                ),</span>
<span id="cb4-17"><a href="#cb4-17"></a>                <span class="fu">func</span>(<span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>), Children.<span class="fu">None</span>&lt;U&gt;())</span>
<span id="cb4-18"><a href="#cb4-18"></a>            )</span>
<span id="cb4-19"><a href="#cb4-19"></a>        )</span>
<span id="cb4-20"><a href="#cb4-20"></a>    )</span>
<span id="cb4-21"><a href="#cb4-21"></a>)</span></code></pre></div>
<p><code>Fold</code> traverses a tree from bottom to top, applying <code>func</code> to each subtree and the current set of intermediate results.</p>
<p><code>ZipFold</code> works by analogy to <code>Fold</code>. It says <em>if you give me a way to combine two nodes with the results of zip-folding their children, I can recursively zip the two entire trees to produce a single summary value</em>. <code>ZipFold</code> pairs up the children of the two input nodes using the standard <code>Enumerable.Zip</code>, recursively zip-folds each pair, and then feeds the results to <code>func</code>. Note that the length of the <code>IEnumerable</code> that’s passed to <code>func</code> is the length of the smaller of the two nodes’ collections of children.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">public</span> <span class="kw">static</span> U ZipFold&lt;T, U&gt;(</span>
<span id="cb5-2"><a href="#cb5-2"></a>    <span class="kw">this</span> T value1,</span>
<span id="cb5-3"><a href="#cb5-3"></a>    T value2</span>
<span id="cb5-4"><a href="#cb5-4"></a>    Func&lt;T, T, IEnumerable&lt;U&gt;, U&gt; zipFunc,</span>
<span id="cb5-5"><a href="#cb5-5"></a>) where T : IRewritable&lt;T&gt;</span>
<span id="cb5-6"><a href="#cb5-6"></a>    =&gt; <span class="fu">zipFunc</span>(</span>
<span id="cb5-7"><a href="#cb5-7"></a>        value1,</span>
<span id="cb5-8"><a href="#cb5-8"></a>        value2,</span>
<span id="cb5-9"><a href="#cb5-9"></a>        value1.<span class="fu">GetChildren</span>().<span class="fu">Zip</span>(</span>
<span id="cb5-10"><a href="#cb5-10"></a>            value2.<span class="fu">GetChildren</span>(),</span>
<span id="cb5-11"><a href="#cb5-11"></a>            (child1, child2) =&gt; child1.<span class="fu">ZipFold</span>(child2, zipFunc)</span>
<span id="cb5-12"><a href="#cb5-12"></a>        )</span>
<span id="cb5-13"><a href="#cb5-13"></a>    );</span></code></pre></div>
<p>The two trees are zipped together and torn down in a single pass.</p>
<p>Here’s how it looks in Haskell, using the <a href="https://hackage.haskell.org/package/lens-4.15.4/docs/Control-Lens-Plated.html"><code>Control.Lens.Plated</code></a> API. Haskellers like to use tongue-in-cheek Greek names for recursion schemes. Apparently the Greek word for “zip” is “fermouár”, so I’m calling this a <em>fermomorphism</em>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="ot">fermo ::</span> <span class="dt">Plated</span> a <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [r] <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> r</span>
<span id="cb6-2"><a href="#cb6-2"></a>fermo f x y <span class="ot">=</span> f x y <span class="op">$</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>    <span class="fu">zipWith</span> (fermo f) (toListOf plate x) (toListOf plate y)</span></code></pre></div>
<p>As an example: <code>ZipFold</code> allows you to concisely test a pair of trees for equality, by looking only at one pair of nodes at a time.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">public</span> <span class="kw">static</span> <span class="dt">bool</span> <span class="fu">Equal</span>(JqlNode j1, JqlNode j2)</span>
<span id="cb7-2"><a href="#cb7-2"></a>    =&gt; j1.<span class="fu">ZipFold</span>&lt;JqlNode, <span class="dt">bool</span>&gt;(</span>
<span id="cb7-3"><a href="#cb7-3"></a>        j2,</span>
<span id="cb7-4"><a href="#cb7-4"></a>        (n1, n2, childrenEqual) =&gt;</span>
<span id="cb7-5"><a href="#cb7-5"></a>        {</span>
<span id="cb7-6"><a href="#cb7-6"></a>            <span class="kw">switch</span> (n1)</span>
<span id="cb7-7"><a href="#cb7-7"></a>            {</span>
<span id="cb7-8"><a href="#cb7-8"></a>                <span class="kw">case</span> SalaryNode s1 when n2 <span class="kw">is</span> SalaryNode s2:</span>
<span id="cb7-9"><a href="#cb7-9"></a>                    <span class="kw">return</span> s1.<span class="fu">Currency</span> == s2.<span class="fu">Currency</span></span>
<span id="cb7-10"><a href="#cb7-10"></a>                        &amp;&amp; s1.<span class="fu">Amount</span> == s2.<span class="fu">Amount</span>;</span>
<span id="cb7-11"><a href="#cb7-11"></a>                <span class="kw">case</span> TagNode t1 when n2 <span class="kw">is</span> TagNode t2:</span>
<span id="cb7-12"><a href="#cb7-12"></a>                    <span class="kw">return</span> t1.<span class="fu">Tag</span> == t2.<span class="fu">Tag</span>;</span>
<span id="cb7-13"><a href="#cb7-13"></a>                <span class="kw">case</span> AndNode a1 when n2 <span class="kw">is</span> AndNode a2:</span>
<span id="cb7-14"><a href="#cb7-14"></a>                <span class="kw">case</span> OrNode o1 when n2 <span class="kw">is</span> OrNode o2:</span>
<span id="cb7-15"><a href="#cb7-15"></a>                <span class="kw">case</span> NotNode a1 when n2 <span class="kw">is</span> NotNode a2:</span>
<span id="cb7-16"><a href="#cb7-16"></a>                    <span class="kw">return</span> childrenEqual.<span class="fu">All</span>(c =&gt; c);</span>
<span id="cb7-17"><a href="#cb7-17"></a>                <span class="kw">default</span>:</span>
<span id="cb7-18"><a href="#cb7-18"></a>                    <span class="kw">return</span> <span class="kw">false</span>;</span>
<span id="cb7-19"><a href="#cb7-19"></a>            }</span>
<span id="cb7-20"><a href="#cb7-20"></a>        }</span>
<span id="cb7-21"><a href="#cb7-21"></a>    );</span></code></pre></div>
<p>The <code>ZipFold</code> that you’ll find in Sawmill is actually an <em>n</em>-ary zip-fold. Instead of taking two <code>T</code>s, and passing two <code>T</code>s to <code>func</code>, it works with an arbitrary number of <code>T</code>s. Here’s the code:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">public</span> <span class="kw">static</span> U ZipFold&lt;T, U&gt;(</span>
<span id="cb8-2"><a href="#cb8-2"></a>    <span class="kw">this</span> T[] values,</span>
<span id="cb8-3"><a href="#cb8-3"></a>    Func&lt;T[], IEnumerable&lt;U&gt;, U&gt; func,</span>
<span id="cb8-4"><a href="#cb8-4"></a>) where T : IRewritable&lt;T&gt;</span>
<span id="cb8-5"><a href="#cb8-5"></a>    =&gt; <span class="fu">func</span>(values, xs.<span class="fu">ZipChildren</span>(children =&gt; children.<span class="fu">ZipFold</span>(func)));</span>
<span id="cb8-6"><a href="#cb8-6"></a></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="kw">private</span> <span class="kw">static</span> IEnumerable&lt;U&gt; ZipChildren&lt;T, U&gt;(</span>
<span id="cb8-8"><a href="#cb8-8"></a>    <span class="kw">this</span> T[] input,</span>
<span id="cb8-9"><a href="#cb8-9"></a>    Func&lt;T[], U&gt; zipFunc</span>
<span id="cb8-10"><a href="#cb8-10"></a>) where T : IRewritable&lt;T&gt;</span>
<span id="cb8-11"><a href="#cb8-11"></a>{</span>
<span id="cb8-12"><a href="#cb8-12"></a>    <span class="dt">var</span> enumerators = input</span>
<span id="cb8-13"><a href="#cb8-13"></a>        .<span class="fu">Select</span>(x =&gt; x.<span class="fu">GetChildren</span>().<span class="fu">GetEnumerator</span>())</span>
<span id="cb8-14"><a href="#cb8-14"></a>        .<span class="fu">ToArray</span>();</span>
<span id="cb8-15"><a href="#cb8-15"></a></span>
<span id="cb8-16"><a href="#cb8-16"></a>    <span class="kw">while</span> (enumerators.<span class="fu">All</span>(e =&gt; e.<span class="fu">MoveNext</span>()))</span>
<span id="cb8-17"><a href="#cb8-17"></a>    {</span>
<span id="cb8-18"><a href="#cb8-18"></a>        <span class="kw">yield</span> <span class="kw">return</span> <span class="fu">zipFunc</span>(</span>
<span id="cb8-19"><a href="#cb8-19"></a>            enumerators.<span class="fu">Select</span>(e =&gt; e.<span class="fu">Current</span>).<span class="fu">ToArray</span>()</span>
<span id="cb8-20"><a href="#cb8-20"></a>        );</span>
<span id="cb8-21"><a href="#cb8-21"></a>    }</span>
<span id="cb8-22"><a href="#cb8-22"></a>}</span></code></pre></div>
<p>Sadly, the invariant that <code>zipFunc</code> receives the same number of <code>T</code>s as were passed to <code>ZipFold</code> is not expressible in C#’s type system. So as a consumer of <code>ZipFold</code>, you just have to trust that <code>zipFunc</code>’s argument is of a certain size. In the <code>Equal</code> example, that size is two, because we’re consuming two trees:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">public</span> <span class="kw">static</span> <span class="dt">bool</span> <span class="fu">Equal</span>(JqlNode j1, JqlNode j2)</span>
<span id="cb9-2"><a href="#cb9-2"></a>    =&gt; <span class="kw">new</span>[] { j1, j2 }.<span class="fu">ZipFold</span>&lt;JqlNode, <span class="dt">bool</span>&gt;(</span>
<span id="cb9-3"><a href="#cb9-3"></a>        (ns, childrenEqual) =&gt;</span>
<span id="cb9-4"><a href="#cb9-4"></a>        {</span>
<span id="cb9-5"><a href="#cb9-5"></a>            <span class="kw">switch</span> (ns[<span class="dv">0</span>])</span>
<span id="cb9-6"><a href="#cb9-6"></a>            {</span>
<span id="cb9-7"><a href="#cb9-7"></a>                <span class="kw">case</span> SalaryNode s1 when ns[<span class="dv">1</span>] <span class="kw">is</span> SalaryNode s2:</span>
<span id="cb9-8"><a href="#cb9-8"></a>                    <span class="kw">return</span> s1.<span class="fu">Currency</span> == s2.<span class="fu">Currency</span></span>
<span id="cb9-9"><a href="#cb9-9"></a>                        &amp;&amp; s1.<span class="fu">Amount</span> == s2.<span class="fu">Amount</span>;</span>
<span id="cb9-10"><a href="#cb9-10"></a>                <span class="kw">case</span> TagNode t1 when ns[<span class="dv">1</span>] <span class="kw">is</span> TagNode t2:</span>
<span id="cb9-11"><a href="#cb9-11"></a>                    <span class="kw">return</span> t1.<span class="fu">Tag</span> == t2.<span class="fu">Tag</span>;</span>
<span id="cb9-12"><a href="#cb9-12"></a>                <span class="kw">case</span> AndNode a1 when ns[<span class="dv">1</span>] <span class="kw">is</span> AndNode a2:</span>
<span id="cb9-13"><a href="#cb9-13"></a>                <span class="kw">case</span> OrNode o1 when ns[<span class="dv">1</span>] <span class="kw">is</span> OrNode o2:</span>
<span id="cb9-14"><a href="#cb9-14"></a>                <span class="kw">case</span> NotNode n1 when ns[<span class="dv">1</span>] <span class="kw">is</span> NotNode n2:</span>
<span id="cb9-15"><a href="#cb9-15"></a>                    <span class="kw">return</span> childrenEqual.<span class="fu">All</span>(c =&gt; c);</span>
<span id="cb9-16"><a href="#cb9-16"></a>                <span class="kw">default</span>:</span>
<span id="cb9-17"><a href="#cb9-17"></a>                    <span class="kw">return</span> <span class="kw">false</span>;</span>
<span id="cb9-18"><a href="#cb9-18"></a>            }</span>
<span id="cb9-19"><a href="#cb9-19"></a>        }</span>
<span id="cb9-20"><a href="#cb9-20"></a>    );</span></code></pre></div>
<p>Here’s the Haskell transliteration of this <em>n</em>-ary zip-fold function, which <code>traverse</code>s in the <code>ZipList</code> <code>Applicative</code> to concisely zip <em>n</em> lists of children:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="ot">fermo ::</span> <span class="dt">Plated</span> a <span class="ot">=&gt;</span> ([a] <span class="ot">-&gt;</span> [r] <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> r</span>
<span id="cb10-2"><a href="#cb10-2"></a>fermo f xs <span class="ot">=</span> f xs (</span>
<span id="cb10-3"><a href="#cb10-3"></a>    <span class="fu">map</span> (fermo f) <span class="op">$</span> getZipList <span class="op">$</span> <span class="fu">traverse</span> (<span class="dt">ZipList</span> <span class="op">.</span> toListOf plate) xs</span>
<span id="cb10-4"><a href="#cb10-4"></a>    )</span></code></pre></div>
<p><code>ZipFold</code> is available in <a href="https://www.nuget.org/packages/Sawmill/">version 1.3.0 of Sawmill</a>.</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on January 10, 2018</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/live/comments/2018-01-10-zip-folding/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Functor Functors</title>
    <link href="http://www.benjamin.pizza/posts/2017-12-15-functor-functors.html" />
    <id>http://www.benjamin.pizza/posts/2017-12-15-functor-functors.html</id>
    <published>2017-12-15T00:00:00Z</published>
    <updated>2017-12-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December 15, 2017
    
</div>

<p>You can teach a new dog old tricks.</p>
<p>One of the fun things about category theory is that once you’ve learned an idea in one context it’s easy to apply it to another one. Of the numerous categories available to Haskell programmers, <strong>Hask</strong>, the category of Haskell types and functions, gets the lion’s share of the attention. Working with standard abstractions in more overlooked categories is a great way to reuse ideas: it makes you look clever, like you’ve invented something new, but actually all you’ve done is put the building blocks together differently. I won’t tell if you don’t.</p>
<h2 id="templates-reusable-records">Templates: Reusable Records</h2>
<p>Every now and then I’ll see a question on Stack Overflow or Reddit in which a programmer is trying to work with a bunch of record types which share a similar structure. For a contrived example, in a shopping system you may want to differentiate between completed checkout forms, which are ready to be dispatched, and “draft” checkout forms, which the user is currently filling in. The simplest way to do this is to build separate types, and write a function to upgrade a draft form to a regular form if all of its fields are filled in.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">data</span> <span class="dt">CardType</span> <span class="ot">=</span> <span class="dt">Visa</span> <span class="op">|</span> <span class="dt">AmEx</span> <span class="op">|</span> <span class="dt">Mastercard</span></span>
<span id="cb1-2"><a href="#cb1-2"></a></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">data</span> <span class="dt">Form</span> <span class="ot">=</span> <span class="dt">Form</span> {</span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="ot">    form_email ::</span> <span class="dt">Text</span>,</span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="ot">    form_cardType ::</span> <span class="dt">CardType</span>,</span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="ot">    form_cardNumber ::</span> <span class="dt">Text</span>,</span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="ot">    form_cardExpiry ::</span> <span class="dt">Day</span></span>
<span id="cb1-8"><a href="#cb1-8"></a>}</span>
<span id="cb1-9"><a href="#cb1-9"></a></span>
<span id="cb1-10"><a href="#cb1-10"></a><span class="kw">data</span> <span class="dt">DraftForm</span> <span class="ot">=</span> <span class="dt">DraftForm</span> {</span>
<span id="cb1-11"><a href="#cb1-11"></a><span class="ot">    draftForm_email ::</span> <span class="dt">Maybe</span> <span class="dt">Text</span>,</span>
<span id="cb1-12"><a href="#cb1-12"></a><span class="ot">    draftForm_cardType ::</span> <span class="dt">Maybe</span> <span class="dt">CardType</span>,</span>
<span id="cb1-13"><a href="#cb1-13"></a><span class="ot">    draftForm_cardNumber ::</span> <span class="dt">Maybe</span> <span class="dt">Text</span>,</span>
<span id="cb1-14"><a href="#cb1-14"></a><span class="ot">    draftForm_cardExpiry ::</span> <span class="dt">Maybe</span> <span class="dt">Day</span></span>
<span id="cb1-15"><a href="#cb1-15"></a>}</span>
<span id="cb1-16"><a href="#cb1-16"></a></span>
<span id="cb1-17"><a href="#cb1-17"></a><span class="ot">toForm ::</span> <span class="dt">DraftForm</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Form</span></span>
<span id="cb1-18"><a href="#cb1-18"></a>toForm (<span class="dt">DraftForm</span></span>
<span id="cb1-19"><a href="#cb1-19"></a>    (<span class="dt">Just</span> email)</span>
<span id="cb1-20"><a href="#cb1-20"></a>    (<span class="dt">Just</span> cardType)</span>
<span id="cb1-21"><a href="#cb1-21"></a>    (<span class="dt">Just</span> cardNumber)</span>
<span id="cb1-22"><a href="#cb1-22"></a>    (<span class="dt">Just</span> cardExpiry)) <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span></span>
<span id="cb1-23"><a href="#cb1-23"></a>        <span class="dt">Form</span> email cardType cardNumber cardExpiry</span>
<span id="cb1-24"><a href="#cb1-24"></a>toForm _ <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>Now, the standard trick to de-duplicate these two types is to derive both from what I’ll call a <em>template</em> type, wrapping each field of the template in some type constructor <code>f</code>. You recover <code>Form</code> by setting <code>f</code> to the boring <code>Identity</code> functor, and you get <code>DraftForm</code> by setting <code>f</code> to <code>Maybe</code>.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">data</span> <span class="dt">FormTemplate</span> f <span class="ot">=</span> <span class="dt">FormTemplate</span> {</span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="ot">    _email ::</span> f <span class="dt">Text</span>,</span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="ot">    _cardType ::</span> f <span class="dt">CardType</span>,</span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="ot">    _cardNumber ::</span> f <span class="dt">Text</span>,</span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="ot">    _cardExpiry ::</span> f <span class="dt">Day</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>}</span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="kw">type</span> <span class="dt">Form</span> <span class="ot">=</span> <span class="dt">FormTemplate</span> <span class="dt">Identity</span></span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="kw">type</span> <span class="dt">DraftForm</span> <span class="ot">=</span> <span class="dt">FormTemplate</span> <span class="dt">Maybe</span></span></code></pre></div>
<p>So a template is a record type parameterised by a type constructor. It’ll generally have a kind of <code>(* -&gt; *) -&gt; *</code>. The fields of the record are the type constructor applied to a variety of different type arguments. Working with a template typically involves coming up with an interesting type constructor <code>(* -&gt; *)</code> and plugging it in to get interestingly-typed fields. You can think of a record as a container of <code>f</code>s.</p>
<p>This trick has become Haskell folklore - I couldn’t tell you where I first saw it - but I’ve only seen a few people talk about what happens when you treat templates as first class citizens. To get used to this style, a simple example is giving names to specific instantiations of arbitrary templates:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">type</span> <span class="dt">Record</span> t <span class="ot">=</span> t <span class="dt">Identity</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">type</span> <span class="dt">Partial</span> t <span class="ot">=</span> t <span class="dt">Maybe</span></span>
<span id="cb3-3"><a href="#cb3-3"></a></span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="kw">type</span> <span class="dt">Form</span> <span class="ot">=</span> <span class="dt">Record</span> <span class="dt">FormTemplate</span></span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="kw">type</span> <span class="dt">DraftForm</span> <span class="ot">=</span> <span class="dt">Partial</span> <span class="dt">FormTemplate</span></span></code></pre></div>
<p>The rest of this blog post is about treating template types intuitively as fixed-size containers of functors. I’ll be taking familiar tools for working with containers of <em>values</em> - <code>Functor</code>, <code>Traversable</code>, <code>Representable</code> - and applying them to the context of containers of <em>functors</em>.</p>
<h2 id="functors-from-the-category-of-endofunctors">Functors from the Category of Endofunctors</h2>
<p>In Haskell, categories are represented as a <em>kind</em> <code>k</code> of objects and a <em>type constructor</em> <code>c :: k -&gt; k -&gt; *</code> of morphisms between those objects. If the category <code>C</code> has objects in <code>k1</code> and morphisms in <code>c</code>, and <code>D</code> has objects in <code>k2</code> and morphisms in <code>d</code>, then a functor from <code>C</code> to <code>D</code> is a type constructor <code>f :: k1 -&gt; k2</code> mapping objects paired with an operation <code>fmap :: c a b -&gt; d (f a) (f b)</code> mapping the morphisms. The standard <code>Functor</code> class is for <em>endofunctors on <strong>Hask</strong></em> - the special case in which <code>k1 ~ k2 ~ *</code> and <code>c ~ d ~ (-&gt;)</code>.</p>
<p><img src="/images/2017-12-15-functor-functors/hask.jpg" alt="Endofunctors on Hask" width="900" /></p>
<p>Given two categories <code>C</code> and <code>D</code>, you can construct the category of functors between <code>C</code> and <code>D</code>, written as <code>[C, D]</code>. Objects in this category are functors from <code>C</code> to <code>D</code>, and morphisms are natural transformations between those functors. Since <code>[C, D]</code> is a regular category, you can of course have functors mapping that category to other categories. So in Haskell that’d be a type of kind <code>(k1 -&gt; k2) -&gt; k3</code>. I’ll call such types <em>functor functors</em>.</p>
<p>We’re talking about record templates of kind <code>(* -&gt; *) -&gt; *</code>. This fits the pattern of a functor from the functor category, with <code>k1 ~ k2 ~ k3 ~ *</code>. So the functor category in question is the category of endofunctors on <strong>Hask</strong> (that is, members of the standard <code>Functor</code> class), and the destination category is <strong>Hask</strong>. So it’s reasonable to expect record templates to be functorial in their argument:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">-- natural transformations between functors f and g</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="kw">type</span> f <span class="op">~&gt;</span> g <span class="ot">=</span> <span class="kw">forall</span> x<span class="op">.</span> f x <span class="ot">-&gt;</span> g x</span>
<span id="cb4-3"><a href="#cb4-3"></a></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="co">-- &quot;functor functors&quot;, functors from the functor category</span></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="kw">class</span> <span class="dt">FFunctor</span> f <span class="kw">where</span></span>
<span id="cb4-6"><a href="#cb4-6"></a><span class="ot">    ffmap ::</span> (<span class="dt">Functor</span> g, <span class="dt">Functor</span> h) <span class="ot">=&gt;</span> (g <span class="op">~&gt;</span> h) <span class="ot">-&gt;</span> f g <span class="ot">-&gt;</span> f h</span>
<span id="cb4-7"><a href="#cb4-7"></a></span>
<span id="cb4-8"><a href="#cb4-8"></a><span class="kw">instance</span> <span class="dt">FFunctor</span> <span class="dt">FormTemplate</span> <span class="kw">where</span></span>
<span id="cb4-9"><a href="#cb4-9"></a>    ffmap eta (<span class="dt">FormTemplate</span> email cardType cardNumber cardExpiry)</span>
<span id="cb4-10"><a href="#cb4-10"></a>        <span class="ot">=</span> <span class="dt">FormTemplate</span></span>
<span id="cb4-11"><a href="#cb4-11"></a>            (eta email)</span>
<span id="cb4-12"><a href="#cb4-12"></a>            (eta cardType)</span>
<span id="cb4-13"><a href="#cb4-13"></a>            (eta cardNumber)</span>
<span id="cb4-14"><a href="#cb4-14"></a>            (eta cardExpiry)</span></code></pre></div>
<p><code>FFunctor</code> comes with the usual functor laws. The only difference is the types.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">-- identity</span></span>
<span id="cb5-2"><a href="#cb5-2"></a>ffmap <span class="fu">id</span> <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb5-3"><a href="#cb5-3"></a></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="co">-- composition</span></span>
<span id="cb5-5"><a href="#cb5-5"></a>ffmap (eta <span class="op">.</span> phi) <span class="ot">=</span> ffmap eta <span class="op">.</span> ffmap phi</span></code></pre></div>
<p><img src="/images/2017-12-15-functor-functors/ffunctor.jpg" alt="Functor functors" width="900" /></p>
<p><code>ffmap</code> encodes the notion of generalising the functor a template has been instantiated with. If you can embed the functor <code>f</code> into <code>g</code>, then you can map a record of <code>f</code>s to a record of <code>g</code>s by embedding each <code>f</code>. (This is also sometimes called “hoisting”.) For example, the boring <code>Identity</code> functor can be embedded into an arbitrary <code>Applicative</code> by injecting the contained value using <code>pure</code>. We can use this to turn a total record into a partial one:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="ot">generalise ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> <span class="dt">Identity</span> a <span class="ot">-&gt;</span> f a</span>
<span id="cb6-2"><a href="#cb6-2"></a>generalise (<span class="dt">Identity</span> x) <span class="ot">=</span> <span class="fu">pure</span> x</span>
<span id="cb6-3"><a href="#cb6-3"></a></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="ot">toPartial ::</span> <span class="dt">FFunctor</span> t <span class="ot">=&gt;</span> <span class="dt">Record</span> t <span class="ot">-&gt;</span> <span class="dt">Partial</span> t</span>
<span id="cb6-5"><a href="#cb6-5"></a>toPartial <span class="ot">=</span> ffmap generalise</span></code></pre></div>
<h2 id="traversing-records">Traversing Records</h2>
<p>Now that we have a new dog, it’s natural to ask which old tricks we can teach it. With the intuition that a template <code>t f</code> is like a container of <code>f</code>s, what does it mean to traverse such a container? <code>sequenceA :: Applicative f =&gt; t (f a) -&gt; f (t a)</code> takes a container of strategies to produce values and sequences them to get a strategy to produce a container of values. Replacing <em>value</em> with <em>functor</em> in the above sentence, it’s clear that we need to decide on a notion of “strategy to produce a functor”. <a href="https://stackoverflow.com/questions/44187945/what-should-a-higher-order-traversable-class-look-like">With thanks to Li-yao Xia</a>, the simplest of such notions is a regular applicative functor <code>a</code> returning a functorial value <code>g x</code> - that is, <code>Compose a g</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">class</span> <span class="dt">FFunctor</span> t <span class="ot">=&gt;</span> <span class="dt">FTraversable</span> t <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="ot">    ftraverse ::</span> (<span class="dt">Functor</span> f, <span class="dt">Functor</span> g, <span class="dt">Applicative</span> a)</span>
<span id="cb7-3"><a href="#cb7-3"></a>              <span class="ot">=&gt;</span> (f <span class="op">~&gt;</span> <span class="dt">Compose</span> a g) <span class="ot">-&gt;</span> t f <span class="ot">-&gt;</span> a (t g)</span>
<span id="cb7-4"><a href="#cb7-4"></a>    ftraverse eta <span class="ot">=</span> fsequence <span class="op">.</span> ffmap eta</span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="ot">    fsequence ::</span> (<span class="dt">Functor</span> f, <span class="dt">Applicative</span> a)</span>
<span id="cb7-6"><a href="#cb7-6"></a>              <span class="ot">=&gt;</span> t (<span class="dt">Compose</span> a f) <span class="ot">-&gt;</span> a (t f)</span>
<span id="cb7-7"><a href="#cb7-7"></a>    fsequence <span class="ot">=</span> ftraverse <span class="fu">id</span></span>
<span id="cb7-8"><a href="#cb7-8"></a></span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="ot">ffmapDefault ::</span> (<span class="dt">Functor</span> f, <span class="dt">Functor</span> g, <span class="dt">FTraversable</span> t)</span>
<span id="cb7-10"><a href="#cb7-10"></a>             <span class="ot">=&gt;</span> (f <span class="op">~&gt;</span> g) <span class="ot">-&gt;</span> t f <span class="ot">-&gt;</span> t g</span>
<span id="cb7-11"><a href="#cb7-11"></a>ffmapDefault eta <span class="ot">=</span></span>
<span id="cb7-12"><a href="#cb7-12"></a>    runIdentity <span class="op">.</span> ftraverse (<span class="dt">Compose</span> <span class="op">.</span> <span class="dt">Identity</span> <span class="op">.</span> eta)</span>
<span id="cb7-13"><a href="#cb7-13"></a></span>
<span id="cb7-14"><a href="#cb7-14"></a><span class="ot">fsequence&#39; ::</span> (<span class="dt">FTraversable</span> t, <span class="dt">Applicative</span> a) <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> a (<span class="dt">Record</span> t)</span>
<span id="cb7-15"><a href="#cb7-15"></a>fsequence&#39; <span class="ot">=</span> ftraverse (<span class="dt">Compose</span> <span class="op">.</span> <span class="fu">fmap</span> <span class="dt">Identity</span>)</span></code></pre></div>
<p>The <code>FTraversable</code> laws come about by adjusting the <code>Traversable</code> laws to add some <code>Compose</code>-bookkeeping.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="co">-- naturality</span></span>
<span id="cb8-2"><a href="#cb8-2"></a>nu <span class="op">.</span> ftraverse eta <span class="ot">=</span> ftraverse (<span class="dt">Compose</span> <span class="op">.</span> nu <span class="op">.</span> getCompose <span class="op">.</span> eta)</span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="co">-- for any applicative transformation nu</span></span>
<span id="cb8-4"><a href="#cb8-4"></a></span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="co">-- identity</span></span>
<span id="cb8-6"><a href="#cb8-6"></a>ftraverse (<span class="dt">Compose</span> <span class="op">.</span> <span class="dt">Identity</span>) <span class="ot">=</span> <span class="dt">Identity</span></span>
<span id="cb8-7"><a href="#cb8-7"></a></span>
<span id="cb8-8"><a href="#cb8-8"></a><span class="co">-- composition</span></span>
<span id="cb8-9"><a href="#cb8-9"></a>ftraverse (<span class="dt">Compose</span> <span class="op">.</span> <span class="dt">Compose</span> <span class="op">.</span> <span class="fu">fmap</span> (getCompose<span class="op">.</span>phi) <span class="op">.</span> getCompose <span class="op">.</span> eta)</span>
<span id="cb8-10"><a href="#cb8-10"></a>    <span class="ot">=</span> <span class="dt">Compose</span> <span class="op">.</span> <span class="fu">fmap</span> (ftraverse phi) <span class="op">.</span> ftraverse eta</span></code></pre></div>
<p>Implementations of <code>traverse</code> look like implementations of <code>fmap</code> but in an applicative context. Likewise, implementations of <code>ftraverse</code> look like implementations of <code>ffmap</code> in an applicative context, with a few <code>getCompose</code>s scattered around.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">instance</span> <span class="dt">FTraversable</span> <span class="dt">FormTemplate</span> <span class="kw">where</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>    ftraverse eta (<span class="dt">FormTemplate</span> email cardType cardNumber cardExpiry)</span>
<span id="cb9-3"><a href="#cb9-3"></a>        <span class="ot">=</span> <span class="dt">FormTemplate</span> <span class="op">&lt;$&gt;</span></span>
<span id="cb9-4"><a href="#cb9-4"></a>            (getCompose <span class="op">$</span> eta email) <span class="op">&lt;*&gt;</span></span>
<span id="cb9-5"><a href="#cb9-5"></a>            (getCompose <span class="op">$</span> eta cardType) <span class="op">&lt;*&gt;</span></span>
<span id="cb9-6"><a href="#cb9-6"></a>            (getCompose <span class="op">$</span> eta cardNumber) <span class="op">&lt;*&gt;</span></span>
<span id="cb9-7"><a href="#cb9-7"></a>            (getCompose <span class="op">$</span> eta cardExpiry)</span></code></pre></div>
<p>This is where things start to get interesting. The <code>toForm</code> function, which converts a draft form to a regular form if all of its fields have been filled in, can be defined tersely in terms of <code>ftraverse</code>.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="ot">toRecord ::</span> <span class="dt">FTraversable</span> t <span class="ot">=&gt;</span> <span class="dt">Partial</span> t <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Record</span> t)</span>
<span id="cb10-2"><a href="#cb10-2"></a>toRecord <span class="ot">=</span> ftraverse (<span class="dt">Compose</span> <span class="op">.</span> <span class="fu">fmap</span> <span class="dt">Identity</span>)</span>
<span id="cb10-3"><a href="#cb10-3"></a></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="ot">toForm ::</span> <span class="dt">DraftForm</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Form</span></span>
<span id="cb10-5"><a href="#cb10-5"></a>toForm <span class="ot">=</span> toRecord</span></code></pre></div>
<p>Here’s another example: a generic program, defined by analogy to <code>Foldable</code>’s <code>foldMap</code>, to collapse the fields of a record into a monoidal value. Note that <code>f () -&gt; m</code> is isomorphic to, but simpler than, <code>forall x. f x -&gt; m</code>. Annoyingly, we have to give a type signature to <code>mkConst</code> to resolve the ambiguity over <code>g</code> in the call to <code>ftraverse</code>. I’m picking <code>Empty</code> as a way of demonstrating that I have nothing up my sleeves.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">data</span> <span class="dt">Empty</span> a <span class="kw">deriving</span> <span class="dt">Functor</span></span>
<span id="cb11-2"><a href="#cb11-2"></a></span>
<span id="cb11-3"><a href="#cb11-3"></a><span class="ot">ffoldMap ::</span> <span class="kw">forall</span> f t m<span class="op">.</span> (<span class="dt">Monoid</span> m, <span class="dt">Functor</span> f, <span class="dt">FTraversable</span> t)</span>
<span id="cb11-4"><a href="#cb11-4"></a>         <span class="ot">=&gt;</span> (f () <span class="ot">-&gt;</span> m) <span class="ot">-&gt;</span> t f <span class="ot">-&gt;</span> m</span>
<span id="cb11-5"><a href="#cb11-5"></a>ffoldMap f <span class="ot">=</span> getConst <span class="op">.</span> ftraverse mkConst</span>
<span id="cb11-6"><a href="#cb11-6"></a>    <span class="kw">where</span></span>
<span id="cb11-7"><a href="#cb11-7"></a>        <span class="co">-- using ScopedTypeVariables to bind f</span></span>
<span id="cb11-8"><a href="#cb11-8"></a><span class="ot">        mkConst ::</span> f x <span class="ot">-&gt;</span> <span class="dt">Compose</span> (<span class="dt">Const</span> m) <span class="dt">Empty</span> x</span>
<span id="cb11-9"><a href="#cb11-9"></a>        mkConst <span class="ot">=</span> <span class="dt">Compose</span> <span class="op">.</span> <span class="dt">Const</span> <span class="op">.</span> f <span class="op">.</span> (<span class="op">$&gt;</span> ())</span></code></pre></div>
<h2 id="zipping-templates">Zipping templates</h2>
<p>Given a pair of records of the same shape <code>t</code>, we should be able to combine them point-wise, matching up the fields of each: <code>fzip :: t f -&gt; t g -&gt; t (Product f g)</code>. In <strong>Hask</strong>, “combining point-wise” is exactly what the “reader” applicative <code>(-&gt;) r</code> does, so any functor which enjoys an isomorphism to <code>(-&gt;) r</code> for some <code>r</code> has at least a zippy <code>Applicative</code> instance. Such functors are called <em>representable functors</em> and they are members of the class <a href="https://hackage.haskell.org/package/adjunctions-4.3/docs/Data-Functor-Rep.html#t:Representable"><code>Representable</code></a>.</p>
<p>Of course, we’re working with functors from the functor category, so the relevant notion of <code>Representable</code> will need a little adjustment. Instead of an isomorphism to a function <code>(-&gt;) r</code> we’ll use an isomorphism to a natural transformation <code>(~&gt;) r</code>.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">class</span> <span class="dt">FFunctor</span> t <span class="ot">=&gt;</span> <span class="dt">FRepresentable</span> t <span class="kw">where</span></span>
<span id="cb12-2"><a href="#cb12-2"></a>    <span class="kw">type</span> <span class="dt">FRep</span><span class="ot"> t ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span></span>
<span id="cb12-3"><a href="#cb12-3"></a><span class="ot">    ftabulate ::</span> (<span class="dt">FRep</span> t <span class="op">~&gt;</span> f) <span class="ot">-&gt;</span> t f</span>
<span id="cb12-4"><a href="#cb12-4"></a><span class="ot">    findex ::</span> t f <span class="ot">-&gt;</span> <span class="dt">FRep</span> t a <span class="ot">-&gt;</span> f a</span>
<span id="cb12-5"><a href="#cb12-5"></a></span>
<span id="cb12-6"><a href="#cb12-6"></a><span class="ot">fzipWith ::</span> <span class="dt">FRepresentable</span> t</span>
<span id="cb12-7"><a href="#cb12-7"></a>         <span class="ot">=&gt;</span> (<span class="kw">forall</span> x<span class="op">.</span> f x <span class="ot">-&gt;</span> g x <span class="ot">-&gt;</span> h x)</span>
<span id="cb12-8"><a href="#cb12-8"></a>         <span class="ot">-&gt;</span>            t f <span class="ot">-&gt;</span> t g <span class="ot">-&gt;</span> t h</span>
<span id="cb12-9"><a href="#cb12-9"></a>fzipWith f t u <span class="ot">=</span> ftabulate <span class="op">$</span> \r <span class="ot">-&gt;</span> f (findex t r) (findex u r)</span>
<span id="cb12-10"><a href="#cb12-10"></a></span>
<span id="cb12-11"><a href="#cb12-11"></a><span class="ot">fzipWith3 ::</span> <span class="dt">FRepresentable</span> t</span>
<span id="cb12-12"><a href="#cb12-12"></a>          <span class="ot">=&gt;</span> (<span class="kw">forall</span> x<span class="op">.</span> f x <span class="ot">-&gt;</span> g x <span class="ot">-&gt;</span> h x <span class="ot">-&gt;</span> k x)</span>
<span id="cb12-13"><a href="#cb12-13"></a>          <span class="ot">-&gt;</span>            t f <span class="ot">-&gt;</span> t g <span class="ot">-&gt;</span> t h <span class="ot">-&gt;</span> t k</span>
<span id="cb12-14"><a href="#cb12-14"></a>fzipWith3 f t u v <span class="ot">=</span> ftabulate <span class="op">$</span></span>
<span id="cb12-15"><a href="#cb12-15"></a>    \r <span class="ot">-&gt;</span> f (findex t r) (findex u r) (findex v r)</span>
<span id="cb12-16"><a href="#cb12-16"></a></span>
<span id="cb12-17"><a href="#cb12-17"></a><span class="ot">fzip ::</span> <span class="dt">FRepresentable</span> t <span class="ot">=&gt;</span> t f <span class="ot">-&gt;</span> t g <span class="ot">-&gt;</span> t (<span class="dt">Product</span> f g)</span>
<span id="cb12-18"><a href="#cb12-18"></a>fzip <span class="ot">=</span> fzipWith <span class="dt">Pair</span></span></code></pre></div>
<p>The laws for <code>FRepresentable</code> simply state that <code>ftabulate</code> and <code>findex</code> must witness an isomorphism:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1"></a><span class="co">-- isomorphism</span></span>
<span id="cb13-2"><a href="#cb13-2"></a>ftabulate <span class="op">.</span> findex <span class="ot">=</span> findex <span class="op">.</span> ftabulate <span class="ot">=</span> <span class="fu">id</span></span></code></pre></div>
<p><code>FRep</code> will typically be a GADT: it tells you what type of value one should expect to find at a given position in a record.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">data</span> <span class="dt">FormTemplateRep</span> a <span class="kw">where</span></span>
<span id="cb14-2"><a href="#cb14-2"></a>    <span class="dt">Email</span><span class="ot"> ::</span> <span class="dt">FormTemplateRep</span> <span class="dt">Text</span></span>
<span id="cb14-3"><a href="#cb14-3"></a>    <span class="dt">CardType</span><span class="ot"> ::</span> <span class="dt">FormTemplateRep</span> <span class="dt">CardType</span></span>
<span id="cb14-4"><a href="#cb14-4"></a>    <span class="dt">CardNumber</span><span class="ot"> ::</span> <span class="dt">FormTemplateRep</span> <span class="dt">Text</span></span>
<span id="cb14-5"><a href="#cb14-5"></a>    <span class="dt">CardExpiry</span><span class="ot"> ::</span> <span class="dt">FormTemplateRep</span> <span class="dt">Day</span></span>
<span id="cb14-6"><a href="#cb14-6"></a></span>
<span id="cb14-7"><a href="#cb14-7"></a><span class="kw">instance</span> <span class="dt">FRepresentable</span> <span class="dt">FormTemplate</span> <span class="kw">where</span></span>
<span id="cb14-8"><a href="#cb14-8"></a>    <span class="kw">type</span> <span class="dt">FRep</span> <span class="dt">FormTemplate</span> <span class="ot">=</span> <span class="dt">FormTemplateRep</span></span>
<span id="cb14-9"><a href="#cb14-9"></a></span>
<span id="cb14-10"><a href="#cb14-10"></a>    ftabulate eta <span class="ot">=</span> <span class="dt">FormTemplate</span></span>
<span id="cb14-11"><a href="#cb14-11"></a>        (eta <span class="dt">Email</span>)</span>
<span id="cb14-12"><a href="#cb14-12"></a>        (eta <span class="dt">CardType</span>)</span>
<span id="cb14-13"><a href="#cb14-13"></a>        (eta <span class="dt">CardNumber</span>)</span>
<span id="cb14-14"><a href="#cb14-14"></a>        (eta <span class="dt">CardExpiry</span>)</span>
<span id="cb14-15"><a href="#cb14-15"></a>    </span>
<span id="cb14-16"><a href="#cb14-16"></a>    findex p <span class="dt">Email</span> <span class="ot">=</span> _email p</span>
<span id="cb14-17"><a href="#cb14-17"></a>    findex p <span class="dt">CardType</span> <span class="ot">=</span> _cardType p</span>
<span id="cb14-18"><a href="#cb14-18"></a>    findex p <span class="dt">CardNumber</span> <span class="ot">=</span> _cardNumber p</span>
<span id="cb14-19"><a href="#cb14-19"></a>    findex p <span class="dt">CardExpiry</span> <span class="ot">=</span> _cardExpiry p</span></code></pre></div>
<p>Something useful you can do with this infrastructure: filling in defaults for missing values of a partial record. Or, looking at it the other way, overriding certain parts of a record.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1"></a><span class="ot">with ::</span> <span class="dt">FRepresentable</span> t <span class="ot">=&gt;</span> <span class="dt">Record</span> t <span class="ot">-&gt;</span> <span class="dt">Partial</span> t <span class="ot">-&gt;</span> <span class="dt">Record</span> t</span>
<span id="cb15-2"><a href="#cb15-2"></a>with <span class="ot">=</span> fzipWith override</span>
<span id="cb15-3"><a href="#cb15-3"></a>    <span class="kw">where</span> override x <span class="dt">Nothing</span> <span class="ot">=</span> x</span>
<span id="cb15-4"><a href="#cb15-4"></a>          override _ (<span class="dt">Just</span> y) <span class="ot">=</span> <span class="dt">Identity</span> y</span>
<span id="cb15-5"><a href="#cb15-5"></a></span>
<span id="cb15-6"><a href="#cb15-6"></a><span class="ot">fillInDefaults ::</span> <span class="dt">FRepresentable</span> t <span class="ot">=&gt;</span> <span class="dt">Partial</span> t <span class="ot">-&gt;</span> <span class="dt">Record</span> t <span class="ot">-&gt;</span> <span class="dt">Record</span> t</span>
<span id="cb15-7"><a href="#cb15-7"></a>fillInDefaults t defaults <span class="ot">=</span> defaults <span class="ot">`with`</span> t</span></code></pre></div>
<p>You can also make a record of <code>Monoid</code> values into a <code>Monoid</code>, once again by zipping.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1"></a><span class="kw">newtype</span> <span class="dt">Wrap</span> t f <span class="ot">=</span> <span class="dt">Wrap</span> {<span class="ot"> unWrap ::</span> t f }</span>
<span id="cb16-2"><a href="#cb16-2"></a>makeWrapped &#39;<span class="dt">&#39;Wrap</span>  <span class="co">-- from Control.Lens.Wrapped</span></span>
<span id="cb16-3"><a href="#cb16-3"></a></span>
<span id="cb16-4"><a href="#cb16-4"></a><span class="kw">instance</span> (<span class="dt">FRepresentable</span> t, <span class="dt">Monoid</span> c) <span class="ot">=&gt;</span> <span class="dt">Monoid</span> (<span class="dt">Wrap</span> t (<span class="dt">Const</span> c)) <span class="kw">where</span></span>
<span id="cb16-5"><a href="#cb16-5"></a>    <span class="fu">mempty</span> <span class="ot">=</span> <span class="dt">Wrap</span> <span class="op">$</span> ftabulate (<span class="fu">const</span> (<span class="dt">Const</span> <span class="fu">mempty</span>))</span>
<span id="cb16-6"><a href="#cb16-6"></a>    <span class="dt">Wrap</span> t <span class="ot">`mappend`</span> <span class="dt">Wrap</span> u <span class="ot">=</span> <span class="dt">Wrap</span> <span class="op">$</span> fzipWith <span class="fu">mappend</span> t u</span></code></pre></div>
<h2 id="lenses">Lenses</h2>
<p>Rather than come up with a new notion of <code>Lens</code> formulated in terms of <code>FFunctor</code>, we can reuse the standard <code>Lens</code> type as long as we’re careful about how polymorphic lenses should be. Specifically, a lens into a record template should express no opinion as to which functor the template should be instantiated with.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1"></a><span class="kw">newtype</span> <span class="dt">FLens</span> t a <span class="ot">=</span> <span class="dt">FLens</span> (<span class="kw">forall</span> f<span class="op">.</span> <span class="dt">Lens&#39;</span> (t f) (f a))</span></code></pre></div>
<p>We can store a template’s lenses in an instance of the template itself!</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1"></a><span class="kw">type</span> <span class="dt">Lenses</span> t <span class="ot">=</span> t (<span class="dt">FLens</span> t)</span>
<span id="cb18-2"><a href="#cb18-2"></a></span>
<span id="cb18-3"><a href="#cb18-3"></a><span class="kw">class</span> <span class="dt">HasLenses</span> t <span class="kw">where</span></span>
<span id="cb18-4"><a href="#cb18-4"></a><span class="ot">    lenses ::</span> <span class="dt">Lenses</span> t</span>
<span id="cb18-5"><a href="#cb18-5"></a></span>
<span id="cb18-6"><a href="#cb18-6"></a>makeLenses &#39;<span class="dt">&#39;FormTemplate</span></span>
<span id="cb18-7"><a href="#cb18-7"></a><span class="kw">instance</span> <span class="dt">HasLenses</span> <span class="dt">FormTemplate</span> <span class="kw">where</span></span>
<span id="cb18-8"><a href="#cb18-8"></a>    lenses <span class="ot">=</span> <span class="dt">FormTemplate</span> {</span>
<span id="cb18-9"><a href="#cb18-9"></a>        _email <span class="ot">=</span> <span class="dt">FLens</span> email,</span>
<span id="cb18-10"><a href="#cb18-10"></a>        _cardType <span class="ot">=</span> <span class="dt">FLens</span> cardType,</span>
<span id="cb18-11"><a href="#cb18-11"></a>        _cardNumber <span class="ot">=</span> <span class="dt">FLens</span> cardNumber,</span>
<span id="cb18-12"><a href="#cb18-12"></a>        _cardExpiry <span class="ot">=</span> <span class="dt">FLens</span> cardExpiry</span>
<span id="cb18-13"><a href="#cb18-13"></a>    }</span></code></pre></div>
<h2 id="compositional-validation">Compositional Validation</h2>
<p>Now for an extended example: form validation. We’ll be making use of all of the tools from above - zipping, traversing, and mapping - to design a typed API for validating individual fields of a form.</p>
<p><code>Either</code> isn’t a great choice for a validation monad, because <code>Either</code> aborts the computation at the first failure. You typically want to report all the errors in a form. Instead, we’ll be working with the following type, which is isomorphic to <code>Either</code> but with an <code>Applicative</code> instance which returns <em>all</em> of the failures in a given computation, combining the values using a <code>Monoid</code>. So it’s kind of a Frankensteinian mishmash of the <code>Either</code> and <code>Writer</code> applicatives.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1"></a><span class="kw">data</span> <span class="dt">Validation</span> e a <span class="ot">=</span> <span class="dt">Failure</span> e <span class="op">|</span> <span class="dt">Success</span> a <span class="kw">deriving</span> <span class="dt">Functor</span></span>
<span id="cb19-2"><a href="#cb19-2"></a></span>
<span id="cb19-3"><a href="#cb19-3"></a><span class="kw">instance</span> <span class="dt">Bifunctor</span> <span class="dt">Validation</span> <span class="kw">where</span></span>
<span id="cb19-4"><a href="#cb19-4"></a>    bimap f g (<span class="dt">Failure</span> e) <span class="ot">=</span> <span class="dt">Failure</span> (f e)</span>
<span id="cb19-5"><a href="#cb19-5"></a>    bimap f g (<span class="dt">Success</span> x) <span class="ot">=</span> <span class="dt">Success</span> (g x)</span>
<span id="cb19-6"><a href="#cb19-6"></a></span>
<span id="cb19-7"><a href="#cb19-7"></a><span class="kw">instance</span> <span class="dt">Monoid</span> e <span class="ot">=&gt;</span> <span class="dt">Applicative</span> (<span class="dt">Validation</span> e) <span class="kw">where</span></span>
<span id="cb19-8"><a href="#cb19-8"></a>    <span class="fu">pure</span> <span class="ot">=</span> <span class="dt">Success</span></span>
<span id="cb19-9"><a href="#cb19-9"></a>    <span class="dt">Success</span> f <span class="op">&lt;*&gt;</span> <span class="dt">Success</span> x <span class="ot">=</span> <span class="dt">Success</span> (f x)</span>
<span id="cb19-10"><a href="#cb19-10"></a>    <span class="dt">Failure</span> e1 <span class="op">&lt;*&gt;</span> <span class="dt">Failure</span> e2 <span class="ot">=</span> <span class="dt">Failure</span> (e1 <span class="ot">`mappend`</span> e2)</span>
<span id="cb19-11"><a href="#cb19-11"></a>    <span class="dt">Failure</span> e1 <span class="op">&lt;*&gt;</span> _ <span class="ot">=</span> <span class="dt">Failure</span> e1</span>
<span id="cb19-12"><a href="#cb19-12"></a>    _ <span class="op">&lt;*&gt;</span> <span class="dt">Failure</span> e2 <span class="ot">=</span> <span class="dt">Failure</span> e2</span></code></pre></div>
<p>This <code>Applicative</code> instance has no compatible <code>Monad</code> instance.</p>
<p>We’ll build a library for validation processes which examine a single field of a record at a time. A validation rule for a field typed <code>a</code> is a function which takes an <code>a</code> and returns a <code>Validation e a</code>.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1"></a><span class="kw">newtype</span> <span class="dt">Validator</span> e a <span class="ot">=</span> <span class="dt">Validator</span> {<span class="ot"> runValidator ::</span> a <span class="ot">-&gt;</span> <span class="dt">Validation</span> e a }</span>
<span id="cb20-2"><a href="#cb20-2"></a></span>
<span id="cb20-3"><a href="#cb20-3"></a><span class="co">-- a validator which always succeeds</span></span>
<span id="cb20-4"><a href="#cb20-4"></a><span class="ot">noop ::</span> <span class="dt">Validator</span> e a</span>
<span id="cb20-5"><a href="#cb20-5"></a>noop <span class="ot">=</span> <span class="dt">Validator</span> <span class="dt">Success</span></span></code></pre></div>
<p>If a given field has multiple validation rules, you can compose them under the assumption that each validator leaves its input unchanged.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1"></a><span class="ot">(&amp;&gt;) ::</span> <span class="dt">Monoid</span> e <span class="ot">=&gt;</span> <span class="dt">Validator</span> e a <span class="ot">-&gt;</span> <span class="dt">Validator</span> e a <span class="ot">-&gt;</span> <span class="dt">Validator</span> e a</span>
<span id="cb21-2"><a href="#cb21-2"></a><span class="dt">Validator</span> f <span class="op">&amp;&gt;</span> <span class="dt">Validator</span> g <span class="ot">=</span> <span class="dt">Validator</span> <span class="op">$</span> \x <span class="ot">-&gt;</span> f x <span class="op">*&gt;</span> g x</span>
<span id="cb21-3"><a href="#cb21-3"></a></span>
<span id="cb21-4"><a href="#cb21-4"></a><span class="co">-- for example</span></span>
<span id="cb21-5"><a href="#cb21-5"></a><span class="ot">emailValidator ::</span> <span class="dt">Validator</span> [<span class="dt">Text</span>] <span class="dt">Text</span></span>
<span id="cb21-6"><a href="#cb21-6"></a>emailValidator <span class="ot">=</span> hasAtSymbol <span class="op">&amp;&gt;</span> hasTopLevelDomain</span>
<span id="cb21-7"><a href="#cb21-7"></a>    <span class="kw">where</span></span>
<span id="cb21-8"><a href="#cb21-8"></a>        hasAtSymbol <span class="ot">=</span> <span class="dt">Validator</span> <span class="op">$</span> \email <span class="ot">-&gt;</span> </span>
<span id="cb21-9"><a href="#cb21-9"></a>            <span class="kw">if</span> <span class="st">&quot;@&quot;</span> <span class="ot">`isInfixOf`</span> email</span>
<span id="cb21-10"><a href="#cb21-10"></a>            <span class="kw">then</span> <span class="dt">Success</span> email</span>
<span id="cb21-11"><a href="#cb21-11"></a>            <span class="kw">else</span> <span class="dt">Failure</span> [<span class="st">&quot;No @ in email&quot;</span>]</span>
<span id="cb21-12"><a href="#cb21-12"></a>        hasTopLevelDomain <span class="ot">=</span> <span class="dt">Validator</span> <span class="op">$</span> \email <span class="ot">-&gt;</span></span>
<span id="cb21-13"><a href="#cb21-13"></a>            <span class="kw">if</span> <span class="fu">any</span> (<span class="ot">`isSuffixOf`</span> email) topLevelDomains</span>
<span id="cb21-14"><a href="#cb21-14"></a>            <span class="kw">then</span> <span class="dt">Success</span> email</span>
<span id="cb21-15"><a href="#cb21-15"></a>            <span class="kw">else</span> <span class="dt">Failure</span> [<span class="st">&quot;Invalid TLD&quot;</span>]</span>
<span id="cb21-16"><a href="#cb21-16"></a>        topLevelDomains <span class="ot">=</span> [<span class="st">&quot;.com&quot;</span>, <span class="st">&quot;.org&quot;</span>, <span class="st">&quot;.co.uk&quot;</span>]  <span class="co">-- etc</span></span></code></pre></div>
<p>The plan is to store these <code>Validator</code>s in a record template, zip them along an instance of the record itself, and then traverse the result to get either a validated record or a collection of errors. To make things interesting, we’ll store the validation results for a given field in the matching field of another record.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1"></a><span class="kw">type</span> <span class="dt">Validators</span> e t <span class="ot">=</span> t (<span class="dt">Validator</span> e)</span>
<span id="cb22-2"><a href="#cb22-2"></a><span class="kw">type</span> <span class="dt">Errors</span> e t <span class="ot">=</span> t (<span class="dt">Const</span> e)</span>
<span id="cb22-3"><a href="#cb22-3"></a></span>
<span id="cb22-4"><a href="#cb22-4"></a><span class="co">-- turn a record of validators into a validator of records</span></span>
<span id="cb22-5"><a href="#cb22-5"></a><span class="ot">validate ::</span> (<span class="dt">HasLenses</span> t, <span class="dt">FTraversable</span> t, <span class="dt">FRepresentable</span> t, <span class="dt">Monoid</span> e)</span>
<span id="cb22-6"><a href="#cb22-6"></a>         <span class="ot">=&gt;</span> <span class="dt">Validators</span> e t</span>
<span id="cb22-7"><a href="#cb22-7"></a>         <span class="ot">-&gt;</span> <span class="dt">Validator</span> (<span class="dt">Errors</span> e t) (<span class="dt">Record</span> t)</span>
<span id="cb22-8"><a href="#cb22-8"></a>validate validators <span class="ot">=</span> <span class="dt">Validator</span> <span class="op">$</span> \record <span class="ot">-&gt;</span></span>
<span id="cb22-9"><a href="#cb22-9"></a>    first unWrap <span class="op">$</span></span>
<span id="cb22-10"><a href="#cb22-10"></a>    fsequence&#39; <span class="op">$</span></span>
<span id="cb22-11"><a href="#cb22-11"></a>    fzipWith3 applyValidator lenses validators record</span>
<span id="cb22-12"><a href="#cb22-12"></a>    <span class="kw">where</span></span>
<span id="cb22-13"><a href="#cb22-13"></a>        applyValidator</span>
<span id="cb22-14"><a href="#cb22-14"></a>            (<span class="dt">FLens</span> lens)</span>
<span id="cb22-15"><a href="#cb22-15"></a>            (<span class="dt">Validator</span> validator)</span>
<span id="cb22-16"><a href="#cb22-16"></a>            (<span class="dt">Identity</span> value) <span class="ot">=</span></span>
<span id="cb22-17"><a href="#cb22-17"></a>                <span class="kw">let</span> setError e <span class="ot">=</span> <span class="fu">mempty</span> <span class="op">&amp;</span> _Wrapped&#39;<span class="op">.</span>lens<span class="op">.</span>_Wrapped&#39; <span class="op">.~</span> e</span>
<span id="cb22-18"><a href="#cb22-18"></a>                <span class="kw">in</span> first setError <span class="op">$</span> validator value</span></code></pre></div>
<p><code>applyValidator</code> takes a lens into a record field, a validator for that field and the value in that field. It applies the validator to the value; upon failure it stores the error message (<code>e</code>) in the correct field of the <code>Errors</code> record using the lens. <code>fzipWith3</code> handles the logic of running <code>applyValidator</code> for each field of the record, then <code>fsequence'</code> combines the resulting <code>Validation</code> applicative actions into a single one. So all of the errors from all of the fields are eventually collected into the matching fields of the <code>Errors</code> record and combined monoidally.</p>
<p>A quick test, wherein I test validation on the email field:</p>
<pre><code>ghci&gt; let formValidator = validate
    $ FormTemplate emailValidator noop noop noop
ghci&gt; let today = read &quot;2017-08-17&quot; :: Day

ghci&gt; let form1 = FormTemplate
    (Identity &quot;bhodgson@stackoverflow.com&quot;)
    (Identity Visa)
    (Identity &quot;1234567890123456&quot;)
    (Identity today)
ghci&gt; runValidator formValidator form1
Success (FormTemplate {
    _email = Identity &quot;bhodgson@stackoverflow.com&quot;,
    _cardType = Identity Visa,
    _cardNumber = Identity &quot;1234567890123456&quot;,
    _cardExpiry = Identity 2017-08-17
    })

ghci&gt; let form2 = FormTemplate
    (Identity &quot;notanemail&quot;)
    (Identity Visa)
    (Identity &quot;1234567890123456&quot;)
    (Identity today)
ghci&gt; runValidator formValidator form2
Failure (FormTemplate {
    _email = Const [&quot;No @ in email&quot;,&quot;Invalid TLD&quot;],
    _cardType = Const [],
    _cardNumber = Const [],
    _cardExpiry = Const []
    })</code></pre>
<h2 id="code-review">Code review</h2>
<p>So we have a categorical framework for working with records and templates. Other things fit into this framework, more or less neatly:</p>
<ul>
<li>Monad transformers are often functorial in their <code>m</code> argument.</li>
<li><code>Fix f</code> (a “list of <code>f</code>s”, if you will) is also a functor functor, where <code>ffmap</code>ping represents a change of variables.</li>
<li>Since the <code>Const</code>, <code>Sum</code>, <code>Product</code> and <code>Compose</code> type combinators are poly-kinded, they can be reused as functor functors too.</li>
<li>Add another primitive <code>FFunctor</code> to apply a functor to a type, <code>newtype At a f = At { getAt :: f a }</code>, and you have a kit to build polynomial functor functors with which you can build templates and write generic programs.</li>
</ul>
<p>One design decision I made when developing the <code>FFunctor</code> class was to give <code>ffmap</code> a <code>(Functor f, Functor g)</code> constraint, so you can only <code>ffmap</code> between types that are in fact functors. This is mathematically principled in some sense, but it has certain engineering tradeoffs compared to an unconstrained type for <code>ffmap</code>. It enables more instances of <code>FFunctor</code> - for example, you can only write <code>Fix</code>’s <code>ffmap</code> with a <code>Functor</code> constraint for either the input or output type parameters - but it rules out certain usages of <code>ffmap</code>. You can’t <code>ffmap</code> over a template containing <code>Validator</code>s, for example, because <code>Validator</code> is not a <code>Functor</code>. I <em>didn’t</em> put the same <code>Functor</code> constraints into <code>FRepresentable</code>’s methods. An <code>FRep</code> type typically won’t be functorial - it’ll be GADT-like - so adding a <code>Functor (FRep t)</code> constraint would be far too restrictive.</p>
<p>You’ll notice that the concept of an applicative functor functor is conspicuously absent from my presentation above. <code>FApplicative</code> would probably look something like this:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1"></a><span class="kw">newtype</span> (f <span class="op">:-&gt;</span> g) a <span class="ot">=</span> <span class="dt">Morph</span> {<span class="ot"> getMorph ::</span> f a <span class="ot">-&gt;</span> g a }</span>
<span id="cb24-2"><a href="#cb24-2"></a></span>
<span id="cb24-3"><a href="#cb24-3"></a><span class="kw">class</span> <span class="dt">FFunctor</span> t <span class="ot">=&gt;</span> <span class="dt">FApplicative</span> t <span class="kw">where</span></span>
<span id="cb24-4"><a href="#cb24-4"></a><span class="ot">    fpure ::</span> (<span class="kw">forall</span> a<span class="op">.</span> f a) <span class="ot">-&gt;</span> t f</span>
<span id="cb24-5"><a href="#cb24-5"></a><span class="ot">    fap ::</span> t (f <span class="op">:-&gt;</span> g) <span class="ot">-&gt;</span> t f <span class="ot">-&gt;</span> t g</span>
<span id="cb24-6"><a href="#cb24-6"></a></span>
<span id="cb24-7"><a href="#cb24-7"></a><span class="ot">fliftA ::</span> <span class="dt">FApplicative</span> t <span class="ot">=&gt;</span> (f <span class="op">~&gt;</span> g) <span class="ot">-&gt;</span> t f <span class="ot">-&gt;</span> t g</span>
<span id="cb24-8"><a href="#cb24-8"></a>fliftA eta t <span class="ot">=</span> fpure (<span class="dt">Morph</span> eta) <span class="ot">`fap`</span> t</span>
<span id="cb24-9"><a href="#cb24-9"></a></span>
<span id="cb24-10"><a href="#cb24-10"></a><span class="kw">instance</span> <span class="dt">FApplicative</span> <span class="dt">FormTemplate</span> <span class="kw">where</span></span>
<span id="cb24-11"><a href="#cb24-11"></a>    fpure x <span class="ot">=</span> <span class="dt">FormTemplate</span> x x x x</span>
<span id="cb24-12"><a href="#cb24-12"></a>    fap</span>
<span id="cb24-13"><a href="#cb24-13"></a>        (<span class="dt">FormTemplate</span></span>
<span id="cb24-14"><a href="#cb24-14"></a>            (<span class="dt">Morph</span> f1)</span>
<span id="cb24-15"><a href="#cb24-15"></a>            (<span class="dt">Morph</span> f2)</span>
<span id="cb24-16"><a href="#cb24-16"></a>            (<span class="dt">Morph</span> f3)</span>
<span id="cb24-17"><a href="#cb24-17"></a>            (<span class="dt">Morph</span> f4))</span>
<span id="cb24-18"><a href="#cb24-18"></a>        (<span class="dt">FormTemplate</span></span>
<span id="cb24-19"><a href="#cb24-19"></a>            email</span>
<span id="cb24-20"><a href="#cb24-20"></a>            cardType</span>
<span id="cb24-21"><a href="#cb24-21"></a>            cardNumber</span>
<span id="cb24-22"><a href="#cb24-22"></a>            cardExpiry)</span>
<span id="cb24-23"><a href="#cb24-23"></a>        <span class="ot">=</span> <span class="dt">FormTemplate</span></span>
<span id="cb24-24"><a href="#cb24-24"></a>            (f1 email)</span>
<span id="cb24-25"><a href="#cb24-25"></a>            (f2 cardType)</span>
<span id="cb24-26"><a href="#cb24-26"></a>            (f3 cardNumber)</span>
<span id="cb24-27"><a href="#cb24-27"></a>            (f4 cardExpiry)</span></code></pre></div>
<p><code>FApplicative</code> is a more general interface than <code>FRepresentable</code>, in that it supports notions of composition other than zipping. However, that bookkeeping <code>:-&gt;</code> <code>newtype</code> wrapper is inconvenient. With the normal <code>Applicative</code> class you can map an <em>n</em>-ary function over <em>n</em> applicative values directly: <code>f &lt;$&gt; x &lt;*&gt; y &lt;*&gt; z</code>. With <code>FApplicative</code> you have to apply the <code>Morph</code> constructor as many times as <code>f</code> has arguments: <code>fpure (Morph $ \x -&gt; Morph $ \y -&gt; Morph $ \z -&gt; f x y z) `fap` t `fap` u `fap` v</code>, which becomes very unwieldy very quickly. (<a href="https://www.reddit.com/r/haskell/comments/78xxql/structures_of_arrays_functors_and_continuations/doy80ft/">/u/rampion has come up with nicer syntax for this</a>, but it involves <a href="https://gist.github.com/rampion/20291bde6c8568c11f9cc5923d9639eb#file-ffunctor-hs-L28">a more complicated formulation of <code>FApplicative</code></a>.) On the other hand, <code>FApplicative</code> does open up some interesting options for the design of <code>FTraversable</code>: one can traverse in an <code>FApplicative</code> rather than an <code>Applicative</code>. This gives some nice type signatures - <code>fsequence :: (FTraversable t, FApplicative f) =&gt; t f -&gt; f t</code> - and is strictly more general than the <code>FTraversable</code> I gave above, since any <code>Applicative</code> can be lifted into an <code>FApplicative</code> by composition (<code>newtype ComposeAt a f g = ComposeAt { getComposeAt :: f (g a) }</code>).</p>
<p>How useful are these tools in practice? Would I structure a production application around functor functors? Probably not. It’s a question of balance - while it’s useful to recognise functorial structures in categories other than <strong>Hask</strong> as a thinking tool, actually representing such abstractions in code doesn’t always pay off. Haskell already has a rich ecosystem of tools for working with the <code>Functor</code> family, but there’s much less code in the wild that’s structured around functor functors. This is partly because <code>Functor</code> has the advantage of being a standard class in <code>base</code>, but it’s also because code built around functor functors is a little less convenient to work with, typically requiring some tedious <code>newtype</code> bookkeeping.</p>
<p>Over the course of putting together this article I came across some work by others on this very topic. I’ve spotted versions of these classes being packaged with bigger libraries such as <a href="http://hackage.haskell.org/package/hedgehog-0.5.1/docs/Hedgehog-Internal-HTraversable.html"><code>hedgehog</code></a> and <a href="https://hackage.haskell.org/package/quickcheck-state-machine-0.2.0/docs/Test-StateMachine-Types-HFunctor.html"><code>quickcheck-state-machine</code></a>. There are also a few packages providing similar tools. The most mature of these seems to be <a href="http://hackage.haskell.org/package/rank2classes"><code>rank2classes</code></a>, which includes some Template Haskell tools for deriving instances; there’s also <a href="http://hackage.haskell.org/package/conkin">the Conkin package</a>, which has <a href="https://github.com/rampion/conkin/blob/master/README.md">a well-written tutorial</a> focusing on working with data in column-major order.</p>
<p>Haskell’s full of big ideas and powerful programming idioms. In this post we saw an example of reinterpreting some familiar tools - <code>Functor</code>, <code>Traversable</code> and <code>Representable</code> - in a new context. With the intuition that a record template is a container of functors, and the formalism of functors from the functor category, we were able to reuse intuitions about those familiar tools to write terse and generic programs.</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on December 15, 2017</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/live/comments/2017-12-15-functor-functors/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Recursion Without Recursion</title>
    <link href="http://www.benjamin.pizza/posts/2017-11-13-recursion-without-recursion.html" />
    <id>http://www.benjamin.pizza/posts/2017-11-13-recursion-without-recursion.html</id>
    <published>2017-11-13T00:00:00Z</published>
    <updated>2017-11-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November 13, 2017
    
</div>

<p>If you visit <a href="https://www.stackoverflow.com/jobs">Stack Overflow Jobs</a> you’ll see that our job search form supports a simple advanced search syntax, including Boolean operators and a number of custom filters such as technology tags and minimum salary. For example, I hate writing JavaScript, but my loyalties can be bought, so I might type <a href="https://stackoverflow.com/jobs?sort=i&amp;q=%5Bc%23%5D+and+(not+%5Bjavascript%5D+or+salary%3A50000gbp)"><code>[c#] and (not [javascript] or salary:50000gbp)</code></a> into the search box. This advanced search syntax is called JQL, for <em>Jobs Query Language</em>.</p>
<p>It should come as no surprise that our codebase contains a miniature compiler for our miniature query language. Our compiler looks much like any other compiler: there’s a parser which produces an abstract syntax tree (hereafter <em>AST</em>), a pipeline of analysers and transformations which operate on that AST, and a code generator which turns the JQL into an ElasticSearch query. (Actually, queries that are simple enough end up skipping the Elastic code generation step, instead being used by an interpreter to search an in-memory cache of jobs.)</p>
<p><img src="/images/2017-11-13-recursion-without-recursion/compiler.jpg" alt="Compiler overview" width="900" /></p>
<p>In this post I’m going to focus on the middle part of that pipeline: how to write operations traversing a tree with a minimum of boilerplate.</p>
<h2 id="asts-and-operations">ASTs and operations</h2>
<p>The JQL AST looks roughly like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">abstract</span> <span class="kw">class</span> JqlNode {}</span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">class</span> AndNode : JqlNode</span>
<span id="cb1-3"><a href="#cb1-3"></a>{</span>
<span id="cb1-4"><a href="#cb1-4"></a>    <span class="kw">public</span> JqlNode Left { <span class="kw">get</span>; }</span>
<span id="cb1-5"><a href="#cb1-5"></a>    <span class="kw">public</span> JqlNode Right { <span class="kw">get</span>; }</span>
<span id="cb1-6"><a href="#cb1-6"></a>}</span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="kw">class</span> OrNode : JqlNode</span>
<span id="cb1-8"><a href="#cb1-8"></a>{</span>
<span id="cb1-9"><a href="#cb1-9"></a>    <span class="kw">public</span> JqlNode Left { <span class="kw">get</span>; }</span>
<span id="cb1-10"><a href="#cb1-10"></a>    <span class="kw">public</span> JqlNode Right { <span class="kw">get</span>; }</span>
<span id="cb1-11"><a href="#cb1-11"></a>}</span>
<span id="cb1-12"><a href="#cb1-12"></a><span class="kw">class</span> NotNode : JqlNode</span>
<span id="cb1-13"><a href="#cb1-13"></a>{</span>
<span id="cb1-14"><a href="#cb1-14"></a>    <span class="kw">public</span> JqlNode Operand { <span class="kw">get</span>; }</span>
<span id="cb1-15"><a href="#cb1-15"></a>}</span>
<span id="cb1-16"><a href="#cb1-16"></a><span class="kw">class</span> SalaryNode : JqlNode</span>
<span id="cb1-17"><a href="#cb1-17"></a>{</span>
<span id="cb1-18"><a href="#cb1-18"></a>    <span class="kw">public</span> <span class="dt">int</span> Amount { <span class="kw">get</span>; }</span>
<span id="cb1-19"><a href="#cb1-19"></a>    <span class="kw">public</span> <span class="dt">string</span> Currency { <span class="kw">get</span>; }</span>
<span id="cb1-20"><a href="#cb1-20"></a>}</span>
<span id="cb1-21"><a href="#cb1-21"></a><span class="kw">class</span> TagNode : JqlNode</span>
<span id="cb1-22"><a href="#cb1-22"></a>{</span>
<span id="cb1-23"><a href="#cb1-23"></a>    <span class="kw">public</span> <span class="dt">string</span> Tag { <span class="kw">get</span>; }</span>
<span id="cb1-24"><a href="#cb1-24"></a>}</span></code></pre></div>
<p>Each syntactic form in the source language is represented as a subclass of <code>JqlNode</code>. Using the example I gave above, the input string <code>[c#] and (not [javascript] or salary:50000gbp)</code> would be represented as:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">new</span> <span class="fu">AndNode</span>(</span>
<span id="cb2-2"><a href="#cb2-2"></a>    <span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;c#&quot;</span>),</span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="kw">new</span> <span class="fu">OrNode</span>(</span>
<span id="cb2-4"><a href="#cb2-4"></a>        <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>)),</span>
<span id="cb2-5"><a href="#cb2-5"></a>        <span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>)</span>
<span id="cb2-6"><a href="#cb2-6"></a>    )</span>
<span id="cb2-7"><a href="#cb2-7"></a>)</span></code></pre></div>
<p><img src="/images/2017-11-13-recursion-without-recursion/ast.jpg" alt="The abstract syntax tree" width="900" /></p>
<p>When you need to analyse a <code>JqlNode</code>, you use pattern matching to see what type of node you have, and recursively query the operands of <code>And</code>/<code>Or</code>/<code>Not</code> nodes. Here’s a function which searches for the <code>TagNode</code>s in a tree:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1"></a>IEnumerable&lt;<span class="dt">string</span>&gt; <span class="fu">ExtractTags</span>(JqlNode node)</span>
<span id="cb3-2"><a href="#cb3-2"></a>{</span>
<span id="cb3-3"><a href="#cb3-3"></a>    <span class="kw">switch</span> (node)</span>
<span id="cb3-4"><a href="#cb3-4"></a>    {</span>
<span id="cb3-5"><a href="#cb3-5"></a>        <span class="kw">case</span> TagNode t:</span>
<span id="cb3-6"><a href="#cb3-6"></a>            <span class="kw">return</span> <span class="kw">new</span>[] { t.<span class="fu">Tag</span> };</span>
<span id="cb3-7"><a href="#cb3-7"></a>        <span class="kw">case</span> AndNode a:</span>
<span id="cb3-8"><a href="#cb3-8"></a>            <span class="co">// recursively extract the tags from the two operands</span></span>
<span id="cb3-9"><a href="#cb3-9"></a>            <span class="kw">return</span> <span class="fu">ExtractTags</span>(a.<span class="fu">Left</span>).<span class="fu">Concat</span>(<span class="fu">ExtractTags</span>(a.<span class="fu">Right</span>));</span>
<span id="cb3-10"><a href="#cb3-10"></a>        <span class="kw">case</span> OrNode o:</span>
<span id="cb3-11"><a href="#cb3-11"></a>            <span class="kw">return</span> <span class="fu">ExtractTags</span>(o.<span class="fu">Left</span>).<span class="fu">Concat</span>(<span class="fu">ExtractTags</span>(o.<span class="fu">Right</span>));</span>
<span id="cb3-12"><a href="#cb3-12"></a>        <span class="kw">case</span> NotNode n:</span>
<span id="cb3-13"><a href="#cb3-13"></a>            <span class="kw">return</span> <span class="fu">ExtractTags</span>(n.<span class="fu">Operand</span>);</span>
<span id="cb3-14"><a href="#cb3-14"></a>        <span class="kw">case</span> SalaryNode s:</span>
<span id="cb3-15"><a href="#cb3-15"></a>            <span class="kw">return</span> Enumerable.<span class="fu">Empty</span>&lt;<span class="dt">string</span>&gt;();</span>
<span id="cb3-16"><a href="#cb3-16"></a>        <span class="kw">default</span>:</span>
<span id="cb3-17"><a href="#cb3-17"></a>            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">ArgumentOutOfRangeException</span>(<span class="fu">nameof</span>(node));</span>
<span id="cb3-18"><a href="#cb3-18"></a>    }</span>
<span id="cb3-19"><a href="#cb3-19"></a>}</span></code></pre></div>
<p>Transforming a <code>JqlNode</code> to produce a new <code>JqlNode</code> is a similar story: you recursively traverse the tree, taking it apart and putting it back together. Here’s an example of an optimisation step which never doesn’t remove double-negatives, so a query like <code>not (not [java])</code> gets simplified to <code>[java]</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1"></a>JqlNode <span class="fu">SimplifyDoubleNegatives</span>(JqlNode node)</span>
<span id="cb4-2"><a href="#cb4-2"></a>{</span>
<span id="cb4-3"><a href="#cb4-3"></a>    <span class="kw">switch</span> (node)</span>
<span id="cb4-4"><a href="#cb4-4"></a>    {</span>
<span id="cb4-5"><a href="#cb4-5"></a>        <span class="kw">case</span> NotNode n1 when n1.<span class="fu">Operand</span> <span class="kw">is</span> NotNode n2:</span>
<span id="cb4-6"><a href="#cb4-6"></a>            <span class="kw">return</span> <span class="fu">SimplifyDoubleNegatives</span>(n2.<span class="fu">Operand</span>);</span>
<span id="cb4-7"><a href="#cb4-7"></a>        <span class="kw">case</span> TagNode t:</span>
<span id="cb4-8"><a href="#cb4-8"></a>            <span class="kw">return</span> t;</span>
<span id="cb4-9"><a href="#cb4-9"></a>        <span class="kw">case</span> SalaryNode s:</span>
<span id="cb4-10"><a href="#cb4-10"></a>            <span class="kw">return</span> s;</span>
<span id="cb4-11"><a href="#cb4-11"></a>        <span class="kw">case</span> AndNode a:</span>
<span id="cb4-12"><a href="#cb4-12"></a>            <span class="co">// recursively process the operands and rebuild the node</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">AndNode</span>(</span>
<span id="cb4-14"><a href="#cb4-14"></a>                <span class="fu">SimplifyDoubleNegatives</span>(a.<span class="fu">Left</span>),</span>
<span id="cb4-15"><a href="#cb4-15"></a>                <span class="fu">SimplifyDoubleNegatives</span>(a.<span class="fu">Right</span>)</span>
<span id="cb4-16"><a href="#cb4-16"></a>            );</span>
<span id="cb4-17"><a href="#cb4-17"></a>        <span class="kw">case</span> OrNode o:</span>
<span id="cb4-18"><a href="#cb4-18"></a>            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">OrNode</span>(</span>
<span id="cb4-19"><a href="#cb4-19"></a>                <span class="fu">SimplifyDoubleNegatives</span>(o.<span class="fu">Left</span>),</span>
<span id="cb4-20"><a href="#cb4-20"></a>                <span class="fu">SimplifyDoubleNegatives</span>(o.<span class="fu">Right</span>)</span>
<span id="cb4-21"><a href="#cb4-21"></a>            );</span>
<span id="cb4-22"><a href="#cb4-22"></a>        <span class="kw">case</span> NotNode n:</span>
<span id="cb4-23"><a href="#cb4-23"></a>            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">NotNode</span>(</span>
<span id="cb4-24"><a href="#cb4-24"></a>                <span class="fu">SimplifyDoubleNegatives</span>(n.<span class="fu">Operand</span>)</span>
<span id="cb4-25"><a href="#cb4-25"></a>            );</span>
<span id="cb4-26"><a href="#cb4-26"></a>        <span class="kw">default</span>:</span>
<span id="cb4-27"><a href="#cb4-27"></a>            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">ArgumentOutOfRangeException</span>(<span class="fu">nameof</span>(node));</span>
<span id="cb4-28"><a href="#cb4-28"></a>    }</span>
<span id="cb4-29"><a href="#cb4-29"></a>}</span></code></pre></div>
<p>This type of code gets pretty tedious pretty quickly! In both of these functions, only one of the <code>case</code>s was interesting (<code>case TagNode t</code> in <code>ExtractTags</code> and <code>case NotNode n1 when n1.Operand is NotNode n2</code> in <code>SimplifyDoubleNegatives</code>); the rest of each function was just boilerplate to recursively operate on nodes’ children. You’re interested in a particular syntactic pattern, but searching the whole tree for that pattern requires more code than finding the pattern does. In the real JQL compiler we have about a dozen subclasses of <code>JqlNode</code>, so around 90% of the code in each operation is boilerplate!</p>
<h2 id="easier-querying">Easier Querying</h2>
<p>Here’s the first insight that’ll help us improve on this situation. In <code>ExtractTags</code> we were searching the tree for nodes satisfying a particular pattern. But supposing you had a list of every possible subtree - the root node, all of its children, all of their children, and so on - you could use LINQ to query that list to find nodes satisfying the pattern you’re looking for. We’ll call the function which extracts the list of subtrees <code>SelfAndDescendants</code>.</p>
<p>Given a tree like the example from above (<code>[c#] and (not [javascript] or salary:50000gbp)</code>), <code>SelfAndDescendants</code> will yield every subtree in a depth-first, left-to-right manner:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">new</span> JqlNode[]</span>
<span id="cb5-2"><a href="#cb5-2"></a>{</span>
<span id="cb5-3"><a href="#cb5-3"></a>    <span class="kw">new</span> <span class="fu">AndNode</span>(</span>
<span id="cb5-4"><a href="#cb5-4"></a>        <span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;c#&quot;</span>),</span>
<span id="cb5-5"><a href="#cb5-5"></a>        <span class="kw">new</span> <span class="fu">OrNode</span>(</span>
<span id="cb5-6"><a href="#cb5-6"></a>            <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>)),</span>
<span id="cb5-7"><a href="#cb5-7"></a>            <span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>)</span>
<span id="cb5-8"><a href="#cb5-8"></a>        )</span>
<span id="cb5-9"><a href="#cb5-9"></a>    ),</span>
<span id="cb5-10"><a href="#cb5-10"></a>    <span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;c#&quot;</span>),</span>
<span id="cb5-11"><a href="#cb5-11"></a>    <span class="kw">new</span> <span class="fu">OrNode</span>(</span>
<span id="cb5-12"><a href="#cb5-12"></a>        <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>)),</span>
<span id="cb5-13"><a href="#cb5-13"></a>        <span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>)</span>
<span id="cb5-14"><a href="#cb5-14"></a>    ),</span>
<span id="cb5-15"><a href="#cb5-15"></a>    <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>)),</span>
<span id="cb5-16"><a href="#cb5-16"></a>    <span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>),</span>
<span id="cb5-17"><a href="#cb5-17"></a>    <span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>)</span>
<span id="cb5-18"><a href="#cb5-18"></a>}</span></code></pre></div>
<p>Here’s <code>SelfAndDescendants</code> in use:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1"></a>IEnumerable&lt;<span class="dt">string</span>&gt; <span class="fu">ExtractTags</span>(JqlNode node)</span>
<span id="cb6-2"><a href="#cb6-2"></a>    =&gt; node</span>
<span id="cb6-3"><a href="#cb6-3"></a>        .<span class="fu">SelfAndDescendants</span>()</span>
<span id="cb6-4"><a href="#cb6-4"></a>        .<span class="fu">OfType</span>&lt;TagNode&gt;()</span>
<span id="cb6-5"><a href="#cb6-5"></a>        .<span class="fu">Select</span>(n =&gt; n.<span class="fu">Tag</span>);</span></code></pre></div>
<p>What an improvement! This code is much shorter, but more importantly it’s clearer and more direct. You can directly read off the intention of the code, rather than having to decipher the pattern of recursive calls. It’s also harder to get wrong - I personally am rather prone to forgetting to make a recursive call when I’m writing these sorts of functions. What’s more, <code>SelfAndDescendants</code> is totally reusable. If you can write a LINQ query, you can get whatever information you need from a <code>JqlNode</code>.</p>
<p>Of course, the pattern-matching and recursion has to go somewhere, and that somewhere is the reusable <code>SelfAndDescendants</code> function.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">public</span> <span class="kw">static</span> IEnumerable&lt;JqlNode&gt; <span class="fu">SelfAndDescendants</span>(<span class="kw">this</span> JqlNode node)</span>
<span id="cb7-2"><a href="#cb7-2"></a>{</span>
<span id="cb7-3"><a href="#cb7-3"></a>    <span class="kw">yield</span> <span class="kw">return</span> node;</span>
<span id="cb7-4"><a href="#cb7-4"></a>    <span class="kw">switch</span> (node)</span>
<span id="cb7-5"><a href="#cb7-5"></a>    {</span>
<span id="cb7-6"><a href="#cb7-6"></a>        <span class="kw">case</span> TagNode t:</span>
<span id="cb7-7"><a href="#cb7-7"></a>            <span class="kw">yield</span> <span class="kw">break</span>;</span>
<span id="cb7-8"><a href="#cb7-8"></a>        <span class="kw">case</span> SalaryNode s:</span>
<span id="cb7-9"><a href="#cb7-9"></a>            <span class="kw">yield</span> <span class="kw">break</span>;</span>
<span id="cb7-10"><a href="#cb7-10"></a>        <span class="kw">case</span> AndNode a:</span>
<span id="cb7-11"><a href="#cb7-11"></a>            <span class="kw">foreach</span> (<span class="dt">var</span> descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(a.<span class="fu">Left</span>))</span>
<span id="cb7-12"><a href="#cb7-12"></a>                <span class="kw">yield</span> <span class="kw">return</span> descendant;</span>
<span id="cb7-13"><a href="#cb7-13"></a>            <span class="kw">foreach</span> (<span class="dt">var</span> descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(a.<span class="fu">Right</span>))</span>
<span id="cb7-14"><a href="#cb7-14"></a>                <span class="kw">yield</span> <span class="kw">return</span> descendant;</span>
<span id="cb7-15"><a href="#cb7-15"></a>        <span class="kw">case</span> OrNode o:</span>
<span id="cb7-16"><a href="#cb7-16"></a>            <span class="kw">foreach</span> (<span class="dt">var</span> descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(o.<span class="fu">Left</span>))</span>
<span id="cb7-17"><a href="#cb7-17"></a>                <span class="kw">yield</span> <span class="kw">return</span> descendant;</span>
<span id="cb7-18"><a href="#cb7-18"></a>            <span class="kw">foreach</span> (<span class="dt">var</span> descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(o.<span class="fu">Right</span>))</span>
<span id="cb7-19"><a href="#cb7-19"></a>                <span class="kw">yield</span> <span class="kw">return</span> descendant;</span>
<span id="cb7-20"><a href="#cb7-20"></a>        <span class="kw">case</span> NotNode n:</span>
<span id="cb7-21"><a href="#cb7-21"></a>            <span class="kw">foreach</span> (<span class="dt">var</span> descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(n.<span class="fu">Operand</span>))</span>
<span id="cb7-22"><a href="#cb7-22"></a>                <span class="kw">yield</span> <span class="kw">return</span> descendant;</span>
<span id="cb7-23"><a href="#cb7-23"></a>        <span class="kw">default</span>:</span>
<span id="cb7-24"><a href="#cb7-24"></a>            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">ArgumentOutOfRangeException</span>(<span class="fu">nameof</span>(node));</span>
<span id="cb7-25"><a href="#cb7-25"></a>    }</span>
<span id="cb7-26"><a href="#cb7-26"></a>}</span></code></pre></div>
<p>Google crawls links between pages for you, so you can search the Web for a specific piece of information; <code>SelfAndDescendants</code> crawls pointers between nodes for you, so you can search a tree for a specific piece of information. Programming tree traversals by hand is like manually clicking every link on the Web!</p>
<h2 id="a-reusable-transformer">A Reusable Transformer</h2>
<p>How about transforming a JQL AST? <code>SimplifyDoubleNegatives</code> searches a JQL tree for a pattern and rebuilds a new version of the tree. Can this be extracted into a reusable function?</p>
<p>To rewrite a tree, you search the tree for nodes satisfying the pattern you’re looking for and replace them. As with <code>SelfAndDescendants</code>, the trick is to separate the responsibilities of <em>looking at every node in the tree</em> and <em>deciding whether to replace a given node</em>. You can write a higher-order function - let’s call it <code>Rewrite</code> - which applies a <code>Func</code> to every node in a JQL tree from bottom to top; then it’s the <code>Func</code>’s job to decide what to do with each node.</p>
<p>For example, <code>Rewrite</code> will take the query above (<code>[c#] and (not [javascript] or salary:50000gbp)</code>) and a function <code>transformer</code>, and compute the expression:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb8-1"><a href="#cb8-1"></a><span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">AndNode</span>(</span>
<span id="cb8-2"><a href="#cb8-2"></a>    <span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;c#&quot;</span>)),</span>
<span id="cb8-3"><a href="#cb8-3"></a>    <span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">OrNode</span>(</span>
<span id="cb8-4"><a href="#cb8-4"></a>        <span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">NotNode</span>(</span>
<span id="cb8-5"><a href="#cb8-5"></a>            <span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>))</span>
<span id="cb8-6"><a href="#cb8-6"></a>        )),</span>
<span id="cb8-7"><a href="#cb8-7"></a>        <span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>))</span>
<span id="cb8-8"><a href="#cb8-8"></a>    ))</span>
<span id="cb8-9"><a href="#cb8-9"></a>))</span></code></pre></div>
<p>So <code>transformer</code> gets applied to every subtree exactly once. <code>Rewrite</code> is a mapping operation, like LINQ’s <code>Select</code>. Here’s how it’s implemented.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">static</span> JqlNode <span class="fu">Rewrite</span>(</span>
<span id="cb9-2"><a href="#cb9-2"></a>    <span class="kw">this</span> JqlNode node,</span>
<span id="cb9-3"><a href="#cb9-3"></a>    Func&lt;JqlNode, JqlNode&gt; transformer</span>
<span id="cb9-4"><a href="#cb9-4"></a>)</span>
<span id="cb9-5"><a href="#cb9-5"></a>{</span>
<span id="cb9-6"><a href="#cb9-6"></a>    <span class="kw">switch</span> (node)</span>
<span id="cb9-7"><a href="#cb9-7"></a>    {</span>
<span id="cb9-8"><a href="#cb9-8"></a>        <span class="kw">case</span> TagNode t:</span>
<span id="cb9-9"><a href="#cb9-9"></a>            <span class="kw">return</span> <span class="fu">transformer</span>(t);</span>
<span id="cb9-10"><a href="#cb9-10"></a>        <span class="kw">case</span> SalaryNode s:</span>
<span id="cb9-11"><a href="#cb9-11"></a>            <span class="kw">return</span> <span class="fu">transformer</span>(s);</span>
<span id="cb9-12"><a href="#cb9-12"></a>        <span class="kw">case</span> AndNode a:</span>
<span id="cb9-13"><a href="#cb9-13"></a>            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">AndNode</span>(</span>
<span id="cb9-14"><a href="#cb9-14"></a>                <span class="fu">transformer</span>(a.<span class="fu">Left</span>),</span>
<span id="cb9-15"><a href="#cb9-15"></a>                <span class="fu">transformer</span>(a.<span class="fu">Right</span>)</span>
<span id="cb9-16"><a href="#cb9-16"></a>            );</span>
<span id="cb9-17"><a href="#cb9-17"></a>        <span class="kw">case</span> OrNode o:</span>
<span id="cb9-18"><a href="#cb9-18"></a>            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">OrNode</span>(</span>
<span id="cb9-19"><a href="#cb9-19"></a>                <span class="fu">transformer</span>(o.<span class="fu">Left</span>),</span>
<span id="cb9-20"><a href="#cb9-20"></a>                <span class="fu">transformer</span>(o.<span class="fu">Right</span>)</span>
<span id="cb9-21"><a href="#cb9-21"></a>            );</span>
<span id="cb9-22"><a href="#cb9-22"></a>        <span class="kw">case</span> NotNode n:</span>
<span id="cb9-23"><a href="#cb9-23"></a>            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="fu">transformer</span>(n.<span class="fu">Operand</span>));</span>
<span id="cb9-24"><a href="#cb9-24"></a>        <span class="kw">default</span>:</span>
<span id="cb9-25"><a href="#cb9-25"></a>            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">ArgumentOutOfRangeException</span>(<span class="fu">nameof</span>(node));</span>
<span id="cb9-26"><a href="#cb9-26"></a>    }</span>
<span id="cb9-27"><a href="#cb9-27"></a>}</span></code></pre></div>
<p>To use this <code>Rewrite</code> method, you write a transformation function which calculates a replacement for each node. If there’s no replacing to do, it just returns the same node. Like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb10-1"><a href="#cb10-1"></a>JqlNode <span class="fu">SimplifyDoubleNegatives</span>(JqlNode node)</span>
<span id="cb10-2"><a href="#cb10-2"></a>    =&gt; node.<span class="fu">Rewrite</span>(</span>
<span id="cb10-3"><a href="#cb10-3"></a>        n =&gt; n <span class="kw">is</span> NotNode n1 &amp;&amp; n1.<span class="fu">Operand</span> <span class="kw">is</span> NotNode n2</span>
<span id="cb10-4"><a href="#cb10-4"></a>            ? n2.<span class="fu">Operand</span></span>
<span id="cb10-5"><a href="#cb10-5"></a>            : n</span>
<span id="cb10-6"><a href="#cb10-6"></a>    );</span></code></pre></div>
<p>Once again, this code is a huge improvement over the verbose version which used <code>switch</code> and recursion. <code>Rewrite</code> allows us to get straight to the point and only think about the parts of the tree we’re interested in.</p>
<h2 id="from-pattern-to-library">From Pattern to Library</h2>
<p><code>Rewrite</code> and <code>SelfAndDescendants</code> wrap up two particular types of recursion, for reuse in a wide variety of operations. This is a powerful way to program - gone are the days of writing a bespoke traversal for every operation! - and these two functions form the basis of most of the operations in the production JQL compiler, but in this form they don’t constitute a library. <code>SelfAndDescendants</code> and <code>Rewrite</code>, as written above, have knowledge of <code>JqlNode</code> baked in to them; you have to hand-write equivalent functions to work on your own datatypes.</p>
<p>We can turn this design into something generic, though, by abstracting over tree-shaped structures. What do we mean when we say a datatype is tree-shaped? The distinguishing feature which makes a tree a tree, unlike any other datatype, is recursion: each node in a tree has <em>children</em> which are also nodes.</p>
<p><img src="/images/2017-11-13-recursion-without-recursion/children.jpg" alt="Nodes and their children" width="900" /></p>
<p>As the picture shows, you can reach every node in a tree just by looking at each node’s children. If you can show me how to replace your children, I can replace your children’s children and so on. So let’s use an interface to model the notion of an object with a collection of children.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">interface</span> IRewritable&lt;T&gt; where T : IRewritable&lt;T&gt;</span>
<span id="cb11-2"><a href="#cb11-2"></a>{</span>
<span id="cb11-3"><a href="#cb11-3"></a>    IEnumerable&lt;T&gt; <span class="fu">GetChildren</span>();</span>
<span id="cb11-4"><a href="#cb11-4"></a>    T <span class="fu">SetChildren</span>(IEnumerable&lt;T&gt; newChildren);</span>
<span id="cb11-5"><a href="#cb11-5"></a>}</span></code></pre></div>
<p>A type <code>T</code> is <em>rewritable</em> if it knows how to access its immediate children - in other words, if you can get and set an <code>IEnumerable&lt;T&gt;</code> representing a node’s children. We’re working with immutable trees, remember, so <code>SetChildren</code> doesn’t modify the current instance - it returns a new <code>T</code> the same as the current instance but with different children. Part of the contract of <code>IRewritable</code> is that you shouldn’t call <code>SetChildren</code> with a different number of children to what you got from <code>GetChildren</code>. For example, an <code>And</code> node always has two children, so you shouldn’t try to call <code>SetChildren</code> with only one child (because, how would the <code>And</code> node rebuild itself?).</p>
<p>Now we can package up those <code>Rewrite</code> and <code>SelfAndDescendants</code> functions for any rewritable object, once and for all. If you show me how to reach each node’s immediate children, I can recursively apply that recipe to look at the children’s children and so on.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">static</span> IEnumerable&lt;T&gt; SelfAndDescendants&lt;T&gt;(<span class="kw">this</span> T node)</span>
<span id="cb12-2"><a href="#cb12-2"></a>    where T : IRewritable&lt;T&gt;</span>
<span id="cb12-3"><a href="#cb12-3"></a>{</span>
<span id="cb12-4"><a href="#cb12-4"></a>    <span class="kw">yield</span> <span class="kw">return</span> node;</span>
<span id="cb12-5"><a href="#cb12-5"></a>    <span class="kw">foreach</span> (<span class="dt">var</span> child <span class="kw">in</span> node.<span class="fu">GetChildren</span>())</span>
<span id="cb12-6"><a href="#cb12-6"></a>        <span class="kw">foreach</span> (<span class="dt">var</span> descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(child))</span>
<span id="cb12-7"><a href="#cb12-7"></a>            <span class="kw">yield</span> <span class="kw">return</span> descendant;</span>
<span id="cb12-8"><a href="#cb12-8"></a>}</span>
<span id="cb12-9"><a href="#cb12-9"></a><span class="kw">static</span> T Rewrite&lt;T&gt;(<span class="kw">this</span> T node, Func&lt;T, T&gt; transformer)</span>
<span id="cb12-10"><a href="#cb12-10"></a>    where T : IRewritable&lt;T&gt;</span>
<span id="cb12-11"><a href="#cb12-11"></a>{</span>
<span id="cb12-12"><a href="#cb12-12"></a>    <span class="dt">var</span> children = node.<span class="fu">GetChildren</span>();</span>
<span id="cb12-13"><a href="#cb12-13"></a>    <span class="dt">var</span> newChildren = children.<span class="fu">Select</span>(c =&gt; c.<span class="fu">Rewrite</span>(transformer)).<span class="fu">ToList</span>();</span>
<span id="cb12-14"><a href="#cb12-14"></a>    <span class="dt">var</span> nodeWithNewChildren = node.<span class="fu">SetChildren</span>(newChildren);</span>
<span id="cb12-15"><a href="#cb12-15"></a>    <span class="kw">return</span> <span class="fu">transformer</span>(nodeWithNewChildren);</span>
<span id="cb12-16"><a href="#cb12-16"></a>}</span></code></pre></div>
<p>You typically implement <code>IRewritable</code> abstractly on the base type, using overrides on each subclass to find the children.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb13-1"><a href="#cb13-1"></a><span class="kw">abstract</span> <span class="kw">class</span> JqlNode : IRewritable&lt;JqlNode&gt;</span>
<span id="cb13-2"><a href="#cb13-2"></a>{</span>
<span id="cb13-3"><a href="#cb13-3"></a>    <span class="kw">public</span> <span class="kw">abstract</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>();</span>
<span id="cb13-4"><a href="#cb13-4"></a>    <span class="kw">public</span> <span class="kw">abstract</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren);</span>
<span id="cb13-5"><a href="#cb13-5"></a>}</span>
<span id="cb13-6"><a href="#cb13-6"></a><span class="kw">class</span> AndNode : JqlNode</span>
<span id="cb13-7"><a href="#cb13-7"></a>{</span>
<span id="cb13-8"><a href="#cb13-8"></a>    <span class="co">// fields as before</span></span>
<span id="cb13-9"><a href="#cb13-9"></a>    <span class="kw">public</span> <span class="kw">override</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>()</span>
<span id="cb13-10"><a href="#cb13-10"></a>        =&gt; <span class="kw">new</span>[] { Left, Right };</span>
<span id="cb13-11"><a href="#cb13-11"></a>    <span class="kw">public</span> <span class="kw">override</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren)</span>
<span id="cb13-12"><a href="#cb13-12"></a>        =&gt; <span class="kw">new</span> <span class="fu">AndNode</span>(</span>
<span id="cb13-13"><a href="#cb13-13"></a>            newChildren.<span class="fu">ElementAt</span>(<span class="dv">0</span>), </span>
<span id="cb13-14"><a href="#cb13-14"></a>            newChildren.<span class="fu">ElementAt</span>(<span class="dv">1</span>)</span>
<span id="cb13-15"><a href="#cb13-15"></a>        );</span>
<span id="cb13-16"><a href="#cb13-16"></a>}</span>
<span id="cb13-17"><a href="#cb13-17"></a><span class="kw">class</span> OrNode : JqlNode</span>
<span id="cb13-18"><a href="#cb13-18"></a>{</span>
<span id="cb13-19"><a href="#cb13-19"></a>    <span class="kw">public</span> <span class="kw">override</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>()</span>
<span id="cb13-20"><a href="#cb13-20"></a>        =&gt; <span class="kw">new</span>[] { Left, Right };</span>
<span id="cb13-21"><a href="#cb13-21"></a>    <span class="kw">public</span> <span class="kw">override</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren)</span>
<span id="cb13-22"><a href="#cb13-22"></a>        =&gt; <span class="kw">new</span> <span class="fu">OrNode</span>(</span>
<span id="cb13-23"><a href="#cb13-23"></a>            newChildren.<span class="fu">ElementAt</span>(<span class="dv">0</span>), </span>
<span id="cb13-24"><a href="#cb13-24"></a>            newChildren.<span class="fu">ElementAt</span>(<span class="dv">1</span>)</span>
<span id="cb13-25"><a href="#cb13-25"></a>        );</span>
<span id="cb13-26"><a href="#cb13-26"></a>}</span>
<span id="cb13-27"><a href="#cb13-27"></a><span class="kw">class</span> NotNode : JqlNode</span>
<span id="cb13-28"><a href="#cb13-28"></a>{</span>
<span id="cb13-29"><a href="#cb13-29"></a>    <span class="kw">public</span> <span class="kw">override</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>()</span>
<span id="cb13-30"><a href="#cb13-30"></a>        =&gt; <span class="kw">new</span>[] { Operand };</span>
<span id="cb13-31"><a href="#cb13-31"></a>    <span class="kw">public</span> <span class="kw">override</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren)</span>
<span id="cb13-32"><a href="#cb13-32"></a>        =&gt; <span class="kw">new</span> <span class="fu">NotNode</span>(newChildren.<span class="fu">Single</span>());</span>
<span id="cb13-33"><a href="#cb13-33"></a>}</span>
<span id="cb13-34"><a href="#cb13-34"></a><span class="kw">class</span> SalaryNode : JqlNode</span>
<span id="cb13-35"><a href="#cb13-35"></a>{</span>
<span id="cb13-36"><a href="#cb13-36"></a>    <span class="kw">public</span> <span class="kw">override</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>()</span>
<span id="cb13-37"><a href="#cb13-37"></a>        =&gt; Enumerable.<span class="fu">Empty</span>&lt;JqlNode&gt;();</span>
<span id="cb13-38"><a href="#cb13-38"></a>    <span class="kw">public</span> <span class="kw">override</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren)</span>
<span id="cb13-39"><a href="#cb13-39"></a>        =&gt; <span class="kw">this</span>;</span>
<span id="cb13-40"><a href="#cb13-40"></a>}</span>
<span id="cb13-41"><a href="#cb13-41"></a><span class="kw">class</span> TagNode : JqlNode</span>
<span id="cb13-42"><a href="#cb13-42"></a>{</span>
<span id="cb13-43"><a href="#cb13-43"></a>    <span class="kw">public</span> <span class="kw">override</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>()</span>
<span id="cb13-44"><a href="#cb13-44"></a>        =&gt; Enumerable.<span class="fu">Empty</span>&lt;JqlNode&gt;();</span>
<span id="cb13-45"><a href="#cb13-45"></a>    <span class="kw">public</span> <span class="kw">override</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren)</span>
<span id="cb13-46"><a href="#cb13-46"></a>        =&gt; <span class="kw">this</span>;</span>
<span id="cb13-47"><a href="#cb13-47"></a>}</span></code></pre></div>
<p>Note that there isn’t a single line of recursion in the JQL-specific code. It’s all wrapped up in the <code>SelfAndDescendants</code> and <code>Rewrite</code> functions, which are totally generic and reusable for any type of tree.</p>
<p>The old-fashioned way of writing reusable tree traversals is the Visitor pattern: you put the recursive traversal code in a base class, with virtual methods for each type of node that can be overridden to carry out specific operations. (This is how the Roslyn API works, for example.) <code>IRewritable</code> is a clear improvement over the Visitor pattern. Being designed around base classes and overriding, the Visitor pattern is far clunkier to use than the functional API I outlined above; and <code>IRewritable</code> allows operations like <code>Rewrite</code> can be written totally generically, whereas with the Visitor pattern every type of tree has its own Visitor base class.</p>
<h2 id="sawmill">Sawmill</h2>
<p>I’ve named this generic tree-processing library Sawmill - because it’s all about taking trees apart! - and it’s available on <a href="https://www.nuget.org/packages/Sawmill">NuGet</a> and <a href="https://github.com/benjamin-hodgson/Sawmill">GitHub</a>. I’ll outline some improvements on the design I demonstrated above, which you’ll find in Sawmill.</p>
<p>First, what I find remarkable about this design is its power-to-weight ratio. <code>IRewritable</code> is a very simple interface with an easily-grasped meaning, but you can build a load of rich, generic tools on top of it. Sawmill contains versions of <code>SelfAndDescendants</code> and <code>Rewrite</code>, but also a bunch of other extension methods at varying levels of nicheness, all getting squeezed through the <code>IRewritable</code> interface:</p>
<ul>
<li>A family of versions of <code>SelfAndDescendants</code> capturing a variety of traversal orders (preorder, postorder and breadth-first), in both eager and lazy form</li>
<li>A <code>Fold</code> method for reducing a whole tree to a value, like LINQ’s <code>Aggregate</code></li>
<li>An iterative version of <code>Rewrite</code> which rewrites an expression repeatedly until it reaches a normal form</li>
<li>Functions for replacing one node at a time</li>
<li>A method to get an efficient mutable view of a node and its neighbours, which supports complex sequences of edits to a localised part of a tree</li>
<li>Tools to help you implement <code>IRewriter</code>, either using a typed fluent interface or using reflection and code generation.</li>
<li>Some minor API changes to the outline above, to enable greater efficiency for certain common cases.</li>
</ul>
<p>I’ve also had success implementing <code>IRewritable</code> for a variety of tree-like types. Sawmill comes bundled with versions of all of these extension methods for some well-known tree types - <code>Expression</code>, <code>XmlNode</code>, and <code>XElement</code> - and I’ve written extension packages which do the same for <code>Newtonsoft.Json.Linq</code> and Roslyn’s syntax trees. (These implementations actually use a separate <code>IRewriter</code> interface, because of course I can’t add a new interface to the above types.) Realising that I could use Sawmill to layer a simple, uniform API on top of preexisting objects felt like a real validation of the design.</p>
<p>Sawmill’s version of <code>Rewrite</code> also makes an important optimisation which I glossed over above: parts of the tree which the <code>transformer</code> function didn’t change are <em>shared</em> between the new and old versions of the tree. If you change a single node, you only have to rebuild that node’s ancestors (because their children have changed), not the parts of the tree you didn’t touch.</p>
<p><img src="/images/2017-11-13-recursion-without-recursion/sharing.jpg" alt="The sharing optimisation" width="900" /></p>
<p>(This is safe for immutable trees like those in Roslyn; for mutable trees like <code>XmlNode</code> the whole tree has to be copied if any part of it changes. This makes me sad - in my view those types should have been immutable all along.)</p>
<p>Finally and most importantly, I want to acknowledge Neil Mitchell’s great work in his <a href="https://hackage.haskell.org/package/uniplate"><code>uniplate</code> Haskell library</a> (and <a href="https://hackage.haskell.org/package/lens-4.15.4/docs/Control-Lens-Plated.html">its modernised port in <code>lens</code></a>), upon which Sawmill is based. I wouldn’t even have thought of this C# library if I hadn’t already encountered it in Haskell. It’s weird to think that <a href="http://ndmitchell.com/downloads/paper-uniform_boilerplate_and_list_processing-30_sep_2007.pdf"><code>uniplate</code>’s accompanying article</a> was published in 2007! Someone - my mum, if you must know - once told me that in the field of medicine it takes a decade for new research to reach mainstream practice. I think that process might take even longer in computer science, but I hope that in writing this I’ve helped these ideas along a little.</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on November 13, 2017</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/live/comments/2017-11-13-recursion-without-recursion/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>

</feed>
