<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>benjamin.pizza</title>
    <link href="http://www.benjamin.pizza/atom.xml" rel="self" />
    <link href="http://www.benjamin.pizza" />
    <id>http://www.benjamin.pizza/atom.xml</id>
    <author>
        <name>Benjamin Hodgson</name>
        <email>bhodgson@stackoverflow.com</email>
    </author>
    <updated>2018-07-16T00:00:00Z</updated>
    <entry>
    <title>Live-streaming</title>
    <link href="http://www.benjamin.pizza/posts/2018-07-16-live-streaming.html" />
    <id>http://www.benjamin.pizza/posts/2018-07-16-live-streaming.html</id>
    <published>2018-07-16T00:00:00Z</published>
    <updated>2018-07-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 16, 2018
    
</div>

<p>My esteemed colleague <a href="https://twitter.com/g3rv4?lang=en">Gervasio</a> and I have arranged to live-stream some programming this Friday. We’re going to be working on adding some basic <code>Span</code> support to <a href="https://github.com/benjamin-hodgson/Pidgin">my parsing library</a>, and it’s going to involve <code>unsafe</code> and custom IL, which should be a bit of fun.</p>
<p>The stream will be <a href="https://www.youtube.com/watch?v=O23OLkQtiS4">on YouTube</a> and we’re planning to start at 2PM BST. Hope to see you there with your questions!</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Eighty</title>
    <link href="http://www.benjamin.pizza/posts/2018-03-16-eighty.html" />
    <id>http://www.benjamin.pizza/posts/2018-03-16-eighty.html</id>
    <published>2018-03-16T00:00:00Z</published>
    <updated>2018-03-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March 16, 2018
    
</div>

<p>HTML templating systems are great but they sure are complex. ASP.NET’s Razor, for example, is a whole new programming language! While Razor does happen to have a large chunk of C# embedded within it, and it works by generating and then compiling C# code, it’s still a separate language with a separate syntax, separate abstraction techniques, separate compiler tooling, a separate file type, and separate (and usually inferior) editor support. All this for a task as simple and common as generating HTML!</p>
<p>This overhead can be worth it if you’re building a complex web application, but for simple tools such as report generators or email batch mailers Razor is unwieldy. Many people in these situations resort to generating their own HTML, either by building strings manually or by imperatively building tags using .NET’s supplied XML manipulation APIs. But there’s a whole world of possible designs out there, and there’s a lot of space in between “complex templating language” and “build strings by hand”.</p>
<h2 id="eighty">Eighty</h2>
<p><a href="https://github.com/benjamin-hodgson/Eighty">Eighty</a> (as in <em>eigh-ty-M-L</em>) is my attempt at striking a balance between these two extremes: not so abstract as to constitute a separate programming language, but not so concrete that you have to manipulate XML tags or strings manually. It’s a simple embedded domain-specific language which piggybacks on C#’s syntax, enabling you to write code resembling the HTML you’re generating. Rather than embedding C# into an HTML generator, Eighty embeds an HTML generator into C#.</p>
<p>Here’s an example from <a href="https://github.com/benjamin-hodgson/Eighty/blob/master/README.md">the readme</a>:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="dt">var</span> html = <span class="fu">article</span>(@class: <span class="st">&quot;readme&quot;</span>)._(
    <span class="fu">h1</span>(id: <span class="st">&quot;Eighty&quot;</span>)._(<span class="st">&quot;Eighty&quot;</span>),
    <span class="fu">p_</span>(
        <span class="st">&quot;Eighty (as in &quot;</span>,
        <span class="fu">i_</span>(<span class="st">&quot;eigh-ty-M-L&quot;</span>),
        <span class="st">&quot;) is a simple HTML generation library.&quot;</span>
    )
);</code></pre></div>
<p>Eighty is organised around <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.Html.html">the <code>Html</code> class</a>, being an immutable chunk of HTML which knows how to render itself using <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.Html.html#Eighty_Html_Write_System_IO_TextWriter_">its <code>Write(TextWriter)</code> method</a>. <code>Html</code> defines a large collection of static methods (designed to be imported with <code>using static</code>), with names like <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.Html.html#Eighty_Html_h1_System_String_System_String_System_String_System_String_System_String_System_String_"><code>h1</code></a> and <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.Html.html#Eighty_Html_p_System_String_System_String_System_String_System_String_System_String_System_String_"><code>p</code></a>, which create <code>Html</code> values representing their respective tags, with a collection of children which are smaller <code>Html</code> values.</p>
<p>Eighty adopts some simple conventions for its HTML-esque domain-specific language:</p>
<ul>
<li>Tags are created using (lower-case) methods like <code>p()</code> and <code>i()</code>.</li>
<li>Attributes are passed as optional named arguments: <code>a(href: &quot;benjamin.pizza&quot;, @class: &quot;website-link&quot;)</code>. I can’t force you to name your arguments — you could pass them positionally — but that’s not a good idea.</li>
<li>A tag’s children are introduced using the <code>_</code> character, which can appear at the end of a method name or as a method name all by itself. <code>a(href: &quot;benjamin.pizza&quot;)._(&quot;Visit my website&quot;)</code> creates an <code>a</code> tag with an <code>href</code> attribute and some text inside it; <code>p_(&quot;a paragraph of text&quot;)</code> represents a <code>p</code> tag with some text but no attributes. I chose <code>_</code> because it’s the least noisy character that can be used as an identifier in C#.</li>
<li>Strings can be implicitly converted to <code>Html</code> and are interpreted as HTML text. Text is HTML-encoded by default. You can opt out of this using the <code>Raw</code> method.</li>
</ul>
<h2 id="eighty-vs-razor">Eighty vs Razor</h2>
<p>Of course, C# code will only ever look <em>a bit</em> like HTML. Razor code looks much more like HTML than this! This can be a drawback when you’re working with designers who want to read and write HTML — I’m planning to write a tool to convert HTML text into an Eighty expression to partially ease this pain point. But Eighty has two big advantages which make it simpler and easier than Razor to program with:</p>
<ol style="list-style-type: decimal">
<li>It plugs into your existing system. You don’t require any extra tools to work with Eighty: if you can compile C#, you can use Eighty.</li>
<li>Programming with Eighty is <em>just programming</em>. <code>Html</code> instances are plain old immutable CLR objects, so you can use all your favourite techniques for abstraction and code reuse.</li>
</ol>
<p>To illustrate the second point, here are some examples of how you might emulate some of Razor’s programming constructs using Eighty. In many of these cases Eighty does a better job than Razor of allowing abstraction and code reuse, because Eighty is embedded within C# rather than layered on top of C#.</p>
<h3 id="models">Models</h3>
<p>In Razor, each view file you write declares a <em>model type</em> — the type of object it expects you to pass in to direct the generation of HTML. You use the <code>@model</code> directive at the top of your file, and then you can access members of the model in your Razor code.</p>
<pre class="cshtml"><code>@model ExampleModel

&lt;h1&gt;@Model.Title&lt;/h1&gt;</code></pre>
<p>One important disadvantage of Razor’s <code>@model</code> construct is that it is dynamically checked. The controller’s <code>View</code> method takes an <code>object</code> for the <code>model</code> parameter. You get a runtime error, without any feedback from the compiler, if you pass in a model whose type doesn’t match the view’s expected model type.</p>
<p>Since Eighty is embedded within C#, there’s no special syntax to declare the type of data a function depends on. You can just use a plain old parameter.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs">Html <span class="fu">Example</span>(ExampleModel model)
    =&gt; <span class="fu">h1_</span>(model.<span class="fu">Title</span>);</code></pre></div>
<p>Since a template is a regular C# method, it’s much easier to run in a unit test harness than Razor. You can just call the method and make assertions about the generated HTML, either by looking at the string directly or by parsing it and traversing the resultant DOM.</p>
<p>Eighty includes <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.IHtmlRenderer-1.html">an <code>IHtmlRenderer&lt;TModel&gt;</code> interface</a>, which captures this pattern of parameterising a chunk of HTML by a model, but its use is optional — it’s used primarily by Eighty’s ASP.NET integration packages.</p>
<h3 id="control-flow">Control flow</h3>
<p>Razor allows you to mix markup with C#’s control flow constructs such as <code>foreach</code> and <code>if</code>. Here’s a simple example of populating a <code>ul</code> based on a list of values:</p>
<pre class="cshtml"><code>&lt;ul&gt;
    @foreach (var item in Model.Items)
    {
        if (item.Visible)
        {
            &lt;li&gt;@item.Value&lt;/li&gt;
        }
    }
&lt;/ul&gt;</code></pre>
<p>With Eighty, it’s a question of building different <code>Html</code> values. You can use LINQ’s high-level functional looping constructs:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">return</span> <span class="fu">ul_</span>(
    model.<span class="fu">Items</span>
        .<span class="fu">Where</span>(item =&gt; item.<span class="fu">Visible</span>)
        .<span class="fu">Select</span>(item =&gt; <span class="fu">li_</span>(item.<span class="fu">Value</span>))
);</code></pre></div>
<p>Or you can write your own loop and build a list:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="dt">var</span> lis = <span class="kw">new</span> List&lt;Html&gt;();
<span class="kw">foreach</span> (var item <span class="kw">in</span> model.<span class="fu">Items</span>)
{
    <span class="kw">if</span> (item.<span class="fu">Visible</span>)
    {
        lis.<span class="fu">Add</span>(<span class="fu">li_</span>(item.<span class="fu">Value</span>));
    }
}
<span class="kw">return</span> <span class="fu">ul_</span>(lis);</code></pre></div>
<p>Mixing markup with C# is not a problem, because markup <em>is</em> C#.</p>
<h3 id="partials-and-helpers">Partials and Helpers</h3>
<p>Razor’s two main tools for code reuse are <em>partial views</em> and <em>helpers</em>. For the purposes of this article, they’re roughly equivalent. Partial views can be returned directly from a controller but their model type is checked at runtime, whereas helpers’ parameters are checked by the compiler but they can only be invoked from within a Razor view.</p>
<p>Eighty handles both of these uses in the simplest of ways: <em>calling a function</em>. If I want to include an HTML snippet in more than one place, I can just extract it into a method returning an <code>Html</code> object. Transliterating an example from <a href="https://docs.microsoft.com/en-us/aspnet/web-pages/overview/ui-layouts-and-themes/creating-and-using-a-helper-in-an-aspnet-web-pages-site">the MVC documentation</a>:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs">Html <span class="fu">MakeNote</span>(<span class="dt">string</span> content)
    =&gt; <span class="fu">div</span>(@class: <span class="st">&quot;note&quot;</span>)._(
        <span class="fu">p_</span>(
            <span class="fu">strong_</span>(<span class="st">&quot;Note&quot;</span>),
            <span class="fu">Raw</span>(<span class="st">&quot;&amp;nbsp;&amp;nbsp; &quot;</span>),
            content
        )
    );

Html <span class="fu">SomeHtmlContainingANote</span>()
    =&gt; <span class="fu">article_</span>(
        <span class="fu">p_</span>(<span class="st">&quot;This is some opening paragraph text&quot;</span>),
        <span class="fu">MakeNote</span>(<span class="st">&quot;My test note content&quot;</span>),
        <span class="fu">p_</span>(<span class="st">&quot;This is some following text&quot;</span>)
    );</code></pre></div>
<p>This is the best of both worlds: types are checked by the compiler as usual, but the returned <code>Html</code> value is a perfectly good standalone chunk of HTML, and can be rendered separately if necessary.</p>
<p><code>Html</code> values being ordinary C# values, Eighty actually supports more types of reuse than Razor does. For example, you can pass a chunk of HTML as an argument, which is not easy to do with Razor:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs">Html <span class="fu">RepeatFiveTimes</span>(Html html)
    =&gt; _(Enumerable.<span class="fu">Repeat</span>(html, <span class="dv">5</span>));</code></pre></div>
<p>Since <code>Html</code> values are immutable, you can safely share them between different HTML documents, across different threads, etc. Sharing parts of your HTML document that don’t change can be an important optimisation.</p>
<h3 id="layouts">Layouts</h3>
<p>Razor lets you define a shared <em>layout</em> page, which acts as a template for the other pages in your application. For example, you might put the <code>html</code> and <code>body</code> tags in a layout page, and use the built in <code>RenderBody</code> helper to render the concrete page’s body inside the <code>body</code> tag. This is also where global navs and the like are defined.</p>
<p>One way to handle global layouts and sections in Eighty would be to define an abstract base class. Each section becomes an abstract method, allowing individual pages to fill in their own HTML for those sections.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">abstract</span> <span class="kw">class</span> Layout
{
    <span class="kw">public</span> Html <span class="fu">GetHtml</span>()
        =&gt; <span class="fu">doctypeHtml_</span>(
            <span class="fu">head</span>(
                <span class="fu">link</span>(
                    rel: <span class="st">&quot;stylesheet&quot;</span>,
                    type: <span class="st">&quot;text/css&quot;</span>,
                    href: <span class="st">&quot;default.css&quot;</span>
                ),
                <span class="fu">Css</span>(),
                <span class="fu">script</span>(
                    type: <span class="st">&quot;text/javascript&quot;</span>,
                    src: <span class="st">&quot;jquery-3.3.1.min.js&quot;</span>
                ),
                <span class="fu">Js</span>()
            ),
            <span class="fu">body</span>(
                <span class="fu">Body</span>()
            )
        );

    <span class="kw">protected</span> <span class="kw">abstract</span> Html <span class="fu">Css</span>();
    <span class="kw">protected</span> <span class="kw">abstract</span> Html <span class="fu">Js</span>();
    <span class="kw">protected</span> <span class="kw">abstract</span> Html <span class="fu">Body</span>();
}</code></pre></div>
<p>Then, inheriting a layout is as easy as inheriting a class.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">class</span> DashboardPage : Layout
{
    <span class="kw">private</span> DashboardModel _model;

    <span class="kw">public</span> <span class="fu">Dashboard</span>(DashboardModel model)
    {
        _model = model;
    }

    <span class="kw">protected</span> <span class="kw">override</span> Html <span class="fu">Css</span>()
        =&gt; <span class="co">/* Dashboard-specific CSS */</span>;

    <span class="kw">protected</span> <span class="kw">override</span> Html <span class="fu">Js</span>()
        =&gt; <span class="co">/* Dashboard-specific scripts */</span>;

    <span class="kw">protected</span> <span class="kw">override</span> Html <span class="fu">Body</span>()
        =&gt; <span class="co">/* The body of the dashboard page */</span>;
}</code></pre></div>
<h2 id="twenty">Twenty</h2>
<p>Eighty comes bundled with a second HTML generation library called Twenty. Twenty is harder to use correctly than Eighty, and its API is more verbose, but it’s faster.</p>
<p>HTML tags have to be balanced: every opening tag has to have a matching closing tag and vice versa. While an <code>Html</code> value is being written to a <code>TextWriter</code>, Eighty manages the stack of currently-open tags using the call stack. Each tag writes its opening tag, tells its children to write themselves, and then writes its closing tag. This is possible because <code>Html</code> is an ordinary reference type; the objects you build with methods like <code>p()</code> and <code>h1()</code> are tree-shaped objects representing a DOM of statically-unknown size.</p>
<p>Twenty instead takes an imperative view of HTML generation. Each tag method writes an opening tag to the <code>TextWriter</code> immediately, and returns an <code>IDisposable</code> which writes out the closing tag when it’s disposed. You, the programmer, use C#’s <code>using</code> statement to ensure that the <code>Dispose</code> method is called as soon as the children have been written. The structure of your HTML document is still visible in the code, but it’s present in the nesting of <code>using</code> statements, rather than by the structure of a tree-shaped object.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">class</span> MyHtmlBuilder : HtmlBuilder
{
    <span class="kw">protected</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">Build</span>()
    {
        <span class="kw">using</span> (<span class="fu">article</span>(@class: <span class="st">&quot;readme&quot;</span>))
        {
            <span class="kw">using</span> (<span class="fu">h1</span>(id: <span class="st">&quot;Eighty&quot;</span>))
                <span class="fu">Text</span>(<span class="st">&quot;Eighty&quot;</span>);
            <span class="kw">using</span> (<span class="fu">p</span>())
            {
                <span class="fu">Text</span>(<span class="st">&quot;Eighty (as in &quot;</span>);
                <span class="kw">using</span> (<span class="fu">i</span>())
                    <span class="fu">Text</span>(<span class="st">&quot;eigh-ty-M-L&quot;</span>);
                <span class="fu">Text</span>(<span class="st">&quot;) is a simple HTML generation library.&quot;</span>);
            }
        }
    }
}</code></pre></div>
<p>Perhaps this is a bit of an abuse of <code>IDisposable</code>, and the <code>using</code> syntax is comparatively noisy, but this trick allows Twenty to operate quickly and without generating any garbage while still making for a reasonable DSL. Compared to Eighty, Twenty does lose out on some flexibility and safety:</p>
<ul>
<li>You mustn’t forget a <code>using</code> statement, or call <code>Dispose</code> more than once, or Twenty will output malformed HTML. Eighty, on the other hand, will never generate bad HTML (notwithstanding the use of <code>Raw</code>).</li>
<li>There’s no <code>Html</code> object — you can’t pass around chunks of HTML as first class values. This makes code reuse and abstraction somewhat more difficult.</li>
<li><code>HtmlBuilder</code> is not re-entrant. You can’t use the same <code>HtmlBuilder</code> from multiple threads.</li>
<li>There’s no <code>async</code> API, because there’s no way to call <code>Dispose</code> asynchronously.</li>
</ul>
<p>Given Twenty’s limitations, my advice is to write your markup using <code>Html</code>, and convert it to <code>HtmlBuilder</code> if you see that building <code>Html</code> values is a performance bottleneck.</p>
<h2 id="performance">Performance</h2>
<p>Eighty is pretty fast. I wrote a benchmark testing how long it takes to spit out around 30kB of HTML (with some encoding characters thrown in for good measure) while running in an in-memory hosted MVC application. Eighty’s synchronous code path does this around three times faster than Razor, and Twenty runs about 30% faster than that — so, four times faster than Razor.</p>
<p>What have I done to make Eighty fast? Honestly, not a huge amount. There are a only few interesting optimisations in Eighty’s codebase.</p>
<ul>
<li>Each call to <code>TextWriter</code>’s <code>Write</code> method is comparatively expensive, so rather than write individual snippets of HTML into the <code>TextWriter</code> directly, Eighty builds up a 4kB buffer and empties it out into the <code>TextWriter</code> when it fills up. The code to fill this buffer is a little fiddly, because you don’t know how long your input string is going to be after HTML-encoding it, so the HTML encoder has to write the encoded HTML in chunks. I toyed with a hand-written encoder, but I wanted to interoperate with ASP.NET’s pluggable <code>HtmlEncoder</code>, so I ended up calling that class’s low-level API.
<ul>
<li>The buffer is managed by <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/HtmlEncodingTextWriter.cs">a mutable struct</a> which is <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/Html.cs#L61-L63">stored on the stack and passed by reference</a> because mutable structs must never be copied. However, <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/AsyncHtmlEncodingTextWriter.cs">the async version</a> <em>cannot</em> be a struct because <code>async</code> methods copy their <code>this</code> variable into a field behind the scenes. My first version of the code used the same mutable struct for both paths, which caused me some head-scratching when the <code>async</code> version didn’t work!</li>
<li>There’s <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/Twenty/HtmlEncodingTextWriterReference.cs">a fun and dangerous hack</a> in Twenty’s codebase to allow storing a reference to one of these stack-allocated structs <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/Twenty/HtmlBuilder.cs">in a field</a>. This is safe as long as the reference in the field doesn’t live longer than the stack location to which it refers, but you don’t get any compile-time feedback about this (I just have to program carefully and hope I don’t make a mistake). This hack makes critical use of C# 7’s “<code>ref</code> return types”, so it wouldn’t have been possible a couple of years ago.</li>
</ul></li>
<li>Calling an <code>async</code> method is comparatively expensive, even if it never goes async, because of the way <code>async</code> methods are translated by the compiler into code which builds and then executes a state machine. In the case of Eighty’s frequently-called <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/AsyncHtmlEncodingTextWriter.cs#L149"><code>WriteRawImpl</code> method</a>, it’s predictable whether a call will complete synchronously (that is, without calling the underlying <code>TextWriter</code>’s <code>WriteAsync</code> method). <a href="https://github.com/benjamin-hodgson/Eighty/commit/1d6b5f45919363c978de05a5a849835cec6a773b#diff-c3aed398c4361803494b9d59237185e2">I split the <code>async</code> method into two parts</a> — a fast wrapper which synchronously returns a <code>Task</code> and an <code>async</code> method which is only called when necessary — and got a ~15% speedup in my end-to-end benchmarks.</li>
<li><code>Html</code> values make use of <code>ImmutableArray</code>s to store their children. <code>ImmutableArray</code> is a thin wrapper over a regular array, so if you have a <code>T[]</code> you should be able to turn it into an <code>ImmutableArray</code> in-place without copying the contents, as long as you’re careful never to modify the original array after freezing it. There are several places in Eighty where this is a safe optimisation, but <code>ImmutableArray</code> doesn’t have a public API to do this. However, since <code>ImmutableArray&lt;T&gt;</code> is a struct with a single private <code>T[]</code> field, its runtime representation is the same as <code>T[]</code>’s. This makes it possible to <a href="https://github.com/benjamin-hodgson/Eighty/blob/3c431c13200022bb34ee3de635cce305384abef5/Eighty/ImmutableArrayFactory.cs#L45">unsafely coerce a <code>T[]</code> to an <code>ImmutableArray&lt;T&gt;</code></a> with no runtime cost.
<ul>
<li>I’ve opened <a href="https://github.com/dotnet/corefx/issues/28064">an issue in the <code>corefx</code> repo</a> proposing an officially-supported API for this use case.</li>
</ul></li>
</ul>
<p>I’m not sure exactly why Razor is slower by comparison. My guess is that Razor’s template compiler just tends to generate comparatively slow C# code — so there’s probably some room for improvement — but I would like to investigate this more.</p>
<hr />
<p>HTML generators are an example of a problem where the spectrum of possible solutions is very broad indeed. Just within the C# ecosystem there exists a menagerie of different templating languages, as well as imperative object-oriented APIs like <code>TagBuilder</code> and streaming APIs like <code>XmlWriter</code>. Even Eighty and Twenty, two implementations of the same idea, are substantially different. You can often find yourself somewhere quite interesting if you appreach a common problem from a different direction than the established solutions. What parts of the library ecosystem do you think you could do with a fresh perspective?</p>
<p>Eighty is available <a href="https://www.nuget.org/packages/Eighty">on Nuget</a>, along with some helpers to integrate Eighty with <a href="https://www.nuget.org/packages/Eighty.AspNet.Mvc">MVC</a> and <a href="https://www.nuget.org/packages/Eighty.AspNetCore">ASP.NET Core</a>. API docs are hosted <a href="https://www.benjamin.pizza/Eighty/v1.2.0/api/Eighty.html">on this very domain</a>, and the code’s all <a href="https://github.com/benjamin-hodgson/Eighty">on GitHub</a> where contributions and bug reports are very welcome!</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on March 16, 2018</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/develop/comments/2018-03-16-eighty/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Zip-Folding</title>
    <link href="http://www.benjamin.pizza/posts/2018-01-10-zip-folding.html" />
    <id>http://www.benjamin.pizza/posts/2018-01-10-zip-folding.html</id>
    <published>2018-01-10T00:00:00Z</published>
    <updated>2018-01-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 10, 2018
    
</div>

<p>One of my favourite little gems of functional programming is the following implementation of the dot product:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">dot ::</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> <span class="dt">Double</span>
xs <span class="ot">`dot`</span> ys <span class="fu">=</span> sum (zipWith (<span class="fu">*</span>) xs ys)</code></pre></div>
<p><code>dot</code> zips two lists of numbers, multiplying each pair of elements using <code>(*)</code>, and then aggregates the results with <code>sum</code>. It’s like a <em>map-reduce</em> program, but it processes two collections, not one. It generalises rather beautifully to any zippily <code>Applicative</code> <code>Foldable</code> container whose elements form a <code>Semiring</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">dot ::</span> (<span class="dt">Semiring</span> a, <span class="dt">Applicative</span> t, <span class="dt">Foldable</span> t) <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> a
xs <span class="ot">`dot`</span> ys <span class="fu">=</span> foldl&#39; (<span class="fu">&lt;+&gt;</span>) zero (liftA2 (<span class="fu">&lt;.&gt;</span>) xs ys)</code></pre></div>
<p>I think I’m particularly taken with this example because it combines three different abstractions in a totally natural way to produce a concise and generic implementation of a well-known program. It’s a beautiful demonstration of how these mathematical tools fit together. It also happens to be an example of a programming pattern that I call <em>zip-folding</em>.</p>
<hr />
<p>Until recently I felt rather embarrassed that my C# generic programming library <a href="https://github.com/benjamin-hodgson/Sawmill">Sawmill</a> didn’t have a good story for consuming more than one tree at a time. I had lots of tools for <a href="https://github.com/benjamin-hodgson/Sawmill/blob/b87687e67185ddc299ad67455bd7c79f97e066b2/Sawmill/Rewriter.SelfAndDescendants.cs">querying</a>, <a href="https://github.com/benjamin-hodgson/Sawmill/blob/b87687e67185ddc299ad67455bd7c79f97e066b2/Sawmill/Rewriter.Rewrite.cs">editing</a>, and <a href="https://github.com/benjamin-hodgson/Sawmill/blob/b87687e67185ddc299ad67455bd7c79f97e066b2/Sawmill/Rewriter.Fold.cs">tearing down</a> single trees, but nothing that could help you process two trees at once. This is a very common requirement - for example, if you’re unit testing a parser or a transformation pass, you need to compare that the output tree to the one that you expected.</p>
<p>I got to thinking about what it means to zip two trees together - an operation which should make sense if you think of a tree as a container of subtrees. Pairing up nodes in a tree is straightforward, even if the two trees are unevenly shaped. You just pair up the children of each pair of nodes, ignoring those which don’t have a partner (the grey-coloured ones in the drawing):</p>
<p><img src="/images/2018-01-10-zip-folding/zip.jpg" alt="Pairing up nodes" width="700" /></p>
<p>But I got stuck on how to plug those paired nodes back into a single tree representing the zipped trees. Nodes typically have space for a fixed number of children, but pairing up children will typically change that number. That is, a binary operator has precisely two children, but when zipping two binary operators together you need to do something with four children.</p>
<p>And, more generally, what would it mean to zip trees recursively? You can imagine a scheme wherein each child of a node is replaced with a tuple of two children. But each child is really a subtree, with its own children, so the two subtrees need to be zipped - but that ought to produce a single tree, not a pair of trees. It’s contradictory! The intuitive idea that a node in a tree is a container of subtrees fails when you consider zipping.</p>
<hr />
<p>Guess where this is going: you can’t <em>zip</em> trees to produce a new tree, but you can <em>zip-fold</em> trees to produce a value. The idea is to take pairs of nodes in a tree and combine them with the results of zipping their children.</p>
<p>Let’s start by looking at (an abbreviated version of) Sawmill’s existing <code>Fold</code>. <code>Fold</code> says <em>if you give me a way to combine a node with the results of folding its children, I can recursively fold the entire tree to produce a single summary value</em>.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">static</span> U Fold&lt;T, U&gt;(
    <span class="kw">this</span> T value,
    Func&lt;T, Children&lt;U&gt;, U&gt; func,
) where T : IRewritable&lt;T&gt;
    =&gt; <span class="fu">func</span>(
        value,
        value.<span class="fu">GetChildren</span>()
            .<span class="fu">Select</span>(child =&gt; child.<span class="fu">Fold</span>(func))
    );</code></pre></div>
<p>Revisiting <a href="https://www.benjamin.pizza/posts/2017-11-13-recursion-without-recursion.html">the JQL example</a>, <code>Fold</code> will take an input tree like <code>[c#] and (not [javascript] or salary:50000gbp)</code> and compute the expression:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="fu">func</span>(
    <span class="kw">new</span> <span class="fu">AndNode</span>(<span class="co">/* ... */</span>),
    Children.<span class="fu">Two</span>(
        <span class="fu">func</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;c#&quot;</span>), Children.<span class="fu">None</span>&lt;U&gt;()),
        <span class="fu">func</span>(
            <span class="kw">new</span> <span class="fu">OrNode</span>(<span class="co">/* ... */</span>),
            Children.<span class="fu">Two</span>(
                <span class="fu">func</span>(
                    <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="co">/* ... */</span>),
                    Children.<span class="fu">One</span>(
                        <span class="fu">func</span>(
                            <span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>),
                            Children.<span class="fu">None</span>&lt;U&gt;()
                        )
                    )
                ),
                <span class="fu">func</span>(<span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>), Children.<span class="fu">None</span>&lt;U&gt;())
            )
        )
    )
)</code></pre></div>
<p><code>Fold</code> traverses a tree from bottom to top, applying <code>func</code> to each subtree and the current set of intermediate results.</p>
<p><code>ZipFold</code> works by analogy to <code>Fold</code>. It says <em>if you give me a way to combine two nodes with the results of zip-folding their children, I can recursively zip the two entire trees to produce a single summary value</em>. <code>ZipFold</code> pairs up the children of the two input nodes using the standard <code>Enumerable.Zip</code>, recursively zip-folds each pair, and then feeds the results to <code>func</code>. Note that the length of the <code>IEnumerable</code> that’s passed to <code>func</code> is the length of the smaller of the two nodes’ collections of children.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">static</span> U ZipFold&lt;T, U&gt;(
    <span class="kw">this</span> T value1,
    T value2
    Func&lt;T, T, IEnumerable&lt;U&gt;, U&gt; func,
) where T : IRewritable&lt;T&gt;
    =&gt; <span class="fu">func</span>(
        value1,
        value2,
        value1.<span class="fu">GetChildren</span>().<span class="fu">Zip</span>(
            value2.<span class="fu">GetChildren</span>(),
            (child1, child2) =&gt; child1.<span class="fu">ZipFold</span>(child2, func)
        )
    );</code></pre></div>
<p>The two trees are zipped together and torn down in a single pass.</p>
<p>Here’s how it looks in Haskell, using the <a href="https://hackage.haskell.org/package/lens-4.15.4/docs/Control-Lens-Plated.html"><code>Control.Lens.Plated</code></a> API. Haskellers like to use tongue-in-cheek Greek names for recursion schemes. Apparently the Greek word for “zip” is “fermouár”, so I’m calling this a <em>fermomorphism</em>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fermo ::</span> <span class="dt">Plated</span> a <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [r] <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> r
fermo f x y <span class="fu">=</span> f x y <span class="fu">$</span>
    zipWith (fermo f) (toListOf plate x) (toListOf plate y)</code></pre></div>
<p>As an example: <code>ZipFold</code> allows you to concisely test a pair of trees for equality, by looking only at one pair of nodes at a time.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">static</span> <span class="dt">bool</span> <span class="fu">Equal</span>(JqlNode j1, JqlNode j2)
    =&gt; j1.<span class="fu">ZipFold</span>&lt;JqlNode, <span class="dt">bool</span>&gt;(
        j2,
        (n1, n2, childrenEqual) =&gt;
        {
            <span class="kw">switch</span> (n1)
            {
                <span class="kw">case</span> SalaryNode s1 when n2 <span class="kw">is</span> SalaryNode s2:
                    <span class="kw">return</span> s1.<span class="fu">Currency</span> == s2.<span class="fu">Currency</span>
                        &amp;&amp; s1.<span class="fu">Amount</span> == s2.<span class="fu">Amount</span>;
                <span class="kw">case</span> TagNode t1 when n2 <span class="kw">is</span> TagNode t2:
                    <span class="kw">return</span> t1.<span class="fu">Tag</span> == t2.<span class="fu">Tag</span>;
                <span class="kw">case</span> AndNode a1 when n2 <span class="kw">is</span> AndNode a2:
                <span class="kw">case</span> OrNode o1 when n2 <span class="kw">is</span> OrNode o2:
                <span class="kw">case</span> NotNode a1 when n2 <span class="kw">is</span> NotNode a2:
                    <span class="kw">return</span> childrenEqual.<span class="fu">All</span>(c =&gt; c);
                <span class="kw">default</span>:
                    <span class="kw">return</span> <span class="kw">false</span>;
            }
        }
    );</code></pre></div>
<p>The <code>ZipFold</code> that you’ll find in Sawmill is actually an <em>n</em>-ary zip-fold. Instead of taking two <code>T</code>s, and passing two <code>T</code>s to <code>func</code>, it works with an arbitrary number of <code>T</code>s. Here’s the code:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">static</span> U ZipFold&lt;T, U&gt;(
    <span class="kw">this</span> T[] values,
    Func&lt;T[], IEnumerable&lt;U&gt;, U&gt; func,
) where T : IRewritable&lt;T&gt;
    =&gt; <span class="fu">func</span>(values, xs.<span class="fu">ZipChildren</span>(children =&gt; children.<span class="fu">ZipFold</span>(func)));

<span class="kw">private</span> <span class="kw">static</span> IEnumerable&lt;U&gt; ZipChildren&lt;T, U&gt;(
    <span class="kw">this</span> T[] input,
    Func&lt;T[], U&gt; zipFunc
) where T : IRewritable&lt;T&gt;
{
    <span class="dt">var</span> enumerators = input
        .<span class="fu">Select</span>(x =&gt; x.<span class="fu">GetChildren</span>().<span class="fu">GetEnumerator</span>())
        .<span class="fu">ToArray</span>();

    <span class="kw">while</span> (enumerators.<span class="fu">All</span>(e =&gt; e.<span class="fu">MoveNext</span>()))
    {
        <span class="kw">yield</span> <span class="kw">return</span> <span class="fu">zipFunc</span>(
            enumerators.<span class="fu">Select</span>(e =&gt; e.<span class="fu">Current</span>).<span class="fu">ToArray</span>()
        );
    }
}</code></pre></div>
<p>Sadly, the invariant that <code>func</code> receives the same number of <code>T</code>s as were passed to <code>ZipFold</code> is not expressible in C#’s type system. So as a consumer of <code>ZipFold</code>, you just have to trust that <code>func</code>’s argument is of a certain size. In the <code>Equal</code> example, that size is two, because we’re consuming two trees:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">static</span> <span class="dt">bool</span> <span class="fu">Equal</span>(JqlNode j1, JqlNode j2)
    =&gt; <span class="kw">new</span>[] { j1, j2 }.<span class="fu">ZipFold</span>&lt;JqlNode, <span class="dt">bool</span>&gt;(
        (ns, childrenEqual) =&gt;
        {
            <span class="kw">switch</span> (ns[<span class="dv">0</span>])
            {
                <span class="kw">case</span> SalaryNode s1 when ns[<span class="dv">1</span>] <span class="kw">is</span> SalaryNode s2:
                    <span class="kw">return</span> s1.<span class="fu">Currency</span> == s2.<span class="fu">Currency</span>
                        &amp;&amp; s1.<span class="fu">Amount</span> == s2.<span class="fu">Amount</span>;
                <span class="kw">case</span> TagNode t1 when ns[<span class="dv">1</span>] <span class="kw">is</span> TagNode t2:
                    <span class="kw">return</span> t1.<span class="fu">Tag</span> == t2.<span class="fu">Tag</span>;
                <span class="kw">case</span> AndNode a1 when ns[<span class="dv">1</span>] <span class="kw">is</span> AndNode a2:
                <span class="kw">case</span> OrNode o1 when ns[<span class="dv">1</span>] <span class="kw">is</span> OrNode o2:
                <span class="kw">case</span> NotNode n1 when ns[<span class="dv">1</span>] <span class="kw">is</span> NotNode n2:
                    <span class="kw">return</span> childrenEqual.<span class="fu">All</span>(c =&gt; c);
                <span class="kw">default</span>:
                    <span class="kw">return</span> <span class="kw">false</span>;
            }
        }
    );</code></pre></div>
<p>Here’s the Haskell transliteration of this <em>n</em>-ary zip-fold function, which <code>traverse</code>s in the <code>ZipList</code> <code>Applicative</code> to concisely zip <em>n</em> lists of children:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fermo ::</span> <span class="dt">Plated</span> a <span class="ot">=&gt;</span> ([a] <span class="ot">-&gt;</span> [r] <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> r
fermo f xs <span class="fu">=</span> f xs (
    map (fermo f) <span class="fu">$</span> getZipList <span class="fu">$</span> traverse (<span class="dt">ZipList</span> <span class="fu">.</span> toListOf plate) xs
    )</code></pre></div>
<p><code>ZipFold</code> is available in <a href="https://www.nuget.org/packages/Sawmill/">version 1.3.0 of Sawmill</a>.</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on January 10, 2018</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/develop/comments/2018-01-10-zip-folding/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Functor Functors</title>
    <link href="http://www.benjamin.pizza/posts/2017-12-15-functor-functors.html" />
    <id>http://www.benjamin.pizza/posts/2017-12-15-functor-functors.html</id>
    <published>2017-12-15T00:00:00Z</published>
    <updated>2017-12-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December 15, 2017
    
</div>

<p>You can teach a new dog old tricks.</p>
<p>One of the fun things about category theory is that once you’ve learned an idea in one context it’s easy to apply it to another one. Of the numerous categories available to Haskell programmers, <strong>Hask</strong>, the category of Haskell types and functions, gets the lion’s share of the attention. Working with standard abstractions in more overlooked categories is a great way to reuse ideas: it makes you look clever, like you’ve invented something new, but actually all you’ve done is put the building blocks together differently. I won’t tell if you don’t.</p>
<h2 id="templates-reusable-records">Templates: Reusable Records</h2>
<p>Every now and then I’ll see a question on Stack Overflow or Reddit in which a programmer is trying to work with a bunch of record types which share a similar structure. For a contrived example, in a shopping system you may want to differentiate between completed checkout forms, which are ready to be dispatched, and “draft” checkout forms, which the user is currently filling in. The simplest way to do this is to build separate types, and write a function to upgrade a draft form to a regular form if all of its fields are filled in.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">CardType</span> <span class="fu">=</span> <span class="dt">Visa</span> <span class="fu">|</span> <span class="dt">AmEx</span> <span class="fu">|</span> <span class="dt">Mastercard</span>

<span class="kw">data</span> <span class="dt">Form</span> <span class="fu">=</span> <span class="dt">Form</span> {
<span class="ot">    form_email ::</span> <span class="dt">Text</span>,
<span class="ot">    form_cardType ::</span> <span class="dt">CardType</span>,
<span class="ot">    form_cardNumber ::</span> <span class="dt">Text</span>,
<span class="ot">    form_cardExpiry ::</span> <span class="dt">Day</span>
}

<span class="kw">data</span> <span class="dt">DraftForm</span> <span class="fu">=</span> <span class="dt">DraftForm</span> {
<span class="ot">    draftForm_email ::</span> <span class="dt">Maybe</span> <span class="dt">Text</span>,
<span class="ot">    draftForm_cardType ::</span> <span class="dt">Maybe</span> <span class="dt">CardType</span>,
<span class="ot">    draftForm_cardNumber ::</span> <span class="dt">Maybe</span> <span class="dt">Text</span>,
<span class="ot">    draftForm_cardExpiry ::</span> <span class="dt">Maybe</span> <span class="dt">Day</span>
}

<span class="ot">toForm ::</span> <span class="dt">DraftForm</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Form</span>
toForm (<span class="dt">DraftForm</span>
    (<span class="dt">Just</span> email)
    (<span class="dt">Just</span> cardType)
    (<span class="dt">Just</span> cardNumber)
    (<span class="dt">Just</span> cardExpiry)) <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">$</span>
        <span class="dt">Form</span> email cardType cardNumber cardExpiry
toForm _ <span class="fu">=</span> <span class="dt">Nothing</span></code></pre></div>
<p>Now, the standard trick to de-duplicate these two types is to derive both from what I’ll call a <em>template</em> type, wrapping each field of the template in some type constructor <code>f</code>. You recover <code>Form</code> by setting <code>f</code> to the boring <code>Identity</code> functor, and you get <code>DraftForm</code> by setting <code>f</code> to <code>Maybe</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">FormTemplate</span> f <span class="fu">=</span> <span class="dt">FormTemplate</span> {
<span class="ot">    _email ::</span> f <span class="dt">Text</span>,
<span class="ot">    _cardType ::</span> f <span class="dt">CardType</span>,
<span class="ot">    _cardNumber ::</span> f <span class="dt">Text</span>,
<span class="ot">    _cardExpiry ::</span> f <span class="dt">Day</span>
}
<span class="kw">type</span> <span class="dt">Form</span> <span class="fu">=</span> <span class="dt">FormTemplate</span> <span class="dt">Identity</span>
<span class="kw">type</span> <span class="dt">DraftForm</span> <span class="fu">=</span> <span class="dt">FormTemplate</span> <span class="dt">Maybe</span></code></pre></div>
<p>So a template is a record type parameterised by a type constructor. It’ll generally have a kind of <code>(* -&gt; *) -&gt; *</code>. The fields of the record are the type constructor applied to a variety of different type arguments. Working with a template typically involves coming up with an interesting type constructor <code>(* -&gt; *)</code> and plugging it in to get interestingly-typed fields. You can think of a record as a container of <code>f</code>s.</p>
<p>This trick has become Haskell folklore - I couldn’t tell you where I first saw it - but I’ve only seen a few people talk about what happens when you treat templates as first class citizens. To get used to this style, a simple example is giving names to specific instantiations of arbitrary templates:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Record</span> t <span class="fu">=</span> t <span class="dt">Identity</span>
<span class="kw">type</span> <span class="dt">Partial</span> t <span class="fu">=</span> t <span class="dt">Maybe</span>

<span class="kw">type</span> <span class="dt">Form</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="dt">FormTemplate</span>
<span class="kw">type</span> <span class="dt">DraftForm</span> <span class="fu">=</span> <span class="dt">Partial</span> <span class="dt">FormTemplate</span></code></pre></div>
<p>The rest of this blog post is about treating template types intuitively as fixed-size containers of functors. I’ll be taking familiar tools for working with containers of <em>values</em> - <code>Functor</code>, <code>Traversable</code>, <code>Representable</code> - and applying them to the context of containers of <em>functors</em>.</p>
<h2 id="functors-from-the-category-of-endofunctors">Functors from the Category of Endofunctors</h2>
<p>In Haskell, categories are represented as a <em>kind</em> <code>k</code> of objects and a <em>type constructor</em> <code>c :: k -&gt; k -&gt; *</code> of morphisms between those objects. If the category <code>C</code> has objects in <code>k1</code> and morphisms in <code>c</code>, and <code>D</code> has objects in <code>k2</code> and morphisms in <code>d</code>, then a functor from <code>C</code> to <code>D</code> is a type constructor <code>f :: k1 -&gt; k2</code> mapping objects paired with an operation <code>fmap :: c a b -&gt; d (f a) (f b)</code> mapping the morphisms. The standard <code>Functor</code> class is for <em>endofunctors on <strong>Hask</strong></em> - the special case in which <code>k1 ~ k2 ~ *</code> and <code>c ~ d ~ (-&gt;)</code>.</p>
<p><img src="/images/2017-12-15-functor-functors/hask.jpg" alt="Endofunctors on Hask" width="700" /></p>
<p>Given two categories <code>C</code> and <code>D</code>, you can construct the category of functors between <code>C</code> and <code>D</code>, written as <code>[C, D]</code>. Objects in this category are functors from <code>C</code> to <code>D</code>, and morphisms are natural transformations between those functors. Since <code>[C, D]</code> is a regular category, you can of course have functors mapping that category to other categories. So in Haskell that’d be a type of kind <code>(k1 -&gt; k2) -&gt; k3</code>. I’ll call such types <em>functor functors</em>.</p>
<p>We’re talking about record templates of kind <code>(* -&gt; *) -&gt; *</code>. This fits the pattern of a functor from the functor category, with <code>k1 ~ k2 ~ k3 ~ *</code>. So the functor category in question is the category of endofunctors on <strong>Hask</strong> (that is, members of the standard <code>Functor</code> class), and the destination category is <strong>Hask</strong>. So it’s reasonable to expect record templates to be functorial in their argument:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- natural transformations between functors f and g</span>
<span class="kw">type</span> f <span class="fu">~&gt;</span> g <span class="fu">=</span> forall x<span class="fu">.</span> f x <span class="ot">-&gt;</span> g x

<span class="co">-- &quot;functor functors&quot;, functors from the functor category</span>
<span class="kw">class</span> <span class="dt">FFunctor</span> f <span class="kw">where</span>
<span class="ot">    ffmap ::</span> (<span class="dt">Functor</span> g, <span class="dt">Functor</span> h) <span class="ot">=&gt;</span> (g <span class="fu">~&gt;</span> h) <span class="ot">-&gt;</span> f g <span class="ot">-&gt;</span> f h

<span class="kw">instance</span> <span class="dt">FFunctor</span> <span class="dt">FormTemplate</span> <span class="kw">where</span>
    ffmap eta (<span class="dt">FormTemplate</span> email cardType cardNumber cardExpiry)
        <span class="fu">=</span> <span class="dt">FormTemplate</span>
            (eta email)
            (eta cardType)
            (eta cardNumber)
            (eta cardExpiry)</code></pre></div>
<p><code>FFunctor</code> comes with the usual functor laws. The only difference is the types.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- identity</span>
ffmap id <span class="fu">=</span> id

<span class="co">-- composition</span>
ffmap (eta <span class="fu">.</span> phi) <span class="fu">=</span> ffmap eta <span class="fu">.</span> ffmap phi</code></pre></div>
<p><img src="/images/2017-12-15-functor-functors/ffunctor.jpg" alt="Functor functors" width="700" /></p>
<p><code>ffmap</code> encodes the notion of generalising the functor a template has been instantiated with. If you can embed the functor <code>f</code> into <code>g</code>, then you can map a record of <code>f</code>s to a record of <code>g</code>s by embedding each <code>f</code>. (This is also sometimes called “hoisting”.) For example, the boring <code>Identity</code> functor can be embedded into an arbitrary <code>Applicative</code> by injecting the contained value using <code>pure</code>. We can use this to turn a total record into a partial one:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">generalise ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> <span class="dt">Identity</span> a <span class="ot">-&gt;</span> f a
generalise (<span class="dt">Identity</span> x) <span class="fu">=</span> pure x

<span class="ot">toPartial ::</span> <span class="dt">FFunctor</span> t <span class="ot">=&gt;</span> <span class="dt">Record</span> t <span class="ot">-&gt;</span> <span class="dt">Partial</span> t
toPartial <span class="fu">=</span> ffmap generalise</code></pre></div>
<h2 id="traversing-records">Traversing Records</h2>
<p>Now that we have a new dog, it’s natural to ask which old tricks we can teach it. With the intuition that a template <code>t f</code> is like a container of <code>f</code>s, what does it mean to traverse such a container? <code>sequenceA :: Applicative f =&gt; t (f a) -&gt; f (t a)</code> takes a container of strategies to produce values and sequences them to get a strategy to produce a container of values. Replacing <em>value</em> with <em>functor</em> in the above sentence, it’s clear that we need to decide on a notion of “strategy to produce a functor”. <a href="https://stackoverflow.com/questions/44187945/what-should-a-higher-order-traversable-class-look-like">With thanks to Li-yao Xia</a>, the simplest of such notions is a regular applicative functor <code>a</code> returning a functorial value <code>g x</code> - that is, <code>Compose a g</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">FFunctor</span> t <span class="ot">=&gt;</span> <span class="dt">FTraversable</span> t <span class="kw">where</span>
<span class="ot">    ftraverse ::</span> (<span class="dt">Functor</span> f, <span class="dt">Functor</span> g, <span class="dt">Applicative</span> a)
              <span class="ot">=&gt;</span> (f <span class="fu">~&gt;</span> <span class="dt">Compose</span> a g) <span class="ot">-&gt;</span> t f <span class="ot">-&gt;</span> a (t g)
    ftraverse eta <span class="fu">=</span> fsequence <span class="fu">.</span> ffmap eta
<span class="ot">    fsequence ::</span> (<span class="dt">Functor</span> f, <span class="dt">Applicative</span> a)
              <span class="ot">=&gt;</span> t (<span class="dt">Compose</span> a f) <span class="ot">-&gt;</span> a (t f)
    fsequence <span class="fu">=</span> ftraverse id

<span class="ot">ffmapDefault ::</span> (<span class="dt">Functor</span> f, <span class="dt">Functor</span> g, <span class="dt">FTraversable</span> t)
             <span class="ot">=&gt;</span> (f <span class="fu">~&gt;</span> g) <span class="ot">-&gt;</span> t f <span class="ot">-&gt;</span> t g
ffmapDefault eta <span class="fu">=</span>
    runIdentity <span class="fu">.</span> ftraverse (<span class="dt">Compose</span> <span class="fu">.</span> <span class="dt">Identity</span> <span class="fu">.</span> eta)

<span class="ot">fsequence&#39; ::</span> (<span class="dt">FTraversable</span> t, <span class="dt">Applicative</span> a) <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> a (<span class="dt">Record</span> t)
fsequence&#39; <span class="fu">=</span> ftraverse (<span class="dt">Compose</span> <span class="fu">.</span> fmap <span class="dt">Identity</span>)</code></pre></div>
<p>The <code>FTraversable</code> laws come about by adjusting the <code>Traversable</code> laws to add some <code>Compose</code>-bookkeeping.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- naturality</span>
nu <span class="fu">.</span> ftraverse eta <span class="fu">=</span> ftraverse (<span class="dt">Compose</span> <span class="fu">.</span> nu <span class="fu">.</span> getCompose <span class="fu">.</span> eta)
<span class="co">-- for any applicative transformation nu</span>

<span class="co">-- identity</span>
ftraverse (<span class="dt">Compose</span> <span class="fu">.</span> <span class="dt">Identity</span>) <span class="fu">=</span> <span class="dt">Identity</span>

<span class="co">-- composition</span>
ftraverse (<span class="dt">Compose</span> <span class="fu">.</span> <span class="dt">Compose</span> <span class="fu">.</span> fmap (getCompose<span class="fu">.</span>phi) <span class="fu">.</span> getCompose <span class="fu">.</span> eta)
    <span class="fu">=</span> <span class="dt">Compose</span> <span class="fu">.</span> fmap (ftraverse phi) <span class="fu">.</span> ftraverse eta</code></pre></div>
<p>Implementations of <code>traverse</code> look like implementations of <code>fmap</code> but in an applicative context. Likewise, implementations of <code>ftraverse</code> look like implementations of <code>ffmap</code> in an applicative context, with a few <code>getCompose</code>s scattered around.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">FTraversable</span> <span class="dt">FormTemplate</span> <span class="kw">where</span>
    ftraverse eta (<span class="dt">FormTemplate</span> email cardType cardNumber cardExpiry)
        <span class="fu">=</span> <span class="dt">FormTemplate</span> <span class="fu">&lt;$&gt;</span>
            (getCompose <span class="fu">$</span> eta email) <span class="fu">&lt;*&gt;</span>
            (getCompose <span class="fu">$</span> eta cardType) <span class="fu">&lt;*&gt;</span>
            (getCompose <span class="fu">$</span> eta cardNumber) <span class="fu">&lt;*&gt;</span>
            (getCompose <span class="fu">$</span> eta cardExpiry)</code></pre></div>
<p>This is where things start to get interesting. The <code>toForm</code> function, which converts a draft form to a regular form if all of its fields have been filled in, can be defined tersely in terms of <code>ftraverse</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">toRecord ::</span> <span class="dt">FTraversable</span> t <span class="ot">=&gt;</span> <span class="dt">Partial</span> t <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Record</span> t)
toRecord <span class="fu">=</span> ftraverse (<span class="dt">Compose</span> <span class="fu">.</span> fmap <span class="dt">Identity</span>)

<span class="ot">toForm ::</span> <span class="dt">DraftForm</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Form</span>
toForm <span class="fu">=</span> toRecord</code></pre></div>
<p>Here’s another example: a generic program, defined by analogy to <code>Foldable</code>’s <code>foldMap</code>, to collapse the fields of a record into a monoidal value. Note that <code>f () -&gt; m</code> is isomorphic to, but simpler than, <code>forall x. f x -&gt; m</code>. Annoyingly, we have to give a type signature to <code>mkConst</code> to resolve the ambiguity over <code>g</code> in the call to <code>ftraverse</code>. I’m picking <code>Empty</code> as a way of demonstrating that I have nothing up my sleeves.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Empty</span> a <span class="kw">deriving</span> <span class="dt">Functor</span>

<span class="ot">ffoldMap ::</span> forall f t m<span class="fu">.</span> (<span class="dt">Monoid</span> m, <span class="dt">Functor</span> f, <span class="dt">FTraversable</span> t)
         <span class="ot">=&gt;</span> (f () <span class="ot">-&gt;</span> m) <span class="ot">-&gt;</span> t f <span class="ot">-&gt;</span> m
ffoldMap f <span class="fu">=</span> getConst <span class="fu">.</span> ftraverse mkConst
    <span class="kw">where</span>
        <span class="co">-- using ScopedTypeVariables to bind f</span>
<span class="ot">        mkConst ::</span> f x <span class="ot">-&gt;</span> <span class="dt">Compose</span> (<span class="dt">Const</span> m) <span class="dt">Empty</span> x
        mkConst <span class="fu">=</span> <span class="dt">Compose</span> <span class="fu">.</span> <span class="dt">Const</span> <span class="fu">.</span> f <span class="fu">.</span> (<span class="fu">$&gt;</span> ())</code></pre></div>
<h2 id="zipping-templates">Zipping templates</h2>
<p>Given a pair of records of the same shape <code>t</code>, we should be able to combine them point-wise, matching up the fields of each: <code>fzip :: t f -&gt; t g -&gt; t (Product f g)</code>. In <strong>Hask</strong>, “combining point-wise” is exactly what the “reader” applicative <code>(-&gt;) r</code> does, so any functor which enjoys an isomorphism to <code>(-&gt;) r</code> for some <code>r</code> has at least a zippy <code>Applicative</code> instance. Such functors are called <em>representable functors</em> and they are members of the class <a href="https://hackage.haskell.org/package/adjunctions-4.3/docs/Data-Functor-Rep.html#t:Representable"><code>Representable</code></a>.</p>
<p>Of course, we’re working with functors from the functor category, so the relevant notion of <code>Representable</code> will need a little adjustment. Instead of an isomorphism to a function <code>(-&gt;) r</code> we’ll use an isomorphism to a natural transformation <code>(~&gt;) r</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">FFunctor</span> t <span class="ot">=&gt;</span> <span class="dt">FRepresentable</span> t <span class="kw">where</span>
    <span class="kw">type</span> <span class="dt">FRep</span><span class="ot"> t ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span>
<span class="ot">    ftabulate ::</span> (<span class="dt">FRep</span> t <span class="fu">~&gt;</span> f) <span class="ot">-&gt;</span> t f
<span class="ot">    findex ::</span> t f <span class="ot">-&gt;</span> <span class="dt">FRep</span> t a <span class="ot">-&gt;</span> f a

<span class="ot">fzipWith ::</span> <span class="dt">FRepresentable</span> t
         <span class="ot">=&gt;</span> (forall x<span class="fu">.</span> f x <span class="ot">-&gt;</span> g x <span class="ot">-&gt;</span> h x)
         <span class="ot">-&gt;</span>            t f <span class="ot">-&gt;</span> t g <span class="ot">-&gt;</span> t h
fzipWith f t u <span class="fu">=</span> ftabulate <span class="fu">$</span> \r <span class="ot">-&gt;</span> f (findex t r) (findex u r)

<span class="ot">fzipWith3 ::</span> <span class="dt">FRepresentable</span> t
          <span class="ot">=&gt;</span> (forall x<span class="fu">.</span> f x <span class="ot">-&gt;</span> g x <span class="ot">-&gt;</span> h x <span class="ot">-&gt;</span> k x)
          <span class="ot">-&gt;</span>            t f <span class="ot">-&gt;</span> t g <span class="ot">-&gt;</span> t h <span class="ot">-&gt;</span> t k
fzipWith3 f t u v <span class="fu">=</span> ftabulate <span class="fu">$</span>
    \r <span class="ot">-&gt;</span> f (findex t r) (findex u r) (findex v r)

<span class="ot">fzip ::</span> <span class="dt">FRepresentable</span> t <span class="ot">=&gt;</span> t f <span class="ot">-&gt;</span> t g <span class="ot">-&gt;</span> t (<span class="dt">Product</span> f g)
fzip <span class="fu">=</span> fzipWith <span class="dt">Pair</span></code></pre></div>
<p>The laws for <code>FRepresentable</code> simply state that <code>ftabulate</code> and <code>findex</code> must witness an isomorphism:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- isomorphism</span>
ftabulate <span class="fu">.</span> findex <span class="fu">=</span> findex <span class="fu">.</span> ftabulate <span class="fu">=</span> id</code></pre></div>
<p><code>FRep</code> will typically be a GADT: it tells you what type of value one should expect to find at a given position in a record.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">FormTemplateRep</span> a <span class="kw">where</span>
    <span class="dt">Email</span><span class="ot"> ::</span> <span class="dt">FormTemplateRep</span> <span class="dt">Text</span>
    <span class="dt">CardType</span><span class="ot"> ::</span> <span class="dt">FormTemplateRep</span> <span class="dt">CardType</span>
    <span class="dt">CardNumber</span><span class="ot"> ::</span> <span class="dt">FormTemplateRep</span> <span class="dt">Text</span>
    <span class="dt">CardExpiry</span><span class="ot"> ::</span> <span class="dt">FormTemplateRep</span> <span class="dt">Day</span>

<span class="kw">instance</span> <span class="dt">FRepresentable</span> <span class="dt">FormTemplate</span> <span class="kw">where</span>
    <span class="kw">type</span> <span class="dt">FRep</span> <span class="dt">FormTemplate</span> <span class="fu">=</span> <span class="dt">FormTemplateRep</span>

    ftabulate eta <span class="fu">=</span> <span class="dt">FormTemplate</span>
        (eta <span class="dt">Email</span>)
        (eta <span class="dt">CardType</span>)
        (eta <span class="dt">CardNumber</span>)
        (eta <span class="dt">CardExpiry</span>)
    
    findex p <span class="dt">Email</span> <span class="fu">=</span> _email p
    findex p <span class="dt">CardType</span> <span class="fu">=</span> _cardType p
    findex p <span class="dt">CardNumber</span> <span class="fu">=</span> _cardNumber p
    findex p <span class="dt">CardExpiry</span> <span class="fu">=</span> _cardExpiry p</code></pre></div>
<p>Something useful you can do with this infrastructure: filling in defaults for missing values of a partial record. Or, looking at it the other way, overriding certain parts of a record.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">with ::</span> <span class="dt">FRepresentable</span> t <span class="ot">=&gt;</span> <span class="dt">Record</span> t <span class="ot">-&gt;</span> <span class="dt">Partial</span> t <span class="ot">-&gt;</span> <span class="dt">Record</span> t
with <span class="fu">=</span> fzipWith override
    <span class="kw">where</span> override x <span class="dt">Nothing</span> <span class="fu">=</span> x
          override _ (<span class="dt">Just</span> y) <span class="fu">=</span> <span class="dt">Identity</span> y

<span class="ot">fillInDefaults ::</span> <span class="dt">FRepresentable</span> t <span class="ot">=&gt;</span> <span class="dt">Partial</span> t <span class="ot">-&gt;</span> <span class="dt">Record</span> t <span class="ot">-&gt;</span> <span class="dt">Record</span> t
fillInDefaults t defaults <span class="fu">=</span> defaults <span class="ot">`with`</span> t</code></pre></div>
<p>You can also make a record of <code>Monoid</code> values into a <code>Monoid</code>, once again by zipping.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Wrap</span> t f <span class="fu">=</span> <span class="dt">Wrap</span> {<span class="ot"> unWrap ::</span> t f }
makeWrapped <span class="ch">&#39;&#39;</span><span class="dt">Wrap</span>  <span class="co">-- from Control.Lens.Wrapped</span>

<span class="kw">instance</span> (<span class="dt">FRepresentable</span> t, <span class="dt">Monoid</span> c) <span class="ot">=&gt;</span> <span class="dt">Monoid</span> (<span class="dt">Wrap</span> t (<span class="dt">Const</span> c)) <span class="kw">where</span>
    mempty <span class="fu">=</span> <span class="dt">Wrap</span> <span class="fu">$</span> ftabulate (const (<span class="dt">Const</span> mempty))
    <span class="dt">Wrap</span> t <span class="ot">`mappend`</span> <span class="dt">Wrap</span> u <span class="fu">=</span> <span class="dt">Wrap</span> <span class="fu">$</span> fzipWith mappend t u</code></pre></div>
<h2 id="lenses">Lenses</h2>
<p>Rather than come up with a new notion of <code>Lens</code> formulated in terms of <code>FFunctor</code>, we can reuse the standard <code>Lens</code> type as long as we’re careful about how polymorphic lenses should be. Specifically, a lens into a record template should express no opinion as to which functor the template should be instantiated with.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">FLens</span> t a <span class="fu">=</span> <span class="dt">FLens</span> (forall f<span class="fu">.</span> <span class="dt">Lens&#39;</span> (t f) (f a))</code></pre></div>
<p>We can store a template’s lenses in an instance of the template itself!</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Lenses</span> t <span class="fu">=</span> t (<span class="dt">FLens</span> t)

<span class="kw">class</span> <span class="dt">HasLenses</span> t <span class="kw">where</span>
<span class="ot">    lenses ::</span> <span class="dt">Lenses</span> t

makeLenses <span class="ch">&#39;&#39;</span><span class="dt">FormTemplate</span>
<span class="kw">instance</span> <span class="dt">HasLenses</span> <span class="dt">FormTemplate</span> <span class="kw">where</span>
    lenses <span class="fu">=</span> <span class="dt">FormTemplate</span> {
        _email <span class="fu">=</span> <span class="dt">FLens</span> email,
        _cardType <span class="fu">=</span> <span class="dt">FLens</span> cardType,
        _cardNumber <span class="fu">=</span> <span class="dt">FLens</span> cardNumber,
        _cardExpiry <span class="fu">=</span> <span class="dt">FLens</span> cardExpiry
    }</code></pre></div>
<h2 id="compositional-validation">Compositional Validation</h2>
<p>Now for an extended example: form validation. We’ll be making use of all of the tools from above - zipping, traversing, and mapping - to design a typed API for validating individual fields of a form.</p>
<p><code>Either</code> isn’t a great choice for a validation monad, because <code>Either</code> aborts the computation at the first failure. You typically want to report all the errors in a form. Instead, we’ll be working with the following type, which is isomorphic to <code>Either</code> but with an <code>Applicative</code> instance which returns <em>all</em> of the failures in a given computation, combining the values using a <code>Monoid</code>. So it’s kind of a Frankensteinian mishmash of the <code>Either</code> and <code>Writer</code> applicatives.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Validation</span> e a <span class="fu">=</span> <span class="dt">Failure</span> e <span class="fu">|</span> <span class="dt">Success</span> a <span class="kw">deriving</span> <span class="dt">Functor</span>

<span class="kw">instance</span> <span class="dt">Bifunctor</span> <span class="dt">Validation</span> <span class="kw">where</span>
    bimap f g (<span class="dt">Failure</span> e) <span class="fu">=</span> <span class="dt">Failure</span> (f e)
    bimap f g (<span class="dt">Success</span> x) <span class="fu">=</span> <span class="dt">Success</span> (g x)

<span class="kw">instance</span> <span class="dt">Monoid</span> e <span class="ot">=&gt;</span> <span class="dt">Applicative</span> (<span class="dt">Validation</span> e) <span class="kw">where</span>
    pure <span class="fu">=</span> <span class="dt">Success</span>
    <span class="dt">Success</span> f <span class="fu">&lt;*&gt;</span> <span class="dt">Success</span> x <span class="fu">=</span> <span class="dt">Success</span> (f x)
    <span class="dt">Failure</span> e1 <span class="fu">&lt;*&gt;</span> <span class="dt">Failure</span> e2 <span class="fu">=</span> <span class="dt">Failure</span> (e1 <span class="ot">`mappend`</span> e2)
    <span class="dt">Failure</span> e1 <span class="fu">&lt;*&gt;</span> _ <span class="fu">=</span> <span class="dt">Failure</span> e1
    _ <span class="fu">&lt;*&gt;</span> <span class="dt">Failure</span> e2 <span class="fu">=</span> <span class="dt">Failure</span> e2</code></pre></div>
<p>This <code>Applicative</code> instance has no compatible <code>Monad</code> instance.</p>
<p>We’ll build a library for validation processes which examine a single field of a record at a time. A validation rule for a field typed <code>a</code> is a function which takes an <code>a</code> and returns a <code>Validation e a</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Validator</span> e a <span class="fu">=</span> <span class="dt">Validator</span> {<span class="ot"> runValidator ::</span> a <span class="ot">-&gt;</span> <span class="dt">Validation</span> e a }

<span class="co">-- a validator which always succeeds</span>
<span class="ot">noop ::</span> <span class="dt">Validator</span> e a
noop <span class="fu">=</span> <span class="dt">Validator</span> <span class="dt">Success</span></code></pre></div>
<p>If a given field has multiple validation rules, you can compose them under the assumption that each validator leaves its input unchanged.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">(&amp;&gt;) ::</span> <span class="dt">Monoid</span> e <span class="ot">=&gt;</span> <span class="dt">Validator</span> e a <span class="ot">-&gt;</span> <span class="dt">Validator</span> e a <span class="ot">-&gt;</span> <span class="dt">Validator</span> e a
<span class="dt">Validator</span> f <span class="fu">&amp;&gt;</span> <span class="dt">Validator</span> g <span class="fu">=</span> <span class="dt">Validator</span> <span class="fu">$</span> \x <span class="ot">-&gt;</span> f x <span class="fu">*&gt;</span> g x

<span class="co">-- for example</span>
<span class="ot">emailValidator ::</span> <span class="dt">Validator</span> [<span class="dt">Text</span>] <span class="dt">Text</span>
emailValidator <span class="fu">=</span> hasAtSymbol <span class="fu">&amp;&gt;</span> hasTopLevelDomain
    <span class="kw">where</span>
        hasAtSymbol <span class="fu">=</span> <span class="dt">Validator</span> <span class="fu">$</span> \email <span class="ot">-&gt;</span> 
            <span class="kw">if</span> <span class="st">&quot;@&quot;</span> <span class="ot">`isInfixOf`</span> email
            <span class="kw">then</span> <span class="dt">Success</span> email
            <span class="kw">else</span> <span class="dt">Failure</span> [<span class="st">&quot;No @ in email&quot;</span>]
        hasTopLevelDomain <span class="fu">=</span> <span class="dt">Validator</span> <span class="fu">$</span> \email <span class="ot">-&gt;</span>
            <span class="kw">if</span> any (<span class="ot">`isSuffixOf`</span> email) topLevelDomains
            <span class="kw">then</span> <span class="dt">Success</span> email
            <span class="kw">else</span> <span class="dt">Failure</span> [<span class="st">&quot;Invalid TLD&quot;</span>]
        topLevelDomains <span class="fu">=</span> [<span class="st">&quot;.com&quot;</span>, <span class="st">&quot;.org&quot;</span>, <span class="st">&quot;.co.uk&quot;</span>]  <span class="co">-- etc</span></code></pre></div>
<p>The plan is to store these <code>Validator</code>s in a record template, zip them along an instance of the record itself, and then traverse the result to get either a validated record or a collection of errors. To make things interesting, we’ll store the validation results for a given field in the matching field of another record.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Validators</span> e t <span class="fu">=</span> t (<span class="dt">Validator</span> e)
<span class="kw">type</span> <span class="dt">Errors</span> e t <span class="fu">=</span> t (<span class="dt">Const</span> e)

<span class="co">-- turn a record of validators into a validator of records</span>
<span class="ot">validate ::</span> (<span class="dt">HasLenses</span> t, <span class="dt">FTraversable</span> t, <span class="dt">FRepresentable</span> t, <span class="dt">Monoid</span> e)
         <span class="ot">=&gt;</span> <span class="dt">Validators</span> e t
         <span class="ot">-&gt;</span> <span class="dt">Validator</span> (<span class="dt">Errors</span> e t) (<span class="dt">Record</span> t)
validate validators <span class="fu">=</span> <span class="dt">Validator</span> <span class="fu">$</span> \record <span class="ot">-&gt;</span>
    first unWrap <span class="fu">$</span>
    fsequence&#39; <span class="fu">$</span>
    fzipWith3 applyValidator lenses validators record
    <span class="kw">where</span>
        applyValidator
            (<span class="dt">FLens</span> lens)
            (<span class="dt">Validator</span> validator)
            (<span class="dt">Identity</span> value) <span class="fu">=</span>
                <span class="kw">let</span> setError e <span class="fu">=</span> mempty <span class="fu">&amp;</span> _Wrapped&#39;<span class="fu">.</span>lens<span class="fu">.</span>_Wrapped&#39; <span class="fu">.~</span> e
                <span class="kw">in</span> first setError <span class="fu">$</span> validator value</code></pre></div>
<p><code>applyValidator</code> takes a lens into a record field, a validator for that field and the value in that field. It applies the validator to the value; upon failure it stores the error message (<code>e</code>) in the correct field of the <code>Errors</code> record using the lens. <code>fzipWith3</code> handles the logic of running <code>applyValidator</code> for each field of the record, then <code>fsequence'</code> combines the resulting <code>Validation</code> applicative actions into a single one. So all of the errors from all of the fields are eventually collected into the matching fields of the <code>Errors</code> record and combined monoidally.</p>
<p>A quick test, wherein I test validation on the email field:</p>
<pre><code>ghci&gt; let formValidator = validate
    $ FormTemplate emailValidator noop noop noop
ghci&gt; let today = read &quot;2017-08-17&quot; :: Day

ghci&gt; let form1 = FormTemplate
    (Identity &quot;bhodgson@stackoverflow.com&quot;)
    (Identity Visa)
    (Identity &quot;1234567890123456&quot;)
    (Identity today)
ghci&gt; runValidator formValidator form1
Success (FormTemplate {
    _email = Identity &quot;bhodgson@stackoverflow.com&quot;,
    _cardType = Identity Visa,
    _cardNumber = Identity &quot;1234567890123456&quot;,
    _cardExpiry = Identity 2017-08-17
    })

ghci&gt; let form2 = FormTemplate
    (Identity &quot;notanemail&quot;)
    (Identity Visa)
    (Identity &quot;1234567890123456&quot;)
    (Identity today)
ghci&gt; runValidator formValidator form2
Failure (FormTemplate {
    _email = Const [&quot;No @ in email&quot;,&quot;Invalid TLD&quot;],
    _cardType = Const [],
    _cardNumber = Const [],
    _cardExpiry = Const []
    })</code></pre>
<h2 id="code-review">Code review</h2>
<p>So we have a categorical framework for working with records and templates. Other things fit into this framework, more or less neatly:</p>
<ul>
<li>Monad transformers are often functorial in their <code>m</code> argument.</li>
<li><code>Fix f</code> (a “list of <code>f</code>s”, if you will) is also a functor functor, where <code>ffmap</code>ping represents a change of variables.</li>
<li>Since the <code>Const</code>, <code>Sum</code>, <code>Product</code> and <code>Compose</code> type combinators are poly-kinded, they can be reused as functor functors too.</li>
<li>Add another primitive <code>FFunctor</code> to apply a functor to a type, <code>newtype At a f = At { getAt :: f a }</code>, and you have a kit to build polynomial functor functors with which you can build templates and write generic programs.</li>
</ul>
<p>One design decision I made when developing the <code>FFunctor</code> class was to give <code>ffmap</code> a <code>(Functor f, Functor g)</code> constraint, so you can only <code>ffmap</code> between types that are in fact functors. This is mathematically principled in some sense, but it has certain engineering tradeoffs compared to an unconstrained type for <code>ffmap</code>. It enables more instances of <code>FFunctor</code> - for example, you can only write <code>Fix</code>’s <code>ffmap</code> with a <code>Functor</code> constraint for either the input or output type parameters - but it rules out certain usages of <code>ffmap</code>. You can’t <code>ffmap</code> over a template containing <code>Validator</code>s, for example, because <code>Validator</code> is not a <code>Functor</code>. I <em>didn’t</em> put the same <code>Functor</code> constraints into <code>FRepresentable</code>’s methods. An <code>FRep</code> type typically won’t be functorial - it’ll be GADT-like - so adding a <code>Functor (FRep t)</code> constraint would be far too restrictive.</p>
<p>You’ll notice that the concept of an applicative functor functor is conspicuously absent from my presentation above. <code>FApplicative</code> would probably look something like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> (f <span class="fu">:-&gt;</span> g) a <span class="fu">=</span> <span class="dt">Morph</span> {<span class="ot"> getMorph ::</span> f a <span class="ot">-&gt;</span> g a }

<span class="kw">class</span> <span class="dt">FFunctor</span> t <span class="ot">=&gt;</span> <span class="dt">FApplicative</span> t <span class="kw">where</span>
<span class="ot">    fpure ::</span> (forall a<span class="fu">.</span> f a) <span class="ot">-&gt;</span> t f
<span class="ot">    fap ::</span> t (f <span class="fu">:-&gt;</span> g) <span class="ot">-&gt;</span> t f <span class="ot">-&gt;</span> t g

<span class="ot">fliftA ::</span> <span class="dt">FApplicative</span> t <span class="ot">=&gt;</span> (f <span class="fu">~&gt;</span> g) <span class="ot">-&gt;</span> t f <span class="ot">-&gt;</span> t g
fliftA eta t <span class="fu">=</span> fpure (<span class="dt">Morph</span> eta) <span class="ot">`fap`</span> t

<span class="kw">instance</span> <span class="dt">FApplicative</span> <span class="dt">FormTemplate</span> <span class="kw">where</span>
    fpure x <span class="fu">=</span> <span class="dt">FormTemplate</span> x x x x
    fap
        (<span class="dt">FormTemplate</span>
            (<span class="dt">Morph</span> f1)
            (<span class="dt">Morph</span> f2)
            (<span class="dt">Morph</span> f3)
            (<span class="dt">Morph</span> f4))
        (<span class="dt">FormTemplate</span>
            email
            cardType
            cardNumber
            cardExpiry)
        <span class="fu">=</span> <span class="dt">FormTemplate</span>
            (f1 email)
            (f2 cardType)
            (f3 cardNumber)
            (f4 cardExpiry)</code></pre></div>
<p><code>FApplicative</code> is a more general interface than <code>FRepresentable</code>, in that it supports notions of composition other than zipping. However, that bookkeeping <code>:-&gt;</code> <code>newtype</code> wrapper is inconvenient. With the normal <code>Applicative</code> class you can map an <em>n</em>-ary function over <em>n</em> applicative values directly: <code>f &lt;$&gt; x &lt;*&gt; y &lt;*&gt; z</code>. With <code>FApplicative</code> you have to apply the <code>Morph</code> constructor as many times as <code>f</code> has arguments: <code>fpure (Morph $ \x -&gt; Morph $ \y -&gt; Morph $ \z -&gt; f x y z) `fap` t `fap` u `fap` v</code>, which becomes very unwieldy very quickly. (<a href="https://www.reddit.com/r/haskell/comments/78xxql/structures_of_arrays_functors_and_continuations/doy80ft/">/u/rampion has come up with nicer syntax for this</a>, but it involves <a href="https://gist.github.com/rampion/20291bde6c8568c11f9cc5923d9639eb#file-ffunctor-hs-L28">a more complicated formulation of <code>FApplicative</code></a>.) On the other hand, <code>FApplicative</code> does open up some interesting options for the design of <code>FTraversable</code>: one can traverse in an <code>FApplicative</code> rather than an <code>Applicative</code>. This gives some nice type signatures - <code>fsequence :: (FTraversable t, FApplicative f) =&gt; t f -&gt; f t</code> - and is strictly more general than the <code>FTraversable</code> I gave above, since any <code>Applicative</code> can be lifted into an <code>FApplicative</code> by composition (<code>newtype ComposeAt a f g = ComposeAt { getComposeAt :: f (g a) }</code>).</p>
<p>How useful are these tools in practice? Would I structure a production application around functor functors? Probably not. It’s a question of balance - while it’s useful to recognise functorial structures in categories other than <strong>Hask</strong> as a thinking tool, actually representing such abstractions in code doesn’t always pay off. Haskell already has a rich ecosystem of tools for working with the <code>Functor</code> family, but there’s much less code in the wild that’s structured around functor functors. This is partly because <code>Functor</code> has the advantage of being a standard class in <code>base</code>, but it’s also because code built around functor functors is a little less convenient to work with, typically requiring some tedious <code>newtype</code> bookkeeping.</p>
<p>Over the course of putting together this article I came across some work by others on this very topic. I’ve spotted versions of these classes being packaged with bigger libraries such as <a href="http://hackage.haskell.org/package/hedgehog-0.5.1/docs/Hedgehog-Internal-HTraversable.html"><code>hedgehog</code></a> and <a href="https://hackage.haskell.org/package/quickcheck-state-machine-0.2.0/docs/Test-StateMachine-Types-HFunctor.html"><code>quickcheck-state-machine</code></a>. There are also a few packages providing similar tools. The most mature of these seems to be <a href="http://hackage.haskell.org/package/rank2classes"><code>rank2classes</code></a>, which includes some Template Haskell tools for deriving instances; there’s also <a href="http://hackage.haskell.org/package/conkin">the Conkin package</a>, which has <a href="https://github.com/rampion/conkin/blob/master/README.md">a well-written tutorial</a> focusing on working with data in column-major order.</p>
<p>Haskell’s full of big ideas and powerful programming idioms. In this post we saw an example of reinterpreting some familiar tools - <code>Functor</code>, <code>Traversable</code> and <code>Representable</code> - in a new context. With the intuition that a record template is a container of functors, and the formalism of functors from the functor category, we were able to reuse intuitions about those familiar tools to write terse and generic programs.</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on December 15, 2017</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/develop/comments/2017-12-15-functor-functors/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Recursion Without Recursion</title>
    <link href="http://www.benjamin.pizza/posts/2017-11-13-recursion-without-recursion.html" />
    <id>http://www.benjamin.pizza/posts/2017-11-13-recursion-without-recursion.html</id>
    <published>2017-11-13T00:00:00Z</published>
    <updated>2017-11-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November 13, 2017
    
</div>

<p>If you visit <a href="https://www.stackoverflow.com/jobs">Stack Overflow Jobs</a> you’ll see that our job search form supports a simple advanced search syntax, including Boolean operators and a number of custom filters such as technology tags and minimum salary. For example, I hate writing JavaScript, but my loyalties can be bought, so I might type <a href="https://stackoverflow.com/jobs?sort=i&amp;q=%5Bc%23%5D+and+(not+%5Bjavascript%5D+or+salary%3A50000gbp)"><code>[c#] and (not [javascript] or salary:50000gbp)</code></a> into the search box. This advanced search syntax is called JQL, for <em>Jobs Query Language</em>.</p>
<p>It should come as no surprise that our codebase contains a miniature compiler for our miniature query language. Our compiler looks much like any other compiler: there’s a parser which produces an abstract syntax tree (hereafter <em>AST</em>), a pipeline of analysers and transformations which operate on that AST, and a code generator which turns the JQL into an ElasticSearch query. (Actually, queries that are simple enough end up skipping the Elastic code generation step, instead being used by an interpreter to search an in-memory cache of jobs.)</p>
<p><img src="/images/2017-11-13-recursion-without-recursion/compiler.jpg" alt="Compiler overview" width="700" /></p>
<p>In this post I’m going to focus on the middle part of that pipeline: how to write operations traversing a tree with a minimum of boilerplate.</p>
<h2 id="asts-and-operations">ASTs and operations</h2>
<p>The JQL AST looks roughly like this:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">abstract</span> <span class="kw">class</span> JqlNode {}
<span class="kw">class</span> AndNode : JqlNode
{
    <span class="kw">public</span> JqlNode Left { <span class="kw">get</span>; }
    <span class="kw">public</span> JqlNode Right { <span class="kw">get</span>; }
}
<span class="kw">class</span> OrNode : JqlNode
{
    <span class="kw">public</span> JqlNode Left { <span class="kw">get</span>; }
    <span class="kw">public</span> JqlNode Right { <span class="kw">get</span>; }
}
<span class="kw">class</span> NotNode : JqlNode
{
    <span class="kw">public</span> JqlNode Operand { <span class="kw">get</span>; }
}
<span class="kw">class</span> SalaryNode : JqlNode
{
    <span class="kw">public</span> <span class="dt">int</span> Amount { <span class="kw">get</span>; }
    <span class="kw">public</span> <span class="dt">string</span> Currency { <span class="kw">get</span>; }
}
<span class="kw">class</span> TagNode : JqlNode
{
    <span class="kw">public</span> <span class="dt">string</span> Tag { <span class="kw">get</span>; }
}</code></pre></div>
<p>Each syntactic form in the source language is represented as a subclass of <code>JqlNode</code>. Using the example I gave above, the input string <code>[c#] and (not [javascript] or salary:50000gbp)</code> would be represented as:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">new</span> <span class="fu">AndNode</span>(
    <span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;c#&quot;</span>),
    <span class="kw">new</span> <span class="fu">OrNode</span>(
        <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>)),
        <span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>)
    )
)</code></pre></div>
<p><img src="/images/2017-11-13-recursion-without-recursion/ast.jpg" alt="The abstract syntax tree" width="700" /></p>
<p>When you need to analyse a <code>JqlNode</code>, you use pattern matching to see what type of node you have, and recursively query the operands of <code>And</code>/<code>Or</code>/<code>Not</code> nodes. Here’s a function which searches for the <code>TagNode</code>s in a tree:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs">IEnumerable&lt;<span class="dt">string</span>&gt; <span class="fu">ExtractTags</span>(JqlNode node)
{
    <span class="kw">switch</span> (node)
    {
        <span class="kw">case</span> TagNode t:
            <span class="kw">return</span> <span class="kw">new</span>[] { t.<span class="fu">Tag</span> };
        <span class="kw">case</span> AndNode a:
            <span class="co">// recursively extract the tags from the two operands</span>
            <span class="kw">return</span> <span class="fu">ExtractTags</span>(a.<span class="fu">Left</span>).<span class="fu">Concat</span>(<span class="fu">ExtractTags</span>(a.<span class="fu">Right</span>));
        <span class="kw">case</span> OrNode o:
            <span class="kw">return</span> <span class="fu">ExtractTags</span>(o.<span class="fu">Left</span>).<span class="fu">Concat</span>(<span class="fu">ExtractTags</span>(o.<span class="fu">Right</span>));
        <span class="kw">case</span> NotNode n:
            <span class="kw">return</span> <span class="fu">ExtractTags</span>(n.<span class="fu">Operand</span>);
        <span class="kw">case</span> SalaryNode s:
            <span class="kw">return</span> Enumerable.<span class="fu">Empty</span>&lt;<span class="dt">string</span>&gt;();
        <span class="kw">default</span>:
            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">ArgumentOutOfRangeException</span>(<span class="fu">nameof</span>(node));
    }
}</code></pre></div>
<p>Transforming a <code>JqlNode</code> to produce a new <code>JqlNode</code> is a similar story: you recursively traverse the tree, taking it apart and putting it back together. Here’s an example of an optimisation step which never doesn’t remove double-negatives, so a query like <code>not (not [java])</code> gets simplified to <code>[java]</code>:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs">JqlNode <span class="fu">SimplifyDoubleNegatives</span>(JqlNode node)
{
    <span class="kw">switch</span> (node)
    {
        <span class="kw">case</span> NotNode n1 when n1.<span class="fu">Operand</span> <span class="kw">is</span> NotNode n2:
            <span class="kw">return</span> <span class="fu">SimplifyDoubleNegatives</span>(n2.<span class="fu">Operand</span>);
        <span class="kw">case</span> TagNode t:
            <span class="kw">return</span> t;
        <span class="kw">case</span> SalaryNode s:
            <span class="kw">return</span> s;
        <span class="kw">case</span> AndNode a:
            <span class="co">// recursively process the operands and rebuild the node</span>
            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">AndNode</span>(
                <span class="fu">SimplifyDoubleNegatives</span>(a.<span class="fu">Left</span>),
                <span class="fu">SimplifyDoubleNegatives</span>(a.<span class="fu">Right</span>)
            );
        <span class="kw">case</span> OrNode o:
            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">OrNode</span>(
                <span class="fu">SimplifyDoubleNegatives</span>(o.<span class="fu">Left</span>),
                <span class="fu">SimplifyDoubleNegatives</span>(o.<span class="fu">Right</span>)
            );
        <span class="kw">case</span> NotNode n:
            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">NotNode</span>(
                <span class="fu">SimplifyDoubleNegatives</span>(n.<span class="fu">Operand</span>)
            );
        <span class="kw">default</span>:
            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">ArgumentOutOfRangeException</span>(<span class="fu">nameof</span>(node));
    }
}</code></pre></div>
<p>This type of code gets pretty tedious pretty quickly! In both of these functions, only one of the <code>case</code>s was interesting (<code>case TagNode t</code> in <code>ExtractTags</code> and <code>case NotNode n1 when n1.Operand is NotNode n2</code> in <code>SimplifyDoubleNegatives</code>); the rest of each function was just boilerplate to recursively operate on nodes’ children. You’re interested in a particular syntactic pattern, but searching the whole tree for that pattern requires more code than finding the pattern does. In the real JQL compiler we have about a dozen subclasses of <code>JqlNode</code>, so around 90% of the code in each operation is boilerplate!</p>
<h2 id="easier-querying">Easier Querying</h2>
<p>Here’s the first insight that’ll help us improve on this situation. In <code>ExtractTags</code> we were searching the tree for nodes satisfying a particular pattern. But supposing you had a list of every possible subtree - the root node, all of its children, all of their children, and so on - you could use LINQ to query that list to find nodes satisfying the pattern you’re looking for. We’ll call the function which extracts the list of subtrees <code>SelfAndDescendants</code>.</p>
<p>Given a tree like the example from above (<code>[c#] and (not [javascript] or salary:50000gbp)</code>), <code>SelfAndDescendants</code> will yield every subtree in a depth-first, left-to-right manner:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">new</span> JqlNode[]
{
    <span class="kw">new</span> <span class="fu">AndNode</span>(
        <span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;c#&quot;</span>),
        <span class="kw">new</span> <span class="fu">OrNode</span>(
            <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>)),
            <span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>)
        )
    ),
    <span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;c#&quot;</span>),
    <span class="kw">new</span> <span class="fu">OrNode</span>(
        <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>)),
        <span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>)
    ),
    <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>)),
    <span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>),
    <span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>)
}</code></pre></div>
<p>Here’s <code>SelfAndDescendants</code> in use:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs">IEnumerable&lt;<span class="dt">string</span>&gt; <span class="fu">ExtractTags</span>(JqlNode node)
    =&gt; node
        .<span class="fu">SelfAndDescendants</span>()
        .<span class="fu">OfType</span>&lt;TagNode&gt;()
        .<span class="fu">Select</span>(n =&gt; n.<span class="fu">Tag</span>);</code></pre></div>
<p>What an improvement! This code is much shorter, but more importantly it’s clearer and more direct. You can directly read off the intention of the code, rather than having to decipher the pattern of recursive calls. It’s also harder to get wrong - I personally am rather prone to forgetting to make a recursive call when I’m writing these sorts of functions. What’s more, <code>SelfAndDescendants</code> is totally reusable. If you can write a LINQ query, you can get whatever information you need from a <code>JqlNode</code>.</p>
<p>Of course, the pattern-matching and recursion has to go somewhere, and that somewhere is the reusable <code>SelfAndDescendants</code> function.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">public</span> <span class="kw">static</span> IEnumerable&lt;JqlNode&gt; <span class="fu">SelfAndDescendants</span>(<span class="kw">this</span> JqlNode node)
{
    <span class="kw">yield</span> <span class="kw">return</span> node;
    <span class="kw">switch</span> (node)
    {
        <span class="kw">case</span> TagNode t:
            <span class="kw">yield</span> <span class="kw">break</span>;
        <span class="kw">case</span> SalaryNode s:
            <span class="kw">yield</span> <span class="kw">break</span>;
        <span class="kw">case</span> AndNode a:
            <span class="kw">foreach</span> (var descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(a.<span class="fu">Left</span>))
                <span class="kw">yield</span> <span class="kw">return</span> descendant;
            <span class="kw">foreach</span> (var descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(a.<span class="fu">Right</span>))
                <span class="kw">yield</span> <span class="kw">return</span> descendant;
        <span class="kw">case</span> OrNode o:
            <span class="kw">foreach</span> (var descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(o.<span class="fu">Left</span>))
                <span class="kw">yield</span> <span class="kw">return</span> descendant;
            <span class="kw">foreach</span> (var descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(o.<span class="fu">Right</span>))
                <span class="kw">yield</span> <span class="kw">return</span> descendant;
        <span class="kw">case</span> NotNode n:
            <span class="kw">foreach</span> (var descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(n.<span class="fu">Operand</span>))
                <span class="kw">yield</span> <span class="kw">return</span> descendant;
        <span class="kw">default</span>:
            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">ArgumentOutOfRangeException</span>(<span class="fu">nameof</span>(node));
    }
}</code></pre></div>
<p>Google crawls links between pages for you, so you can search the Web for a specific piece of information; <code>SelfAndDescendants</code> crawls pointers between nodes for you, so you can search a tree for a specific piece of information. Programming tree traversals by hand is like manually clicking every link on the Web!</p>
<h2 id="a-reusable-transformer">A Reusable Transformer</h2>
<p>How about transforming a JQL AST? <code>SimplifyDoubleNegatives</code> searches a JQL tree for a pattern and rebuilds a new version of the tree. Can this be extracted into a reusable function?</p>
<p>To rewrite a tree, you search the tree for nodes satisfying the pattern you’re looking for and replace them. As with <code>SelfAndDescendants</code>, the trick is to separate the responsibilities of <em>looking at every node in the tree</em> and <em>deciding whether to replace a given node</em>. You can write a higher-order function - let’s call it <code>Rewrite</code> - which applies a <code>Func</code> to every node in a JQL tree from bottom to top; then it’s the <code>Func</code>’s job to decide what to do with each node.</p>
<p>For example, <code>Rewrite</code> will take the query above (<code>[c#] and (not [javascript] or salary:50000gbp)</code>) and a function <code>transformer</code>, and compute the expression:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">AndNode</span>(
    <span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;c#&quot;</span>)),
    <span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">OrNode</span>(
        <span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">NotNode</span>(
            <span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">TagNode</span>(<span class="st">&quot;javascript&quot;</span>))
        )),
        <span class="fu">transformer</span>(<span class="kw">new</span> <span class="fu">SalaryNode</span>(<span class="dv">50000</span>, <span class="st">&quot;gbp&quot;</span>))
    ))
))</code></pre></div>
<p>So <code>transformer</code> gets applied to every subtree exactly once. <code>Rewrite</code> is a mapping operation, like LINQ’s <code>Select</code>. Here’s how it’s implemented.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">static</span> JqlNode <span class="fu">Rewrite</span>(
    <span class="kw">this</span> JqlNode node,
    Func&lt;JqlNode, JqlNode&gt; transformer
)
{
    <span class="kw">switch</span> (node)
    {
        <span class="kw">case</span> TagNode t:
            <span class="kw">return</span> <span class="fu">transformer</span>(t);
        <span class="kw">case</span> SalaryNode s:
            <span class="kw">return</span> <span class="fu">transformer</span>(s);
        <span class="kw">case</span> AndNode a:
            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">AndNode</span>(
                <span class="fu">transformer</span>(a.<span class="fu">Left</span>),
                <span class="fu">transformer</span>(a.<span class="fu">Right</span>)
            );
        <span class="kw">case</span> OrNode o:
            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">OrNode</span>(
                <span class="fu">transformer</span>(o.<span class="fu">Left</span>),
                <span class="fu">transformer</span>(o.<span class="fu">Right</span>)
            );
        <span class="kw">case</span> NotNode n:
            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">NotNode</span>(<span class="fu">transformer</span>(n.<span class="fu">Operand</span>));
        <span class="kw">default</span>:
            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">ArgumentOutOfRangeException</span>(<span class="fu">nameof</span>(node));
    }
}</code></pre></div>
<p>To use this <code>Rewrite</code> method, you write a transformation function which calculates a replacement for each node. If there’s no replacing to do, it just returns the same node. Like this:</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs">JqlNode <span class="fu">SimplifyDoubleNegatives</span>(JqlNode node)
    =&gt; node.<span class="fu">Rewrite</span>(
        n =&gt; n <span class="kw">is</span> NotNode n1 &amp;&amp; n1.<span class="fu">Operand</span> <span class="kw">is</span> NotNode n2
            ? n2.<span class="fu">Operand</span>
            : n
    );</code></pre></div>
<p>Once again, this code is a huge improvement over the verbose version which used <code>switch</code> and recursion. <code>Rewrite</code> allows us to get straight to the point and only think about the parts of the tree we’re interested in.</p>
<h2 id="from-pattern-to-library">From Pattern to Library</h2>
<p><code>Rewrite</code> and <code>SelfAndDescendants</code> wrap up two particular types of recursion, for reuse in a wide variety of operations. This is a powerful way to program - gone are the days of writing a bespoke traversal for every operation! - and these two functions form the basis of most of the operations in the production JQL compiler, but in this form they don’t constitute a library. <code>SelfAndDescendants</code> and <code>Rewrite</code>, as written above, have knowledge of <code>JqlNode</code> baked in to them; you have to hand-write equivalent functions to work on your own datatypes.</p>
<p>We can turn this design into something generic, though, by abstracting over tree-shaped structures. What do we mean when we say a datatype is tree-shaped? The distinguishing feature which makes a tree a tree, unlike any other datatype, is recursion: each node in a tree has <em>children</em> which are also nodes.</p>
<p><img src="/images/2017-11-13-recursion-without-recursion/children.jpg" alt="Nodes and their children" width="700" /></p>
<p>As the picture shows, you can reach every node in a tree just by looking at each node’s children. If you can show me how to replace your children, I can replace your children’s children and so on. So let’s use an interface to model the notion of an object with a collection of children.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">interface</span> IRewritable&lt;T&gt; where T : IRewritable&lt;T&gt;
{
    IEnumerable&lt;T&gt; <span class="fu">GetChildren</span>();
    T <span class="fu">SetChildren</span>(IEnumerable&lt;T&gt; newChildren);
}</code></pre></div>
<p>A type <code>T</code> is <em>rewritable</em> if it knows how to access its immediate children - in other words, if you can get and set an <code>IEnumerable&lt;T&gt;</code> representing a node’s children. We’re working with immutable trees, remember, so <code>SetChildren</code> doesn’t modify the current instance - it returns a new <code>T</code> the same as the current instance but with different children. Part of the contract of <code>IRewritable</code> is that you shouldn’t call <code>SetChildren</code> with a different number of children to what you got from <code>GetChildren</code>. For example, an <code>And</code> node always has two children, so you shouldn’t try to call <code>SetChildren</code> with only one child (because, how would the <code>And</code> node rebuild itself?).</p>
<p>Now we can package up those <code>Rewrite</code> and <code>SelfAndDescendants</code> functions for any rewritable object, once and for all. If you show me how to reach each node’s immediate children, I can recursively apply that recipe to look at the children’s children and so on.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">static</span> IEnumerable&lt;T&gt; SelfAndDescendants&lt;T&gt;(<span class="kw">this</span> T node)
    where T : IRewritable&lt;T&gt;
{
    <span class="kw">yield</span> <span class="kw">return</span> node;
    <span class="kw">foreach</span> (var child <span class="kw">in</span> node.<span class="fu">GetChildren</span>())
        <span class="kw">foreach</span> (var descendant <span class="kw">in</span> <span class="fu">SelfAndDescendants</span>(child))
            <span class="kw">yield</span> <span class="kw">return</span> descendant;
}
<span class="kw">static</span> T Rewrite&lt;T&gt;(<span class="kw">this</span> T node, Func&lt;T, T&gt; transformer)
    where T : IRewritable&lt;T&gt;
{
    <span class="dt">var</span> children = node.<span class="fu">GetChildren</span>();
    <span class="dt">var</span> newChildren = children.<span class="fu">Select</span>(c =&gt; c.<span class="fu">Rewrite</span>(transformer)).<span class="fu">ToList</span>();
    <span class="dt">var</span> nodeWithNewChildren = node.<span class="fu">SetChildren</span>(newChildren);
    <span class="kw">return</span> <span class="fu">transformer</span>(nodeWithNewChildren);
}</code></pre></div>
<p>You typically implement <code>IRewritable</code> abstractly on the base type, using overrides on each subclass to find the children.</p>
<div class="sourceCode"><pre class="sourceCode csharp"><code class="sourceCode cs"><span class="kw">abstract</span> <span class="kw">class</span> JqlNode : IRewritable&lt;JqlNode&gt;
{
    <span class="kw">public</span> <span class="kw">abstract</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>();
    <span class="kw">public</span> <span class="kw">abstract</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren);
}
<span class="kw">class</span> AndNode : JqlNode
{
    <span class="co">// fields as before</span>
    <span class="kw">public</span> <span class="kw">override</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>()
        =&gt; <span class="kw">new</span>[] { Left, Right };
    <span class="kw">public</span> <span class="kw">override</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren)
        =&gt; <span class="kw">new</span> <span class="fu">AndNode</span>(
            newChildren.<span class="fu">ElementAt</span>(<span class="dv">0</span>), 
            newChildren.<span class="fu">ElementAt</span>(<span class="dv">1</span>)
        );
}
<span class="kw">class</span> OrNode : JqlNode
{
    <span class="kw">public</span> <span class="kw">override</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>()
        =&gt; <span class="kw">new</span>[] { Left, Right };
    <span class="kw">public</span> <span class="kw">override</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren)
        =&gt; <span class="kw">new</span> <span class="fu">OrNode</span>(
            newChildren.<span class="fu">ElementAt</span>(<span class="dv">0</span>), 
            newChildren.<span class="fu">ElementAt</span>(<span class="dv">1</span>)
        );
}
<span class="kw">class</span> NotNode : JqlNode
{
    <span class="kw">public</span> <span class="kw">override</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>()
        =&gt; <span class="kw">new</span>[] { Operand };
    <span class="kw">public</span> <span class="kw">override</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren)
        =&gt; <span class="kw">new</span> <span class="fu">NotNode</span>(newChildren.<span class="fu">Single</span>());
}
<span class="kw">class</span> SalaryNode : JqlNode
{
    <span class="kw">public</span> <span class="kw">override</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>()
        =&gt; Enumerable.<span class="fu">Empty</span>&lt;JqlNode&gt;();
    <span class="kw">public</span> <span class="kw">override</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren)
        =&gt; <span class="kw">this</span>;
}
<span class="kw">class</span> TagNode : JqlNode
{
    <span class="kw">public</span> <span class="kw">override</span> IEnumerable&lt;JqlNode&gt; <span class="fu">GetChildren</span>()
        =&gt; Enumerable.<span class="fu">Empty</span>&lt;JqlNode&gt;();
    <span class="kw">public</span> <span class="kw">override</span> JqlNode <span class="fu">SetChildren</span>(IEnumerable&lt;JqlNode&gt; newChildren)
        =&gt; <span class="kw">this</span>;
}</code></pre></div>
<p>Note that there isn’t a single line of recursion in the JQL-specific code. It’s all wrapped up in the <code>SelfAndDescendants</code> and <code>Rewrite</code> functions, which are totally generic and reusable for any type of tree.</p>
<p>The old-fashioned way of writing reusable tree traversals is the Visitor pattern: you put the recursive traversal code in a base class, with virtual methods for each type of node that can be overridden to carry out specific operations. (This is how the Roslyn API works, for example.) <code>IRewritable</code> is a clear improvement over the Visitor pattern. Being designed around base classes and overriding, the Visitor pattern is far clunkier to use than the functional API I outlined above; and <code>IRewritable</code> allows operations like <code>Rewrite</code> can be written totally generically, whereas with the Visitor pattern every type of tree has its own Visitor base class.</p>
<h2 id="sawmill">Sawmill</h2>
<p>I’ve named this generic tree-processing library Sawmill - because it’s all about taking trees apart! - and it’s available on <a href="https://www.nuget.org/packages/Sawmill">NuGet</a> and <a href="https://github.com/benjamin-hodgson/Sawmill">GitHub</a>. I’ll outline some improvements on the design I demonstrated above, which you’ll find in Sawmill.</p>
<p>First, what I find remarkable about this design is its power-to-weight ratio. <code>IRewritable</code> is a very simple interface with an easily-grasped meaning, but you can build a load of rich, generic tools on top of it. Sawmill contains versions of <code>SelfAndDescendants</code> and <code>Rewrite</code>, but also a bunch of other extension methods at varying levels of nicheness, all getting squeezed through the <code>IRewritable</code> interface:</p>
<ul>
<li>A family of versions of <code>SelfAndDescendants</code> capturing a variety of traversal orders (preorder, postorder and breadth-first), in both eager and lazy form</li>
<li>A <code>Fold</code> method for reducing a whole tree to a value, like LINQ’s <code>Aggregate</code></li>
<li>An iterative version of <code>Rewrite</code> which rewrites an expression repeatedly until it reaches a normal form</li>
<li>Functions for replacing one node at a time</li>
<li>A method to get an efficient mutable view of a node and its neighbours, which supports complex sequences of edits to a localised part of a tree</li>
<li>Tools to help you implement <code>IRewriter</code>, either using a typed fluent interface or using reflection and code generation.</li>
<li>Some minor API changes to the outline above, to enable greater efficiency for certain common cases.</li>
</ul>
<p>I’ve also had success implementing <code>IRewritable</code> for a variety of tree-like types. Sawmill comes bundled with versions of all of these extension methods for some well-known tree types - <code>Expression</code>, <code>XmlNode</code>, and <code>XElement</code> - and I’ve written extension packages which do the same for <code>Newtonsoft.Json.Linq</code> and Roslyn’s syntax trees. (These implementations actually use a separate <code>IRewriter</code> interface, because of course I can’t add a new interface to the above types.) Realising that I could use Sawmill to layer a simple, uniform API on top of preexisting objects felt like a real validation of the design.</p>
<p>Sawmill’s version of <code>Rewrite</code> also makes an important optimisation which I glossed over above: parts of the tree which the <code>transformer</code> function didn’t change are <em>shared</em> between the new and old versions of the tree. If you change a single node, you only have to rebuild that node’s ancestors (because their children have changed), not the parts of the tree you didn’t touch.</p>
<p><img src="/images/2017-11-13-recursion-without-recursion/sharing.jpg" alt="The sharing optimisation" width="700" /></p>
<p>(This is safe for immutable trees like those in Roslyn; for mutable trees like <code>XmlNode</code> the whole tree has to be copied if any part of it changes. This makes me sad - in my view those types should have been immutable all along.)</p>
<p>Finally and most importantly, I want to acknowledge Neil Mitchell’s great work in his <a href="https://hackage.haskell.org/package/uniplate"><code>uniplate</code> Haskell library</a> (and <a href="https://hackage.haskell.org/package/lens-4.15.4/docs/Control-Lens-Plated.html">its modernised port in <code>lens</code></a>), upon which Sawmill is based. I wouldn’t even have thought of this C# library if I hadn’t already encountered it in Haskell. It’s weird to think that <a href="http://ndmitchell.com/downloads/paper-uniform_boilerplate_and_list_processing-30_sep_2007.pdf"><code>uniplate</code>’s accompanying article</a> was published in 2007! Someone - my mum, if you must know - once told me that in the field of medicine it takes a decade for new research to reach mainstream practice. I think that process might take even longer in computer science, but I hope that in writing this I’ve helped these ideas along a little.</p>

<section class="comments">
    <h1>Comments</h1>

    <ol class="comments-list">
        
            <li class="comment">
    
        <h2 class="comment-header">By <a href="http://www.benjamin.pizza">Benjamin</a> on November 13, 2017</h2>
    
    <div class="comment-body"><p>To join the discussion, <a href="https://github.com/benjamin-hodgson/benjamin-hodgson.github.io/blob/develop/comments/2017-11-13-recursion-without-recursion/example.md">send me a pull request</a>.</p></div>
</li>
        
    </ol>
</section>
]]></summary>
</entry>

</feed>
